---
import type { CollectionEntry } from 'astro:content';
import { Image } from "astro:assets";

export interface Props {
	podcast: CollectionEntry<'germantechpodcasts'>;
}

import { URLify } from '../scripts/urlify.js';
import { formatDate, formatUnixTimestampToDate } from '../scripts/date.js';

const { podcast } = Astro.props;

let tags = [];
if (podcast.data.tags) {
	tags = podcast.data.tags.map((element) => URLify(element));
}

/**
 * getLastEpisodeStatus returns the status of the podcast based
 * on when the last episode was published.
 * There are three states:
 * 	1. 游릭 active
 * 	2. 游리 delayed
 * 	3. 游댮 inactive
 *
 * @param 	timestamp 	number 		The unix timestamp when the last episode was published
 * @return				array		Index 0: Emojy to indicate the status, index 1: String to indicate the status
 */
function getLastEpisodeStatus(timestamp) {
	let episode = new Date(timestamp * 1000);

	let dateClone = new Date();
	let sixMonth = new Date(dateClone.setMonth(dateClone.getMonth() - 6));

	dateClone = new Date();
	let twoMonth = new Date(dateClone.setMonth(dateClone.getMonth() - 2));

	if (episode < sixMonth) {
		return ['游댮', 'inactive'];
	}

	if (episode > sixMonth && episode < twoMonth) {
		return ['游리', 'delayed'];
	}

	return ['游릭', 'active'];
}

let date_1 = new Date('10/25/2021');
let date_2 = new Date();

/**
 * daysBetween calculates the number of days between
 * dateOne and dateTwo.
 *
 * @return number
 */
function daysBetween(dateOne, dateTwo) {
	const difference = dateOne.getTime() - dateTwo.getTime();
	const days = Math.ceil(difference / (1000 * 3600 * 24));
	return days;
}

let episode_status = getLastEpisodeStatus(podcast.data.latestEpisodePublished);
let episode_status_emojy = episode_status[0];

// data-* attribute to identify if this is an active or inactive podcast
// - Attribute "data-publishing-episode-status"
const dataEpisodePublishingStatus_str = episode_status[1];

// data-* attribute to identify when was the last episide published (in number of days)
// - Attribute "data-days-since-last-episode"
const lastEpisodePublished = new Date(podcast.data.latestEpisodePublished * 1000);
const today = new Date();
const dataDaysSinceLastEpisode = daysBetween(today, lastEpisodePublished);

// If a Podcast is not available on Apple Podcasts,
// we add different css classes.
let spotifyClassName = 'm-4';
if (podcast.data.itunesID == 0) {
	spotifyClassName = 'mb-4 mt-4 mr-4';
}

// Generate id based on the name
const nameId = URLify(podcast.data.name);
---

<section
	id={nameId.url}
	class="tech-podcast py-8 md:py-12 bg-white overflow-hidden"
	data-days-since-last-episode={dataDaysSinceLastEpisode}
	data-publishing-episode-status={dataEpisodePublishingStatus_str}
	style="background-image: url('/images/elements/pattern-white.svg'); background-position: center;"
>
	<div class="container px-4 mx-auto">
		<div class="flex flex-wrap lg:items-center -mx-4">
			<div class="w-full md:w-8/12 px-4 mb-16 md:mb-0">
				{
					tags.map((element) => (
						<a class="inline-block py-px mr-2 px-2 mb-4 text-xs leading-5 text-yellow-500 bg-yellow-100 font-medium uppercase rounded-full shadow-sm" href={`/deutsche-tech-podcasts/${element.url}-podcasts/`}>
							{element.name}
						</a>
					))
				}

				<h2 class="mb-8 text-4xl md:text-5xl leading-tight text-coolGray-900 font-bold tracking-tighter">
					<a href={podcast.data.website} class="hover:underline hover:text-yellow-500" title={`Website von ${podcast.data.name}`}>
						{podcast.data.name}
					</a>
				</h2>
				<p class="mb-6 text-lg md:text-xl text-coolGray-500 font-medium">
					{podcast.data.description}
				</p>
				<ul class="mb-4 text-lg md:text-xl text-coolGray-500 font-medium list-disc list-inside">
					<li>Anzahl Episoden: {podcast.data.episodeCount}</li>
					<li>Aktuellste Episode vom {formatUnixTimestampToDate(podcast.data.latestEpisodePublished)} {episode_status_emojy}</li>
					{
						podcast.data.weekly_downloads_avg.value > 0 && (
							<li>
								W칬chentliche downloads (avg): {podcast.data.weekly_downloads_avg.value} (Zahl von {formatDate(podcast.data.weekly_downloads_avg.updated)})
							</li>
						)
					}
				</ul>
				<div class="flex flex-wrap">
					{
						podcast.data.itunesID > 0 && (
							<div class="mb-4 mt-4 mr-4">
								<a class="flex items-center" href={`https://podcasts.apple.com/de/podcast/${podcast.data.itunesID}`} title={`${podcast.data.name} bei Apple Podcasts`}>
									<img class="w-8" src="/images/brands/apple.svg" alt={`${podcast.data.name} bei Apple Podcasts`} title={`${podcast.data.name} bei Apple Podcasts`} />
									<span class="text-coolGray-500 text-lg m-2">Apple</span>
								</a>
							</div>
						)
					}
					{
						podcast.data.spotify.length > 0 && (
							<div class={spotifyClassName}>
								<a class="flex items-center" href={podcast.data.spotify} title={`${podcast.data.name} auf Spotify`}>
									<img class="w-8" src="/images/brands/spotify.svg" alt={`${podcast.data.name} auf Spotify`} title={`${podcast.data.name} auf Spotify`} />
									<span class="text-coolGray-500 text-lg m-2">Spotify</span>
								</a>
							</div>
						)
					}
					<div class="mb-4 mt-4 ml-4">
						<a class="flex items-center" href={podcast.data.rssFeed} title={`${podcast.data.name} als RSS-Feed`}>
							<img class="w-8" src="/images/brands/rss.svg" alt={`${podcast.data.name} als RSS-Feed`} title={`${podcast.data.name} als RSS-Feed`} />
							<span class="text-coolGray-500 text-lg m-2">RSS</span>
						</a>
					</div>
				</div>
			</div>
			<div class="w-full md:w-4/12 px-4">
				<div class="relative mx-auto md:mr-0 max-w-max">
					<a href={podcast.data.website} title={`Website von ${podcast.data.name}`}>
						<Image class="rounded-3xl" src={podcast.data.image} alt={`Podcast ${podcast.data.name}`} title={`Podcast ${podcast.data.name}`} />
					</a>
				</div>
			</div>
		</div>
	</div>
</section>
