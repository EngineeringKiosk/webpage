---
export interface Props {
	// Number of items to show in the listing
	numberOfItems?: number;

	// Handpicked episode numbers
	// When entered a number, it is the episode number
	// As string, only "latest" is supported for now - Which represents the top episode
	episodes: Array<string|number>;
}

import { getCollection } from "astro:content";

import PodcastEpisodePreview from '../components/PodcastEpisodePreview.astro';

const { numberOfItems, episodes } = Astro.props;

// Build the list of Podcast Episodes
let allEpisodes = await getCollection("podcast");
allEpisodes.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

// Default wise list all items, only limit it if requested
let episodesToShow = allEpisodes;
let showAllButton = false;
let headline = 'Alle Podcast Episoden vom Engineering Kiosk';
let mainPage = true;
let descriptionChars = 300;

// if episodes are filtered
if (episodes) {
	headline = 'Ausgewählte Podcast Episoden für dich';
	mainPage = false;
	showAllButton = true;
	episodesToShow = [];
	descriptionChars = -1;

	// check if contains "latest-X" where X is the number of episodes to show
	const latest = episodes.find((episode) => episode.startsWith('latest'));
	if (latest) {
		const latestNumber = parseInt(latest.split('-')[1]) || 1;
		episodesToShow = episodesToShow.concat(allEpisodes.slice(0, latestNumber));
	}

	episodesToShow = episodesToShow.concat(
		allEpisodes.filter((episode) => episodes.includes(episode.slug))
	)


} else {
	if (numberOfItems && numberOfItems > 0) {
		headline = 'Die aktuellsten Podcast Episoden';
		mainPage = false;
		episodesToShow = allEpisodes.slice(0, numberOfItems);
		showAllButton = true;
	}
}
---

<section class="py-8 md:py-16 bg-white" style="background-image: url('/images/elements/pattern-white.svg'); background-repeat: no-repeat; background-position: center top;">
	<div class="container px-4 mx-auto">
		<div class="flex flex-wrap items-center mb-12">
			<div class="w-full md:w-3/4 mb-8 md:mb-0">
				<span class="inline-block py-px px-2 mb-4 text-xs leading-5 text-yellow-500 bg-yellow-100 font-medium uppercase rounded-full shadow-sm"> Podcast</span>
				{mainPage && <h1 class="mb-4 text-4xl md:text-5xl leading-tight text-darkCoolGray-900 font-bold tracking-tighter">{headline}</h1>}
				{!mainPage && <h2 class="mb-4 text-4xl md:text-5xl leading-tight text-darkCoolGray-900 font-bold tracking-tighter">{headline}</h2>}
				<p class="text-lg md:text-xl text-coolGray-500 font-medium">Jeden Dienstag gibt es eine neue Episode aus dem Kiosk rund um die Themen Engineering-Kultur, Open Source, Menschen, Technologie und verwandtes. Überall da wo es Podcasts gibt.</p>
			</div>
			{
				showAllButton && (
					<div class="w-full md:w-1/4">
						<a class="flex items-center justify-center py-2 px-4 ml-auto text-sm leading-5 text-yellow-50 font-medium bg-yellow-500 hover:bg-yellow-600 focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50 md:max-w-max rounded-md" href="/podcast/">
							Alle Podcast Episoden anzeigen
						</a>
					</div>
				)
			}
		</div>
		<div class="flex flex-wrap -mx-4">
			{episodesToShow.map((episode, i) => <PodcastEpisodePreview episode={episode} descriptionChars={descriptionChars} />)}
		</div>
		<div class="flex flex-wrap items-center mt-8 mb-12">
			{
				showAllButton && (
					<div class="w-full">
						<a class="flex items-center justify-center py-2 px-4 ml-auto text-sm leading-5 text-yellow-50 font-medium bg-yellow-500 hover:bg-yellow-600 focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50 md:max-w-max rounded-md" href="/podcast/">
							Alle Podcast Episoden anzeigen
						</a>
					</div>
				)
			}
		</div>
	</div>
</section>
