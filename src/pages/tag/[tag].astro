---
import Footer from '../../components/Footer.astro';
import MainHead from '../../components/MainHead.astro';
import Nav from '../../components/Nav.astro';
import BlogPostPreview from '../../components/BlogPostPreview.astro';
import PodcastEpisodePreview from '../../components/PodcastEpisodePreview.astro';
import { URLify } from "../../scripts/urlify.js"

export async function getStaticPaths() {
    // Get tags from blog posts
    const allBlogPosts = await Astro.glob('../blog/post/*.md');
    let allBlogPostTagsUnique = [...new Set(allBlogPosts.flatMap((p) => p.frontmatter.tags))];

    // Get tags from podcast episodes
    const allPodcastEpisode = await Astro.glob('../podcast/episode/*.md');
    let allPodcastEpisodeTagsUnique = [...new Set(allPodcastEpisode.flatMap((e) => e.frontmatter.tags))];
    const allTagsUnique = [...new Set([...allBlogPostTagsUnique, ...allPodcastEpisodeTagsUnique])];
    
    // We URLify the tag here to get dynamic url friendly names
    return allTagsUnique.map((tag) => {
        // TODO We need to URLify(tag) and need to pass it as params
        // However, this throws "need to be a string" error right now.
        // Why? I dont know. It is a string ...
        return ({ params: { tag }, props: { tag, allBlogPosts, allPodcastEpisode } })
    });
}

const { urlTag, allBlogPosts, allPodcastEpisode } = Astro.props;
let tagName = Astro.params.tag
let title = `Podcast Episoden und Blog Posts zum Thema ${tagName} - Engineering Kiosk`;
let description = `Alle Podcast Episoden und Blog Posts vom deutschsprachigen Software-Engineering-Podcast zum Thema ${tagName} auf einer Seite.`;
let canonicalURL = Astro.canonicalURL;

// Filter blog posts by tag, sort by date
const blogPosts = allBlogPosts.filter((post) => post.frontmatter.tags.includes(tagName)).sort((a, b) => new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf());

// Filter podcast episodes by tag, sort by date
const podcastEpisodes = allPodcastEpisode.filter((episode) => episode.frontmatter.tags.includes(tagName)).sort((a, b) => new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf());

---

<html lang="de">
	<head>
		<MainHead title={title} description={description} image="/images/headers/andy-grunwald-wolfgang-gassler-2022-01-07.jpg" {canonicalURL} />
	</head>

	<body class="antialiased bg-body text-body font-body">
		<div>
			<Nav title={title} />

            {podcastEpisodes.length > 0 && <section class="py-8 md:py-16 lg:pb-52 bg-white" style="background-image: url('/images/elements/pattern-white.svg'); background-repeat: no-repeat; background-position: center top;">
                <div class="container px-4 mx-auto">
                    <div class="flex flex-wrap items-center mb-12">
                        <div class="w-full md:w-3/4 mb-8 md:mb-0">
                            <span class="inline-block py-px px-2 mb-4 text-xs leading-5 text-yellow-500 bg-yellow-100 font-medium uppercase rounded-full shadow-sm">
                                Podcast
                            </span>
                            <h3 class="mb-4 text-4xl md:text-5xl leading-tight text-darkCoolGray-900 font-bold tracking-tighter">
                                Alle Podcast Episoden zum Thema {tagName}
                            </h3>
                        </div>
                    </div>
                    <div class="flex flex-wrap -mx-4">
                        {podcastEpisodes.map((episode, i) => <PodcastEpisodePreview episode={episode} showTags=true />)}
                    </div>
                </div>
            </section>}

			{blogPosts.length > 0 && <section class="py-8 md:py-16 lg:pb-52 bg-white" style="background-image: url('/images/elements/pattern-white.svg'); background-repeat: no-repeat; background-position: center top;">
                <div class="container px-4 mx-auto">
                    <div class="flex flex-wrap items-center mb-16">
                        <div class="w-full md:w-3/4 mb-8 md:mb-0">
                            <span class="inline-block py-px px-2 mb-4 text-xs leading-5 text-yellow-500 bg-yellow-100 font-medium uppercase rounded-full shadow-sm">
                                Blog
                            </span>
                            <h3 class="mb-4 text-4xl md:text-5xl leading-tight text-darkCoolGray-900 font-bold tracking-tighter">
                                Alle Blog posts zum Thema {tagName}
                            </h3>
                        </div>
                    </div>
                    <div class="flex flex-wrap -mx-4">
                        {blogPosts.map((post, i) => <BlogPostPreview post={post} n={i} />)}
                    </div>
                </div>
            </section>}

			<Footer />
		</div>
	</body>
</html>