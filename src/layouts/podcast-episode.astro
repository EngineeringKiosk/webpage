---
import Path from 'path';
import fs from 'fs';

import { Image } from "astro:assets";

import MainHead from '../components/MainHead.astro';
import Nav from '../components/Nav.astro';
import Footer from '../components/Footer.astro';
import PodcastEpisodeTranscript from '../components/PodcastEpisodeTranscript.astro';
import { URLify } from '../scripts/urlify.js';
import { formatDate, humanTimestampToSecondsTo } from '../scripts/date.js';

import podcastInfo from '../data/podcast-info.json';
import '../styles/podcast_episode.scss';

const { episode } = Astro.props;
const frontmatter = episode.data;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

let content_image = new URL(frontmatter.image.src, Astro.site.href).href;
let title = ''.concat(frontmatter.title, ' - Engineering Kiosk');
let encodedUrl = encodeURI(canonicalURL);

// We need to replace #, because this is treated as a twitter hastag
let social_text = 'Bock auf nen guten Software Engineering Podcast? HÃ¶r doch mal in die Episode "' + frontmatter.title.replace('#', '') + '" rein';
let encoded_social_text = encodeURI(social_text);

// Prepare speaker names for transcript
// Our transcript only contains "Speaker A" and "Speaker B".
// In the Podcast Episode Metadata, we also have real names :)
const speakerMap = new Map();
frontmatter.speaker.forEach ((person, index) => {
	if ('transcriptLetter' in person) {
		speakerMap.set(person.transcriptLetter, person.name);
	}
});

// Transcripts
const episodeFilename = Path.basename(episode.id);
let episodeNumber = episodeFilename.substring(0, episodeFilename.indexOf('-'));

// We have one episode starting with -1
// We need to treat this special ...
if(episodeFilename.charAt(0) == '-') {
	const filenameWithPositiveNumber = episodeFilename.substring(1, episodeFilename.length);
	episodeNumber = episodeFilename.substring(0, filenameWithPositiveNumber.indexOf('-') + 1);
}
const transcriptFilename = 'src/data/transcripts/' + episodeNumber + '-transcript-slim.json';

let transcriptionUtterances = [];
if (fs.existsSync(transcriptFilename)) {
	const transcriptionData = JSON.parse(fs.readFileSync(transcriptFilename));

	transcriptionUtterances = transcriptionData.utterances;
	// Overwrite "Speaker A" with a real name
	transcriptionUtterances.forEach ((entry, index) => {
		if (speakerMap.has(entry.speaker)) {
			transcriptionUtterances[index].speaker = speakerMap.get(entry.speaker)
		}

		transcriptionUtterances[index].startSeconds = Math.floor(entry.start / 1000);
	});
}

// Headlines is in a format like
//	"links::Links||sprungmarken::Sprungmarken||hosts::Hosts
//	"<slug>::<headline>||..."
let headline_split = frontmatter.headlines.split('||');
let header = [];

// If we have a transcript, push the headline
if (transcriptionUtterances.length > 0) {
	headline_split.push("transcript::Transkript");
}

headline_split.forEach(function callback(val) {
	let parts = val.split('::');

	// Strip out strings we don't need in the headline link
	parts[1] = parts[1].replace('(gerne auch als Voice Message)', '');

	header.push({
		slug: parts[0],
		title: parts[1],
	});
});

let tags = frontmatter.tags.map((element) => URLify(element));

// Edit slot code (real content)
// We need to edit it here, because the content comes from our Podcast hosting platform.
// This has a "special format" to ensure it looks good on Spotify (spacing, etc.).
// However, the spacing doesn't look good in web.
// Hence we need to make it look good ;)
const html = (await Astro.slots.render('default'))
	//remove all <p><br></p>
	.replace(/<p><br><\/p>/g, '')
	// add class + data attribute to p tag of format "<p>(01:18:00)"
	.replace(/<p>(\(\d\d:\d\d:\d\d\))/g, function (match, capture) {
		return '<p class="timestamp" data-chapter-start="' + humanTimestampToSecondsTo(capture) + '">' + capture;
	})
	// remove everything between <p>Feedback and 136776</p>
	.replace(/<p>Feedback[\s\S]*136776<\/p>/g, '')
---

<html lang="de">
	<head>
		<MainHead title={title} description={frontmatter.description} image={frontmatter.image.src} {canonicalURL} ogType="article" />

		<!-- https://github.com/embedly/player.js -->
		<script type="text/javascript" src="/js/player-0.1.0.min.js"></script>
		<!--
			Full configuration docs available at
			https://github.com/podigee/podigee-podcast-player/blob/master/docs/configuration.md
		-->
		<script define:vars={{ podcastInfo, frontmatter, canonicalURL, content_image }}>
			window.playerConfiguration = {
				options: {
					theme: 'default',
					startPanels: ['ChapterMarks'],
				},
				extensions: {
					ChapterMarks: {
						disabled: false,
						showOnStart: true,
					},
					SubscribeBar: {
						disabled: true,
					},
					Playlist: {
						disabled: true,
					},
				},
				podcast: {
					title: podcastInfo.title,
					subtitle: podcastInfo.subtitle,
					language: podcastInfo.language,
					feed: podcastInfo.rssFeed,
					connections: {
						itunes: podcastInfo.platformLinks.appleMusic,
						spotify: podcastInfo.platformLinks.spotify,
						deezer: podcastInfo.platformLinks.deezer,
						podimo: podcastInfo.platformLinks.podimo,
						alexa: podcastInfo.platformLinks.amazonMusic,
					},
				},
				episode: {
					title: frontmatter.title,
					coverUrl: content_image,
					media: {
						mp3: frontmatter.audio,
					},
					chaptermarks: frontmatter.chapter,
					description: frontmatter.description,
					url: canonicalURL,
				},
			};
		</script>
	</head>

	<body class="antialiased bg-body text-body font-body">
		<div>
			<Nav />

			<main>
				<section class="py-16 md:py-24 bg-white" style="background-image: url('/images/elements/pattern-white.svg'); background-repeat: no-repeat; background-position: center top;">
					<div class="container px-4 mx-auto">
						<div class="flex flex-wrap lg:items-start mb-12 -mx-4">
							<div class="w-full md:w-1/2 2xl:w-5/12 px-4 mb-8 md:mb-0">
								<div class="mx-auto md:ml-0 max-w-max overflow-hidden rounded-lg">
									<Image src={frontmatter.image} alt={`Engineering Kiosk Episode ${frontmatter.title}`} title={`Engineering Kiosk Episode ${frontmatter.title}`} />
								</div>
							</div>
							<div class="w-full md:w-1/2 px-4">
								<div class="flex items-center">
									<p class="inline-block text-yellow-500 font-medium">
										<time class="date" datetime={frontmatter.pubDate}>{formatDate(frontmatter.pubDate)}</time>
									</p>
								</div>
								<h1 class="mb-8 text-3xl md:text-4xl lg:text-5xl leading-tight text-darkCoolGray-900 font-bold tracking-tighter">
									{frontmatter.title}
								</h1>
								<div id="episode-player">
									<script class="podigee-podcast-player" src="/podcast-player/javascripts/podigee-podcast-player.js" data-configuration="playerConfiguration"></script>
									<script>
										let maxTriesToSetPlayerCommands = 100;
										var _paq = window._paq || [];
										const setPlayerCommands = function() {
											const iframe = document.querySelector('iframe.podigee-podcast-player');
											if (iframe && playerjs && playerjs.Player) {
												// Tracking docs at https://developer.matomo.org/api-reference/tracking-javascript
												const player = new playerjs.Player(iframe);
												player.on('ready', function () {
													player.on('play', function (data) {
														_paq.push([
															'trackEvent',
															'PodcastPlayer', // Category
															'play', // Action
															window.playerConfiguration.episode.title, // Event name
															Math.round(data.seconds), // Numeric value
														]);
													});
													player.on('pause', function (data) {
														_paq.push([
															'trackEvent',
															'PodcastPlayer', // Category
															'pause', // Action
															window.playerConfiguration.episode.title, // Event name
															Math.round(data.seconds), // Numeric value
														]);
													});
													player.on('ended', function () {
														_paq.push([
															'trackEvent',
															'PodcastPlayer', // Category
															'end', // Action
															window.playerConfiguration.episode.title, // Event name
														]);
													});						
												});																

												document.addEventListener('DOMContentLoaded', function() {
													// Click events for the transcriptions
													const transcriptsElements = document.querySelectorAll('[data-trans-start]');
													for (let item of transcriptsElements) {
														item.classList.add('cursor-pointer');
														item.addEventListener('click', (e) => {
															player.setCurrentTime(item.dataset.transStart);
															player.play()
														});
													}

													// Click events for the chapters in the shownotes
													const chapterElements = document.querySelectorAll('[data-chapter-start]');
													for (let item of chapterElements) {
														item.classList.add('cursor-pointer');
														item.addEventListener('click', (e) => {
															player.setCurrentTime(item.dataset.chapterStart);
															player.play()
														});
													}
												})
											} else {
												// as longs as the player and iframe wasn't loaded yet, try again
												if (maxTriesToSetPlayerCommands > 0) {
													maxTriesToSetPlayerCommands--;
													setTimeout(setPlayerCommands, 300);
												}
											}
										}
										setPlayerCommands();						
									</script>
								</div>
							</div>
						</div>
						<div class="flex flex-wrap -mx-4">
							<div class="w-full md:w-5/12 lg:w-4/12 xl:w-3/12 px-4 mb-8">
								<ul class="pb-6 mb-8 border-b border-coolGray-100">
									<li class="mb-2"><a class="inline-block py-1 text-coolGray-400 hover:text-coolGray-500 font-semibold" href="#headline-content">Shownotes / Worum geht's?</a></li>
									{
										header.map((element) => (
											<li class="mb-2">
												<a class="inline-block py-1 text-coolGray-400 hover:text-coolGray-500 font-semibold" href={`#${element.slug}`}>
													{element.title}
												</a>
											</li>
										))
									}
								</ul>
								{
									tags.length > 0 && (
										<div class="mb-8 border-b border-coolGray-100">
											{tags.map((element) => (
												<a class="inline-block py-1 px-3 mb-3 mr-3 text-xs leading-5 text-yellow-500 hover:text-yellow-600 font-medium uppercase bg-yellow-100 hover:bg-yellow-200 rounded-full shadow-sm" href={`/tag/${element.url}/`}>
													{element.url}
												</a>
											))}
										</div>
									)
								}
								<div class="flex items-center">
									<a
										title={`Kopiere den Link der Episode ${frontmatter.title} in dein Clipboard`}
										class="inline-flex mr-4 items-center justify-center py-2 px-4 text-coolGray-300 border border-coolGray-200 hover:border-coolGray-300 rounded-md shadow-md transition duration-200"
										id="copy-url"
										data-href={canonicalURL}
										href="#"
									>
										<svg width="20" height="16" viewbox="0 0 20 16" fill="none" xmlns="http://www.w3.org/2000/svg">
											<path
												d="M15 13.8333H5C4.33696 13.8333 3.70108 13.5699 3.23224 13.1011C2.76339 12.6323 2.5 11.9964 2.5 11.3333V4.66667C2.5 4.44565 2.41221 4.23369 2.25592 4.07741C2.09964 3.92113 1.88768 3.83333 1.66667 3.83333C1.44566 3.83333 1.23369 3.92113 1.07741 4.07741C0.921133 4.23369 0.833336 4.44565 0.833336 4.66667V11.3333C0.833336 12.4384 1.27232 13.4982 2.05372 14.2796C2.44063 14.6665 2.89996 14.9734 3.40549 15.1828C3.91101 15.3922 4.45283 15.5 5 15.5H15C15.221 15.5 15.433 15.4122 15.5893 15.2559C15.7455 15.0996 15.8333 14.8877 15.8333 14.6667C15.8333 14.4457 15.7455 14.2337 15.5893 14.0774C15.433 13.9211 15.221 13.8333 15 13.8333ZM19.1667 6.28333C19.158 6.20678 19.1412 6.13136 19.1167 6.05833V5.98333C19.0766 5.89765 19.0232 5.81889 18.9583 5.75V5.75L13.9583 0.75C13.8894 0.68518 13.8107 0.631734 13.725 0.591667H13.65L13.3833 0.5H6.66667C6.00363 0.5 5.36774 0.763392 4.8989 1.23223C4.43006 1.70107 4.16667 2.33696 4.16667 3V9.66667C4.16667 10.3297 4.43006 10.9656 4.8989 11.4344C5.36774 11.9033 6.00363 12.1667 6.66667 12.1667H16.6667C17.3297 12.1667 17.9656 11.9033 18.4344 11.4344C18.9033 10.9656 19.1667 10.3297 19.1667 9.66667V6.33333C19.1667 6.33333 19.1667 6.33333 19.1667 6.28333ZM14.1667 3.34167L16.325 5.5H15C14.779 5.5 14.567 5.4122 14.4107 5.25592C14.2545 5.09964 14.1667 4.88768 14.1667 4.66667V3.34167ZM17.5 9.66667C17.5 9.88768 17.4122 10.0996 17.2559 10.2559C17.0996 10.4122 16.8877 10.5 16.6667 10.5H6.66667C6.44565 10.5 6.23369 10.4122 6.07741 10.2559C5.92113 10.0996 5.83334 9.88768 5.83334 9.66667V3C5.83334 2.77899 5.92113 2.56702 6.07741 2.41074C6.23369 2.25446 6.44565 2.16667 6.66667 2.16667H12.5V4.66667C12.5 5.32971 12.7634 5.96559 13.2322 6.43443C13.7011 6.90327 14.337 7.16667 15 7.16667H17.5V9.66667Z"
												fill="currentColor"></path>
										</svg>
										<span class="ml-2 text-sm text-coolGray-500 font-medium">Copy Link</span>
									</a>
									<a
										title={`Teile die Episode ${frontmatter.title} auf Facebook`}
										class="inline-flex mr-2 h-9 w-9 items-center justify-center text-coolGray-500 border border-coolGray-200 hover:border-coolGray-300 rounded-md shadow-md transition duration-200"
										href={`https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}&quote=${encoded_social_text}`}
									>
										<svg width="10" height="18" viewbox="0 0 10 18" fill="none" xmlns="http://www.w3.org/2000/svg">
											<path
												d="M7.6 3.43332H9.16667V0.783318C8.40813 0.70444 7.64596 0.665497 6.88333 0.666651C4.61667 0.666651 3.06667 2.04998 3.06667 4.58332V6.76665H0.508333V9.73332H3.06667V17.3333H6.13333V9.73332H8.68333L9.06667 6.76665H6.13333V4.87498C6.13333 3.99998 6.36667 3.43332 7.6 3.43332Z"
												fill="currentColor"></path>
										</svg>
									</a>
									<a
										title={`Teile die Episode ${frontmatter.title} auf twitter`}
										class="inline-flex mr-2 h-9 w-9 items-center justify-center text-coolGray-500 border border-coolGray-200 hover:border-coolGray-300 rounded-md shadow-md transition duration-200"
										href={`https://twitter.com/intent/tweet?text=${encoded_social_text}&url=${encodedUrl}&via=EngKiosk`}
									>
										<svg width="18" height="14" viewbox="0 0 18 14" fill="none" xmlns="http://www.w3.org/2000/svg">
											<path
												d="M17.3333 1.83339C16.7069 2.10513 16.0445 2.28477 15.3667 2.36672C16.0818 1.93949 16.6177 1.26737 16.875 0.475053C16.203 0.875105 15.4673 1.15697 14.7 1.30839C14.1871 0.752196 13.5041 0.381966 12.7582 0.255762C12.0122 0.129558 11.2455 0.254518 10.5782 0.611044C9.91087 0.96757 9.38078 1.5355 9.07104 2.22575C8.76129 2.916 8.68941 3.68954 8.86667 4.42505C7.50786 4.35632 6.1787 4.00251 4.96555 3.3866C3.75239 2.77069 2.68237 1.90646 1.825 0.850052C1.52428 1.37519 1.36627 1.9699 1.36667 2.57505C1.3656 3.13704 1.50352 3.69057 1.76813 4.18636C2.03275 4.68215 2.41585 5.10481 2.88333 5.41672C2.33998 5.40194 1.80824 5.25613 1.33333 4.99172V5.03339C1.33741 5.82079 1.61333 6.58263 2.11443 7.19002C2.61553 7.79742 3.31105 8.21309 4.08333 8.36672C3.78605 8.45719 3.4774 8.50489 3.16667 8.50839C2.95158 8.50587 2.73702 8.48637 2.525 8.45005C2.74493 9.1274 3.17052 9.71934 3.74256 10.1435C4.31461 10.5677 5.00465 10.803 5.71667 10.8167C4.51434 11.7628 3.0299 12.2791 1.5 12.2834C1.22145 12.2843 0.943114 12.2676 0.666668 12.2334C2.22869 13.2419 4.04901 13.7773 5.90833 13.7751C7.19141 13.7884 8.46428 13.5459 9.6526 13.0618C10.8409 12.5777 11.9209 11.8616 12.8293 10.9555C13.7378 10.0493 14.4566 8.97121 14.9438 7.78414C15.431 6.59707 15.6767 5.32483 15.6667 4.04172C15.6667 3.90005 15.6667 3.75005 15.6667 3.60005C16.3206 3.11239 16.8846 2.51457 17.3333 1.83339V1.83339Z"
												fill="currentColor"></path>
										</svg>
									</a>
								</div>
							</div>
							<div class="w-full md:w-7/12 lg:w-8/12 xl:w-9/12 md:flex-1 px-4">
								{
									(frontmatter.spotify || frontmatter.apple_podcasts || frontmatter.google_podcasts) && (
										<section class="mb-6 py-4">
											<div class="mb-8 text-xl md:text-xl font-semibold text-coolGray-400 text-center">Diese Episode in deiner Podcast-App hÃ¶ren...</div>
											<div class="container px-4 mx-auto">
												<div class="flex flex-wrap justify-center">
													{frontmatter.apple_podcasts && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.apple_podcasts} title={`Engineering Kiosk ${frontmatter.title} bei Apple Podcasts`}>
																<img class="w-12" src="/images/brands/apple.svg" alt={`Engineering Kiosk ${frontmatter.title} bei Apple Podcasts`} />
																<span class="text-lg m-2">Apple</span>
															</a>
														</div>
													)}
													{frontmatter.spotify && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.spotify} title={`Engineering Kiosk ${frontmatter.title} auf Spotify`}>
																<img class="w-12" src="/images/brands/spotify.svg" alt={`Engineering Kiosk ${frontmatter.title} auf Spotify`} />
																<span class="text-lg m-2">Spotify</span>
															</a>
														</div>
													)}
													{frontmatter.google_podcasts && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.google_podcasts} title={`Engineering Kiosk ${frontmatter.title} bei Google Podcasts`}>
																<img class="w-12" src="/images/brands/google.svg" alt={`Engineering Kiosk ${frontmatter.title} auf Google Podcasts`} />
																<span class="text-lg m-2">Google</span>
															</a>
														</div>
													)}
													{frontmatter.amazon_music && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.amazon_music} title={`Engineering Kiosk ${frontmatter.title} bei Amazon Music`}>
																<img class="w-12" src="/images/brands/amazonmusic_black.svg" alt={`Engineering Kiosk ${frontmatter.title} auf Amazon Music`} />
																<span class="text-lg m-2">Amazon</span>
															</a>
														</div>
													)}
													{frontmatter.deezer && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.deezer} title={`Engineering Kiosk ${frontmatter.title} bei Deezer`}>
																<img class="w-12" src="/images/brands/deezer.svg" alt={`Engineering Kiosk ${frontmatter.title} auf Deezer`} />
																<span class="text-lg m-2">deezer</span>
															</a>
														</div>
													)}
													{frontmatter.rtlplus && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.rtlplus} title={`Engineering Kiosk ${frontmatter.title} bei RTL Plus Musik`}>
																<img class="h-6" src="/images/brands/rtl-plus.svg" alt={`Engineering Kiosk ${frontmatter.title} auf RTL Plus Musik`} />
																<span class="text-lg m-2">&nbsp;</span>
															</a>
														</div>
													)}
													{frontmatter.youtube && (
														<div class="m-2">
															<a class="flex items-center" href={frontmatter.youtube} title={`Engineering Kiosk ${frontmatter.title} auf YouTube`}>
																<img class="w-12" src="/images/brands/youtube.svg" alt={`Engineering Kiosk ${frontmatter.title} auf YouTube`} />
																<span class="text-lg m-2">YouTube</span>
															</a>
														</div>
													)}
												</div>
											</div>
										</section>
									)
								}
								<h3 class="mb-4 text-2xl md:text-3xl font-semibold text-coolGray-800" id="headline-content">Shownotes / Worum geht's?</h3>
								<article class="podcast_episode_content_slot">
									<Fragment set:html={html} />
									<PodcastEpisodeTranscript utterances={transcriptionUtterances} />
								</article>
							</div>
						</div>
					</div>
				</section>
			</main>

			<Footer />
			<script src="/js/copy-url.js" is:inline></script>
		</div>
	</body>
</html>
