{
    "language_code": "de",
    "audio_url": "https://cloud.inlupus.at/s/g9fB7Yqcn4we3np/download/ep115_shift_left.mp3",
    "punctuate": true,
    "format_text": true,
    "dual_channel": false,
    "webhook_url": null,
    "webhook_auth_header_name": null,
    "webhook_auth_header_value": null,
    "audio_start_from": null,
    "audio_end_at": null,
    "word_boost": [],
    "boost_param": null,
    "filter_profanity": false,
    "redact_pii": false,
    "redact_pii_audio": false,
    "redact_pii_policies": null,
    "redact_pii_sub": null,
    "speaker_labels": true,
    "speakers_expected": 2,
    "content_safety": false,
    "content_safety_confidence": null,
    "iab_categories": false,
    "custom_spelling": null,
    "disfluencies": false,
    "sentiment_analysis": false,
    "auto_chapters": false,
    "entity_detection": false,
    "summarization": false,
    "summary_model": null,
    "summary_type": null,
    "auto_highlights": false,
    "language_detection": false,
    "speech_threshold": null,
    "speech_model": null,
    "id": "05087e94-a51a-44ba-ae45-2456096d21dd",
    "status": "completed",
    "error": null,
    "utterances": [
        {
            "text": "Untertitel im Auftrag des ZDF, 2021 DevOps, MLOps, CloudOps, AIOps, DataOps, SecOps, DevSecOps, HROps, LegalOps, BitsOps, LLMOps, ChatOps, NoOps oder einfach nur ShiftLeft. Aber was bedeutet dieser Trend vom ShiftLeft? Müssen wir jetzt als EntwicklerInnen alles lernen? Sind wir für alles verantwortlich? Und was ist an der Theorie dran, dass unsere gut bezahlten Jobs nicht der KI, sondern ShiftLeft zum Opfer fallen könnten? Wir nehmen uns diesem Hype-Thema einmal an und besprechen die ganzen Implikationen.",
            "start": 366,
            "end": 36296,
            "confidence": 0.7888266666666668,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Und los geht's!",
            "start": 36337,
            "end": 36899,
            "confidence": 0.695,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Hanni, du weißt ja, dass wir eigentlich fast ein Hype-Driven-Podcast sind. Wir sprechen ja ständig über AI und ob AI unseren Arbeitsplatz ablösen wird, zum Beispiel. Also nicht nur wir, irgendwie die ganze Welt spricht darüber. Und dabei hat die ganze Welt irgendwie einen anderen Hype, der sich so eigentlich in den letzten Jahrzehnten eingeschlichen hat. Übersehen, würde ich fast sagen. Und der eigentlich noch viel gefährlicher ist wie das ganze AI-Zeug. Und zufälligerweise haben wir ja in diesem Podcast einen absoluten Spezialisten, wenn es darum geht. Also darf ich Andi Dich heute mal herzlich willkommen heißen, weil es geht in dem Fall über ein Thema, das dich ja den ganzen Tag beschäftigt.",
            "start": 42124,
            "end": 84044,
            "confidence": 0.8448407079646019,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ich bin mir nicht ganz sicher, ob du jetzt den Klimawandel meinst, Ja, der.",
            "start": 84064,
            "end": 88074,
            "confidence": 0.7655714285714286,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Beschäftigt dich doch nie.",
            "start": 88114,
            "end": 89315,
            "confidence": 0.7092499999999999,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Naja, also all das, was du gerade gesagt hast, könnte man auch auf den Klimawandel setzen. Er, der Klimawandel, bedroht unsere Jobs, denke ich schon. Ich bin aber kein Experte für den Klimawandel, aber da wir im Internet sind, hat jeder eine Meinung und somit kann ich auch Experte sein. Wusstest du eigentlich mal, dass ich den jeglichen Respekt vor dem Wort Experte verloren habe, als ich mal eine Episode von Galileo auf ProSieben gesehen habe?",
            "start": 89395,
            "end": 113943,
            "confidence": 0.8177894736842105,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jetzt bin ich gespannt.",
            "start": 113963,
            "end": 114703,
            "confidence": 0.43424999999999997,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Und zwar haben die getestet, was man irgendwie aus 20 Metern fallen lassen kann. Dann sind die mit so einem Kran hoch und haben sich auf irgendeinem Hof getroffen, wo da eine Betonfläche war, und haben Sachen fallen lassen. Und auf einmal wurde eine Person interviewt, weil die hatten Konservendosen dann irgendwie in der Hand und wollten Konservendosen fallen lassen. Und dann stand da der Name, und darunter steht ja immer der Titel. Und dann stand da, weiß ich nicht, Max Mustermann, Dosenexperte.",
            "start": 115343,
            "end": 140314,
            "confidence": 0.7310361445783132,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Experte für Dosen.",
            "start": 140354,
            "end": 141494,
            "confidence": 0.6093333333333333,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Dosenexperte. Und ich weiß jetzt, die haben jetzt nicht erwähnt, dass der irgendwie in einer Konservenfabrik gearbeitet hat oder sowas. Ich weiß nicht, wie man Dosenexperte wird. Deswegen hab ich ein bisschen den Respekt vor Experten verloren oder halt von der Definition von ProSieben, von dem Wort Experte.",
            "start": 141534,
            "end": 156803,
            "confidence": 0.7566874999999998,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Eine Freundin von mir hat mal, ich glaube, es war nicht für Galileo, sonst bekommen wir dann noch Klagen, aber für so eine ähnliche Show gearbeitet. Die hat mir da auch Horrorgeschichten erzählt, wie da recherchiert wird. Da wird sich irgendwas ausgedacht und dann wird noch schnell eine Webseite gesucht, wo das irgendwie erwähnt ist und damit ist das schon genug Recherche und man macht da schon eine ganze Fernsehsendung draus. Also es ist erschreckend, schlimm diese Research wahrgenommen wird in solchen Sendungen.",
            "start": 156843,
            "end": 182536,
            "confidence": 0.7890240963855426,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Dann bin ich ja froh, dass ich GEZ zahle und hoffentlich sowas bei ARD, ZDF, Dreisat und Co. nicht habe.",
            "start": 182556,
            "end": 189163,
            "confidence": 0.8480000000000001,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Das hoffe ich doch mal.",
            "start": 189924,
            "end": 190745,
            "confidence": 0.6324,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Alle von uns benutzen Open Source. Viele haben den Drang mal bei Open Source mitzuwirken. Einige tun dies in ihrer Freizeit und ganz ganz wenige Leute haben den Luxus dafür auch bezahlt zu werden. Wenn du doch mal den Drang hast zur letzten Kategorie zu gehören, dann hör mir mal zu. Das Media Lab Bayern hat mit dem Media Tech Lab eine 50.000 Euro Open Source Förderung auf die Beine gestellt. Was ist das? Wie funktioniert das? Du bekommst 50.000 Euro um sechs Monate alleine oder in einem Team zu zweit an einer Open Source Lösung für die Medienbranche zu arbeiten. Das kann wirklich alles sein. Im Bereich künstliche Intelligenz, Infrastruktur und Webtechnologie, User Experience und User Interfaces. Seid einfach kreativ. Schaut euch YouTube, Twitch und Co. an. Was könnte die Medienbranche nach vorne bringen, beziehungsweise was wollt ihr auch als Konsumenten von der Medienbranche? Ihr habt Zeit, das zu entwickeln. Eure Idee pitcht ihr in einem kleinen Dokument, jetzt nicht acht Seiten oder so, also wirklich ganz klein und reicht diese ein. Wenn das ganze recht interessant für dich klingt, du aber sagst, hey, aufgrund meines Angestelltenverhältnisses habe ich dafür eigentlich gar keine Zeit, dann kommt hier mal meine Idee. Sprech doch mal mit deiner Vorgesetzten über dieses Förderprogramm. Viele Firmen erlauben einem ein sechsmonatiges Sabbatical einzulegen oder gegebenenfalls unbezahlten Urlaub für diesen Zeitraum zu nehmen. Finanziell seid ihr durch die Fördersumme gut abgesichert. Ich denke, dass das eine gute Möglichkeit ist, um etwas anderes zu sehen, mal was Neues zu lernen, neue Inspirationen zu bekommen und sich selbst so ein bisschen aus der eigenen Komfortzone rauszubewegen. Im Endeffekt profitiert davon auch euer Arbeitgeber. Und wer weiß, vielleicht wird nach den sechs Monaten sogar mehr aus dem Open Source Projekt. Wolfgang selbst hat mal daran teilgenommen und arbeitet heute immer noch an seiner Podcast Analytics Plattform. Also schaut mal unter engineeringkios.dev slash medialab vorbei. Den Link findest du natürlich auch in den Show Notes. Und falls du noch ein bisschen Inspiration brauchst, komm doch einfach in unsere Discord-Community. Wolfgang steht dir da, Rede und Antwort. Und jetzt geht's weiter mit dem Podcast. Jetzt löse ich das ganze Rätsel mal auf. Es geht nicht um den Klimawandel. Und zwar spricht der Wolfgang über den Hype, wenn wir alle hier nicht aufpassen oder uns nicht weiterentwickeln, der uns dann trotzdem den Job wegnimmt oder beziehungsweise nicht wegnimmt, sondern eher abhängt. Und zwar sprechen wir heute über Shift Left. Und Shift Left, davon rede ich jetzt nicht von der Politik mit der AfD und den Linken.",
            "start": 191966,
            "end": 332701,
            "confidence": 0.82318396226415,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Das wäre ja Shift Right aktuell.",
            "start": 332801,
            "end": 334622,
            "confidence": 0.49266666666666664,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Leider in europa aktuell shift right das ist richtig hoffe da kriegen wir nochmal die kurve aber wir sprechen über shift.",
            "start": 335562,
            "end": 340746,
            "confidence": 0.7352857142857144,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Left und also die taste auf dem keyboard links von mir.",
            "start": 340786,
            "end": 345368,
            "confidence": 0.7458181818181818,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Es regnet dauerhaft ne ist shift konstant oder shift dauerhaft naja.",
            "start": 345408,
            "end": 348550,
            "confidence": 0.6806363636363636,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Das ist shift lock.",
            "start": 348590,
            "end": 350011,
            "confidence": 0.6679999999999999,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Das war ein flacher witz.",
            "start": 350051,
            "end": 351972,
            "confidence": 0.8156000000000001,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Caps lock so heißt es. Ich hab sogar den flachwitz versaut.",
            "start": 352012,
            "end": 356355,
            "confidence": 0.6414545454545455,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Aber es geht um den Begriff, die Methode, das Konzept von ShiftLeft. Und ich weiß nicht, ob es euch auch so geht, aber zumindestens in unserem Management, also in der Firma bei meinem Arbeitgeber, höre ich das seit zwei Jahren runter und rauf, das Wort. Also dieses Wort ShiftLeft oder diese zwei Wörter ShiftLeft habe ich so oft in letzter Zeit gehört. Und jetzt in den letzten Monaten ist es vermehrt in dem einen oder anderen Software Engineering Newsletter auch nochmal aufgepoppt. In meiner Bubble ist es auf jeden Fall allgegenwärtig. Und deswegen wollen wir fragen, wo hast du den Term Shift Left das erste Mal gehört?",
            "start": 357203,
            "end": 393952,
            "confidence": 0.795607476635514,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Wir springen schon auf jeden Hype-Train auf so langsam. Ist ja unglaublich. Also das erste Mal, puh, keine Ahnung, was mir so einfällt als letztes Mal, wo ich es gehört habe, ist in einer Episode von uns.",
            "start": 393992,
            "end": 405416,
            "confidence": 0.7830540540540541,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Lustigerweise habe ich mich natürlich auch auf diese Episode vorbereitet und es war in der Continuous Integration Episode mit dem Michael. Deswegen überlasse ich dir gerne mal ganz kurz die Definition, was ist denn Shift-Lift.",
            "start": 405856,
            "end": 417733,
            "confidence": 0.8216857142857142,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ich habe gedacht, du bist der Experte für ShiftLeft. Aber dankenswerterweise bin ich natürlich einigermaßen vorbereitet. Und man kann sich vielleicht schon das Ganze ein bisschen vorstellen, was ShiftLeft bedeutet, wenn man sich das grafisch vorstellt. Wenn man sich so einen Prozess ansieht von der Softwareentwicklung von links vom Start von so einem Softwareprozess, wo man die Software erfindet, bis ganz nach rechts, wo die Software dann irgendwo läuft, deployed ist. Und shift left bedeutet jetzt eigentlich, dass man das Ganze nach links drückt. Also vom Deployment wandern gewisse Dinge nach links. Und was sind jetzt die gewissen Dinge? Dass man eben Aktivitäten oder Teile von diesem Prozess, die früher irgendwelche Leute da eher auf der rechten Seite gemacht haben, dass man die weiter nach links drückt, eher in Richtung EntwicklerInnen. Und dass die auf der Seite mehr übernehmen, was früher eher auf der rechten Seite war. Also, wenn man das rein grafisch sieht, einfach alles von rechts, oder nicht alles, aber ganz viel von rechts, wandert mehr nach links.",
            "start": 418123,
            "end": 481920,
            "confidence": 0.838441176470588,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "So, das war jetzt der erste Paragraf von Wikipedia und im zweiten Paragraf werden oft Beispiele genannt.",
            "start": 482304,
            "end": 487467,
            "confidence": 0.7716470588235295,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Darum bist du Experte.",
            "start": 487508,
            "end": 488948,
            "confidence": 0.81225,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Bitte fahren Sie fort, Wikipedia-Gassler.",
            "start": 488988,
            "end": 490670,
            "confidence": 0.784,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ich hab gedacht, du bringst jetzt die Beispiele. Also ganz klassisch, was wir ja aus der Vergangenheit schon kennen, ist das leidige Testen zum Beispiel. dass Entwickler mittlerweile testen müssen und Tests schreiben müssen. Früher hat es ja irgendwer ganz auf der rechten Seite gemacht, QAs, die haben dann manuell da sich durch die Oberfläche geklickt und gecheckt, ob da alles noch so ist wie früher. Und mittlerweile übernehmen EntwicklerInnen auch mehr von der Aufgabe, Tests zu schreiben, Tests zu erstellen. Das wäre ein Beispiel. Darum habe ich am Anfang eben auch gesagt, etwas, was sich über die letzten Jahrzehnte schon eingeschlichen hat, weil das ist ja eigentlich ein Beispiel, was wir alle kennen müssen und hoffentlich auch machen.",
            "start": 490750,
            "end": 528922,
            "confidence": 0.8086134453781514,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Natürlich, wir machen alle Test-Driven-Development dauerhaft. Zum Glück sieht keiner das Video gerade. Nun gut, ja, das Ganze ist eigentlich nix Neues. Also zumindest nicht im Kompletten etwas Neues. Denn dieses Shift-Left ist eigentlich nur ein neuer Begriff für, ich sag mal, Best Practice. Er kommt wirklich aus der Software-Testing-Welt, wo wir früher manuelle QA hatten. Dann ist es mehr zu automatisierten Tests gegangen. dahin gegangen, dass wir alle Tests geschrieben haben oder Test Driven Development gemacht haben und dann ist es soweit gekommen, dass wir Continuous Testing in unserer Continuous Integration Testing Umgebung gemacht haben und somit kontinuierlich bei jedem Build die Tests ausführen. Ja, das hat man dann alles Ich sag mal, das, was früher Menschen gemacht haben, wurde durch Tools früher in den Entwicklungszyklus geschoben. Alles gut. Und in letzter Zeit kommt der Begriff aber immer wieder hoch, beziehungsweise der ganzen Thematik wurde einem Begriff gegeben, Schiffklefft. Denn Testing ist ein alter Hut. Fair enough. Aber da irgendwie alles heutzutage eine App ist und eine Web App und immer mehr digitalisiert wird und immer mehr kritische und wichtige Prozesse über das Internet laufen, hat das Security Team in jeder Firma auch ein ganz schönes großes Wort mitzureden inzwischen bei der Applikation und das in diesem ganzen Shift Left Konzept jetzt auch Security mit reinkommt. Das ist ein relativ neues Gebiet, zumindestens für europäische Firmen in Amerika. Aka dem Silicon Valley ist das eigentlich auch schon fast schon ein alter Hut, aber deswegen haben wir mal gedacht, nehmen wir mal das ganze Thema als Podcast Episode, denn nur bei Testing und nur bei Security Da ist es heutzutage leider auch nicht geblieben, weil ihr kennt das, wenn ein Thema angefasst wird, dann wird heutzutage in 2024 ordentlich aufs Gaspedal getreten und mit Security und Testing ist es leider noch nicht getan.",
            "start": 529722,
            "end": 637165,
            "confidence": 0.8024653465346533,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Okay, wir haben jetzt Security dabei, wir kennen das auch aus DevOps, da hat man auch gewisse Sachen nach links gedrückt, aber warum drückt man denn überhaupt Sachen nach links? Also was hat das für einen Zweck? Was will ich damit überhaupt erreichen?",
            "start": 637602,
            "end": 649746,
            "confidence": 0.7561860465116279,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Naja, im Allgemeinen geht es um die Buzzwords, Qualität verbessern, Risiken reduzieren, Effizienz steigern, bla bla bla.",
            "start": 649766,
            "end": 655488,
            "confidence": 0.8190000000000001,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ja, klassisches Management. Wenn du mit Buzzwords anfängst, das klingt schon, das ist alles nur irgendwas vom Management und bringt überhaupt nichts.",
            "start": 655508,
            "end": 660950,
            "confidence": 0.568409090909091,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Nee, also im Endeffekt heißt das natürlich, dass du wichtige Prozesse früher in den Entwicklungsprozess ziehst und damit natürlich potenzielle Probleme früher erkennst und die Fehler auch frühzeitig beheben kannst. Jetzt stell dir mal vor, wir beide würden ein Auto bauen. Du willst die Karosserie designen, ich die Türen, du den Motor und ich die Reifen. Wir würden aber nicht miteinander sprechen. Ich würde sagen, wenn wir alles hergestellt haben und versuchen, die Teile zueinander zu bauen, ohne dass wir miteinander gesprochen haben, ich schwöre dir, entweder ist mein Motor zu schwer, Oder die Türen passen nicht in die Karosserie und so weiter. Und besonders solche konzeptionellen Fehler, weil wenn die Tür nicht auf die Karosserie passt, würde ich mal als konzeptionellen Fehler beschreiben, die sind natürlich später enorm teuer zu beheben. Wenn wir uns aber, ich sag mal, vorher zusammensetzen und eine Designphase machen und vielleicht mal mit einem Zollstock aka Gliedermaßstab irgendwie uns mal auseinandersetzen, wie breit soll die Tür sein und so weiter, dann sind diese Fehler relativ gut vermeidbar und natürlich sehr günstig im Endeffekt. Frühere Überhebung der Fehler, günstiger, schnellere Time-to-Market, weil wir nicht alles korrigieren müssen.",
            "start": 661570,
            "end": 725475,
            "confidence": 0.7914687500000004,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber das würde jetzt hier nur heißen, dass du mehr kommunizieren musst. Das heißt ja noch lange nicht, dass ich als Entwickler jetzt plötzlich Tests schreiben muss. Könnt ihr auch nur mit den QA-Leuten kommunizieren?",
            "start": 725515,
            "end": 734719,
            "confidence": 0.7981142857142857,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Schon, aber wenn wir miteinander kommunizieren, wie steigern wir dann die Effizienz? Die Effizienz steigern wir hier in diesem Fall durch Automatisierung, dass wir Software schreiben, nämlich Software-Tests, die wir in Millisekunden ausführen können, anstatt dass das manuelle QA-Team 35 Mal pro Tag durch die Applikation klickt. Natürlich können wir sagen, klickt schneller, aber das ist dann auch mehr Effizienz, aber die hat ja einen Cap oben drauf.",
            "start": 734739,
            "end": 759857,
            "confidence": 0.8182500000000001,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ja, aber das QA-Team könnte ja auch die automatischen Tests schreiben.",
            "start": 760137,
            "end": 763199,
            "confidence": 0.624909090909091,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Klar!",
            "start": 763219,
            "end": 763299,
            "confidence": 0.652,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Könnte nicht ich als Entwickler schreiben.",
            "start": 763319,
            "end": 764980,
            "confidence": 0.5966666666666666,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Hat auch niemals gesagt.",
            "start": 765000,
            "end": 766160,
            "confidence": 0.89175,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Dann wäre es ja kein Shift-Left, dann bleibt es ja alles, wo es ist, nur dass es automatisiert wird. Dann ist es ja kein Shift-Left, sondern nur eine Automatisierung.",
            "start": 766181,
            "end": 773104,
            "confidence": 0.769448275862069,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Der Unterschied ist aber hier, dass du in der Regel Programmierer hast, also im früheren Wasserfallmodell, du hast Programmierer, die machen die Software, geben dann das fertige Paket ab, eine Abteilung weiter und dann bekommst du drei Wochen später ein PDF-Report, was alles nicht funktioniert, und dann sitzen die Programmierer wieder dran. Bei Shift-Left hast du vielleicht sogar ein oder zwei Leute aus dem QA-Team in deinem Team mit drin sitzen. Beispiel. In diversen Firmen ist das so, ich glaub sogar bei Google oder Uber, dass auf zwei Software-Engineers ein Software-Engineer in Test sitzt. Und Software-Engineer in Test heißt im Silicon Valley eigentlich QA-Engineer, der Software schreiben kann. Und somit automatisierte Tests. Da merkst du schon, da gibt es diese richtige Relation. Zwei Softwareentwickler, ein Softwareentwickler nur für Tests. Und das ist shift left. Die arbeiten konstant zusammen.",
            "start": 773144,
            "end": 822386,
            "confidence": 0.8186231884057971,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Das heißt, es geht auch gar nicht so sehr darum, wer das macht, sondern eher darum, wann es gemacht wird. Und in dem Fall eben früher. Mehr links.",
            "start": 822426,
            "end": 830052,
            "confidence": 0.8752142857142856,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Genau, also ich meine, die ganze Sache hat natürlich, wenn wir jetzt sagen, alles, was wir nach links verfrachten wollen in den Prozess, in ein Team stopfen, dann sind wir halt auch irgendwann ein 20-Mann-Team und dann ist es halt auch nix mehr mit der Effizienz. Also da muss man natürlich schon ein bisschen abwägen, aber wenn du natürlich jetzt von manuellem QA wirklich klicken zu einer QA-Person gehst, die mit im Softwareentwicklungsteam sitzt, die dann auch reproduzierbare Tests schreibt, dann ist das natürlich eine deutliche Effizienzsteigerung.",
            "start": 830492,
            "end": 860279,
            "confidence": 0.7891379310344826,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jetzt liest man das aktuell überall, wie du gesagt hast, in Newslettern und irgendwie ist es jetzt in aller Munde und es wird rauf und runter geradelt, das Shift-Left, aber irgendwie hat es ja doch auch einiges früher schon gegeben, wenn wir bei Cross-Functional-Teams anfangen, DevOps, automatisierte Tests. Also warum wird es jetzt plötzlich so intensiv kommuniziert überall, obwohl die Idee und auch das Thema ja durchaus ein altes ist?",
            "start": 861439,
            "end": 888807,
            "confidence": 0.8242285714285715,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ich freue mich gerade richtig, endlich kommt mein Wirtschaftsinformatikstudium so ein bisschen zur Geltung.",
            "start": 889576,
            "end": 894783,
            "confidence": 0.7581428571428571,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Dr. Dr. Grunwald bitte.",
            "start": 894823,
            "end": 896485,
            "confidence": 0.60875,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Also, da muss man jetzt mal so ein bisschen die makroökonomischen Effekte kennen.",
            "start": 897537,
            "end": 902918,
            "confidence": 0.8510769230769231,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Moment, das hast du dir jetzt rausgeschrieben, das Wort vorab, oder?",
            "start": 903238,
            "end": 906859,
            "confidence": 0.6114545454545455,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Nee, hatte ich wirklich im Studium und ich grins auch mal so ein bisschen. Ich bin gerade so ein bisschen aufgeregt. Ich glaube, wir alle wissen, dass wir die letzten, weiß ich nicht, zehn Jahre eine sehr gute Zinspolitik für uns hatten. Geld war sehr günstig, eine sogenannte Nullzinspolitik. Oder im Englischen eine Zero Interest Rate Policy. Und wenn man mal nach SIRP, Z-I-R-P, googelt, dann findet man dazu ganz viel. Naja, auf jeden Fall, die letzten 10 Jahre oder die letzten 8 Jahre war Geld sehr, sehr günstig. Also fast umsonst gefühlt. Und deswegen haben sehr viele Softwareunternehmen natürlich Leute angestellt, Leute angestellt und die haben auch sogar zu viele Leute angestellt. Sogenanntes Overhiring. Es gab sogar Gerüchte, dass die großen Big-Tech-Unternehmen einfach Leute eingestellt haben, damit die Konkurrenz die Leute nicht einstellen kann. Also Google hat einfach Overhired, damit Netflix die Leute nicht kriegt. Unabhängig davon, ob die eine Aufgabe hatten oder nicht. Weil die hatten Venture Capital, Geld war günstig und so weiter. Und inzwischen hat sich das Bild so ein bisschen gedreht. Es wird ja nicht umsonst gesagt, es ist das Jahr der Effizienz. Und es waren auch nicht umsonst so viele Layoffs in den letzten fast zwei Jahren, würde ich fast sagen. Weil inzwischen finden wieder Layoffs statt. Geht einfach mal auf layoffs.fyi. Die Kurve geht wieder nach oben. Und man hat also sehr viele teure Softwareentwickler und Entwicklerinnen entlassen. Dennoch muss der Softwareentwicklungsprozess aber schneller werden. Und wie machst du das? Die Leute haben sich wieder den neuen Begriff Chef Lab ausgedacht. Okay, wir verlagern ziemlich viele Elemente früher in den Entwicklungsprozess und dadurch erkennen wir Fehler früher und dadurch geht das hoffentlich schneller. Ja, so im Management-Sprech. Kurzum, Geld ist gerade wieder teuer, wir müssen alle schneller werden, wir müssen schneller, inkrementeller shippen, am besten ohne Fehler, bug-free. Das ist so der ganz simplifizierte Grund dafür.",
            "start": 906899,
            "end": 1014838,
            "confidence": 0.7924952076677317,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Okay, dann gehen wir jetzt mal wirklich in die Praxis. Wenn ich jetzt ein kleines Startup habe, wie kann ich das dann denn alles optimieren, damit ich effizienter bin?",
            "start": 1016522,
            "end": 1025528,
            "confidence": 0.7579310344827586,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ha, mega. Brauchst du gar nicht. Das Tolle am Startup ist ja, in der Regel sind da ein, zwei, drei Leute, die dann irgendwie alles machen. Du hast eine Softwareentwicklerin, die ist die Security-Expertin und die macht noch den Server auf AWS oder Serverless und schreibt noch die Software und so weiter. Verstehst du? Die eine Softwarefrau, die ist da alles. Die die die die ist schon shift left in person und das ist so ungefähr der vorteil von kleinen firmen da bleibt der firma nichts anderes übrig als shift left von haus aus zu machen.",
            "start": 1025568,
            "end": 1057526,
            "confidence": 0.7901041666666667,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Und was mache ich jetzt wenn ich wachse als als firma als kleines startup und jetzt kommt da, Böser Rechtsruck, weil ich mache jetzt plötzlich rechts irgendwelche Funktionen auf und da gibt es jetzt mein Deployment Team. Brauche ich das zuerst mal, um dann wieder ein Shift-Left-Move zu machen oder wie gehe ich dann an die ganze Sache dran im Wachstum?",
            "start": 1057566,
            "end": 1077560,
            "confidence": 0.7673114754098361,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ich hoffe, dass bei einem Rechtsruck die neuen Teams, die da aufgemacht werden, nicht ihre Logofarbe braun haben. Aber nun gut. Ja, du hast schon gesagt, natürlich, wenn die Firma wächst, kommst du natürlich auf die Wachstumsgeschwindigkeit an, und das sind dann auch die Wachstumsschmerzen, wenn ziemlich viele Leute in sehr kurzer Zeit ... der Firma beitreten. Und immer wenn eine Funktion, wenn dafür ein Team gegründet wird, jetzt ein Operations-Team, ein Cloud-Team, ein Security-Team, dann ist es natürlich so ein gewisser Knackpunkt im Bereich Schiffleft. Weil du willst ja mehr nach links und auf die, ich sag mal, Development-Arbeit oder während des Development-Prozesses irgendwie einführen. Und du willst ja nicht ein eigenes Team mit eigener Strategie und so weiter einführen.",
            "start": 1077995,
            "end": 1120182,
            "confidence": 0.7855371900826446,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber wie skaliere ich denn dann? Weil irgendwie, es bläst sich ja dann mein Team auf der linken Seite immer weiter auf, wie du auch gesagt hast. Irgendwann sind wir dann 20 Leute, weil du brauchst einen Security-Spezialisten, einen Test-Spezialisten, ein paar Entwickler, ein paar UI, UX-Designer, ein paar normale Designer und am Ende hast du irgendwie alles nur mehr in einem Team, was an sich schon nicht mehr kommunizieren kann. Also irgendwie muss ich ja meine Teams aufteilen und irgendwie muss ich ja dann skalieren.",
            "start": 1120925,
            "end": 1145120,
            "confidence": 0.7455116279069767,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Am Anfang willst du natürlich einen gewissen Halt haben. Du bist einfach nicht so effizient, wie wenn ein oder zwei Personen alles machen und dann machen 20 Personen dasselbe. Das funktioniert halt einfach nicht, weil Kommunikation muss da sein und so fort. In der Aufbaufase bei sowas geht es natürlich eigentlich darum, dass du vom Security-Experten dir die Meinung einholst, okay, welche Tools können wir denn einsetzen, um dir als Security-Experte die Arbeit zu erleichtern? Oder welche Tools können wir denn schreiben? Der Security-Experte schaut die Applikation an, die Domäne, was ist denn hier eigentlich wichtig, was ich hier überprüfe? Nehmen wir uns nochmal die Definition von Shift-Left zur Hand. In der Praxis bedeutet dies, dass Softwareentwickler dedizierte Werkzeuge verwenden, um das zu tun, was früher dedizierte Rollen taten, aber später. Das bedeutet, du holst dir ein Security-Team und die schauen sich eure App an und schauen sich an, okay, was können wir hier während des Softwareentwicklungsprozesses denn bereits automatisieren. Nehmen wir mal zum Beispiel Static Analyzer. Static Analyzer sind ein perfektes Beispiel dafür. Die gibt es inzwischen nicht nur für Software-Sprachen, also wirklich so für Java und Co. oder für Go, die dann auch Race Conditions rausholen und so weiter. Die gibt es aber inzwischen auch für Dockerfiles. HadoLint ist zum Beispiel so ein Static Analyzer. HadoLint schaut sich nicht nur an, ah, der macht da einen Upget-Befehl, sondern sagt auch in deinem Upget-Befehl, in deinem Dockerfile, fehlt das Version-Pinning. Und da fehlt das Don't-Install-Recommended-Software-Flex. Oh, und in deinem Dockerfile hast du auch Inline-Shell, dann führt der Shell-Check aus. Also der hat auch Security-Best-Practices drin und Operations-Best-Practices. Das schützt sich natürlich nicht vor jedem Security-Einfallstor, ganz klar. Es entlastet aber den Security-Spezialisten, vor der manuellen Arbeit dauerhaft die Dockerfile zu checken.",
            "start": 1145498,
            "end": 1253342,
            "confidence": 0.8017431506849304,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Also wenn ich früher da rechts ein Team rausgezogen habe, das sich nur um Sicherheit zum Beispiel kümmert und dann das Dockerfile analysiert hat, dann ziehe ich jetzt das Team nicht wieder nach links rein, sondern dieses Team kümmert sich um die Automatisierung, bleibt also draußen außerhalb von dem eigentlichen Team, aber stellt dann denen das Tool zur Verfügung, das automatisch die Dockerfiles checkt und sagt, hey, du hast da irgendein CVE, was grad irgendwie ein Loch ist bei irgendeiner Dependency, und mach was dagegen. Und dann denen quasi atomisiert mitteilt, ihr müsst da was machen. Also so erreiche ich dann die Skalierung, indem ich mehr Leute auf ein Problem setzen kann, aber außerhalb.",
            "start": 1253562,
            "end": 1290458,
            "confidence": 0.7819298245614039,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, das ist zum Beispiel ein Weg. Die Leute werden dann nicht gefeuert, weil du ersetzt ja wirklich spezialisierte Jobs nicht durch, ich sag mal, Quote-unquote, einfache Tools, obwohl HadoLint jetzt kein einfaches Tool ist. Aber die Leute können sich dann aufs Wesentliche fokussieren, beziehungsweise auf den nächsten Schritt fokussieren. Nehmen wir mal an, du hast überall Version-Pinning und du weißt ganz genau, welche Software da installiert wird. Und Achtung, Security-Spezialisten, haut mich jetzt bitte nicht, denn ich weiß, das ist ein bisschen falsch gesagt, aber nur um das Beispiel zu bringen. Theoretisch könntest du dann einen S-Bomb erstellen, ohne das Docker-Image zu bauen, weil du weißt ja, welche Images du erstellst.",
            "start": 1290698,
            "end": 1323270,
            "confidence": 0.7718035714285717,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Kannst du kurz S-Bomb erklären?",
            "start": 1323570,
            "end": 1325032,
            "confidence": 0.6602,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, ein S-Bomb ist ein Software Bill of Materials. Kommt eigentlich so, ich sag mal, aus dem Hardware-Bereich.",
            "start": 1325072,
            "end": 1329298,
            "confidence": 0.6695,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Immer wenn du... Schon wieder so ein neuer heißer Scheiß am Hype-Train. Also heute ist ja in einer Tour. Bullshit-Bingo-Karte ist eigentlich jetzt schon voll bei mir.",
            "start": 1329339,
            "end": 1338512,
            "confidence": 0.7224444444444443,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Kommt eigentlich aus der Platinenerstellung. Immer wenn du nämlich mal eine Platine im Hardwarebereich löten möchtest und Anleitungen suchst, dann ist da immer ein sogenanntes Bill of Materials dabei, was eigentlich eine Einkaufsliste an Materialien sind. Du baust diesen Transistor und so weiter. Und ein Software Bill of Materials ist eigentlich eine komplette Auflistung von aller Software inklusive Versionen, die du in deinem Stack hast. Und mit dieser Liste kannst du natürlich dann zu Security-Datenbanken gehen und sagen, hey, hat irgendeine Softwareversion hier ein Sicherheitsleck und muss ich die patchen und all so was. Besonders im Compliance-Bereich und im Security-Bereich und im Infrastrukturbereich ist das eigentlich, ich würd mal fast sagen, Standard heutzutage. Sag mal.",
            "start": 1339028,
            "end": 1381263,
            "confidence": 0.8112869565217391,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Da kann ich wieder mal sagen, du in deiner heilen Welt ... Das könnten wir auch langsam auf dem T-Shirt drucken. Aber mittlerweile ist es ja auch Pflicht, oder bald Pflicht, mit dem European Cyber Resilience Act musst du das ja sogar nachweisen und dementsprechend immer überprüfen, auf welchen Abhängigkeiten du da drauf bist und was es da für Probleme gibt.",
            "start": 1381283,
            "end": 1400333,
            "confidence": 0.7963606557377051,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Also ich kann euch sagen, wenn ihr einen GitHub Enterprise Vertrag habt, dann könnt ihr GitHub fragen, gebt mir euer S-Bomb. weil ich brauche das für meine Compliance. Du kannst das eigentlich fast bei jedem Datenbank-SS-Service-Provider nachfragen, die auf jeden Fall eine PCI-DSS SOC2-Compliance, also die eigentlich so die üblichen Datenschutz-Compliance-Zertifikate haben. Kannst du bei jeder größeren Firma, kannst du das SBOM anfragen und dann kriegst du einfach mal eine komplette Liste aller Software, bis auf die Proprietäre natürlich von denen.",
            "start": 1400613,
            "end": 1430793,
            "confidence": 0.7263827160493828,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Wenn ihr da so in einer Ecke diese Maschine stehen habt, diese Blackbox, die das ganze Geld macht mit dem Legacy Code, die hat auch so eine API, wo ihr da schnell anfragen kann, oder? Gib mir den S-Bomb und alle Abhängigkeiten, seht ihr das richtig?",
            "start": 1431672,
            "end": 1442181,
            "confidence": 0.7231521739130436,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Also ich würde mich jetzt mal aus dem Fenster lehnen und sagen, nicht jedes S-Bomb ist auf via eine API abfragbar, ab und zu ist es einfach nur ein Textteil, was einmal pro Tag erstellt wird oder ähnliches.",
            "start": 1442441,
            "end": 1452549,
            "confidence": 0.760763157894737,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Sehr diplomatische Antwort.",
            "start": 1454252,
            "end": 1455572,
            "confidence": 0.6183333333333333,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ein guter Hack ist sehr persistent, würde ich mal sagen. Nein, wir reden jetzt aber natürlich die ganze Zeit von Tools. Wir haben Leute und die kommen dann rein und die sagen dann, nutzt Tool A. Ja, aber so einfach ist es halt auch nicht immer. Shift-Left kann auch bedeuten, macht einfach mal Pair-Programming, weil Pair-Programming ist ein Shift-Left vom Pull-Request-Code-Review.",
            "start": 1455612,
            "end": 1477158,
            "confidence": 0.7770491803278691,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jetzt haben wir endlich uns langsam an die Pull-Requests gewöhnt. Jetzt wirst du die Pull-Requests auch noch nach links schieben und wegrationalisieren.",
            "start": 1477618,
            "end": 1484761,
            "confidence": 0.704181818181818,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Das nicht, aber ich würd fast sagen, hast du ein Feature im Paar programmiert, könnte man überlegen, ob man den Pull-Request-Step, also für den Code-Review, nicht für die automatischen CI-Checks, dafür nicht, aber für den Code-Review und dieses Ping-Pong und dieses Nitpicking, ob man den Teil skippt und dann sagt, wir beide, erstellen jetzt kurz ein PA, lassen die automatischen Checks laufen, wie zum Beispiel Hardulint und Shellcheck und mein Static Analyzer, haben wir ja gerade gelernt, und dann merken wir den einfach durch, weil wir haben den ja zu zweit bereits schon reviewed und programmiert.",
            "start": 1484801,
            "end": 1517753,
            "confidence": 0.8078437499999999,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Also du hast mich gerade mit einem Wort überzeugt, das Nitpicking. Und nachdem dir so viele Leute hassen, dieses Nitpicking, also dass man irgendwelche Kleinigkeiten im Nachhinein anmerkt und dann ändert man die und dann werden wieder Kleinigkeiten angemerkt, die nicht so wichtig sind. Also das macht teilweise wirklich eine schlechte Stimmung im Team. Alleine wenn du das nach vorne ziehst und wenn du Peer Programming machst, dann redest du einfach darüber, kannst sofort irgendwie Gegenkontakt geben und Argumente bringen. Also alleine deswegen finde ich das schon eine geniale Idee eigentlich und darum liebe ich Pair-Programming auch so. Hast du mich schon überzeugt ausnahmsweise?",
            "start": 1518429,
            "end": 1552301,
            "confidence": 0.7883942307692308,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Du kannst auch Mob-Programming machen, wie du möchtest. Aber wir hatten schon die ganze Zeit darüber gesprochen, es kommt auch zum Testing. Ja klar, automatisierte Builds, automatisierte Unit-Tests, Akzeptanz-Tests, neuer heißer Scheiß, Performance-Tests. Ziemlich viele Sprachen machen auch Benchmark-Tests. Wir zum Beispiel als Datenbank-as-a-Service-Provider, immer wenn wir unser Betriebssystem updaten, also wir nutzen Fedora als Serversystem, dann machen wir auch weitläufige Performance-Tests. Wie verhält sich eine Postgreed-Datenbank auf Fedora 38 und auf 39? Haben wir da eine Regression drin und so weiter? Steigt die CPU an? Ja, so was muss auch gemacht werden. Ja, shift left, bevor wir das in Produktion deployen und dann der Kunde ein Support-Ticket aufmacht zum Beispiel. Sowas gehört dann auch dazu.",
            "start": 1552401,
            "end": 1600804,
            "confidence": 0.7988706896551723,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ich glaube, dass da auch einfach in der Vergangenheit viel mehr dazugekommen ist, weil früher hat man das vielleicht in der Datenbank-Welt gemacht. Das ist ein alter Hut. Vor 20 Jahren hat die DB2 und Oracle genauso tagelang irgendwelche Tests durchlaufen lassen, automatisierte Tests. Aber das war halt absolut speziell für Datenbank und für die Datenbank-Welt. Und jetzt ist es halt fast Standard, wenn du irgendwie eine Software hast, die einigermaßen kritisch ist, dass du halt auch Performance-Tests durchlaufen lässt, weil es halt einfach wichtiger geworden ist vielleicht und auch einfacher, muss man auch dazu sagen. Und darum ist es halt jetzt wieder einfach Stand der Technik, würde ich sagen. Aber es ist natürlich jetzt viel dazugekommen zu der ganzen normalen Unit-Test-Schreiberei und vielleicht mal ein Acceptance-Test, jetzt kommt halt schon wieder ein Performance-Test dazu und so wird halt eigentlich das Ganze immer aufwendiger und man muss immer dazu lernen und früher hat man das halt abgeschoben und jetzt muss man den Teil halt auch nochmal mitmachen und auch verstehen.",
            "start": 1600844,
            "end": 1658631,
            "confidence": 0.8245529411764712,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Viele Firmen machen das vielleicht nicht automatisiert während eines Code-Builds, aber dann vielleicht ein paar Wochen vor ihrem saisonalen Hoch wie zum Beispiel Black Friday. Also ich weiß zum Beispiel, dass Trivago auch saisonales Geschäft hat und die Leute aus dem Site Reliability Engineering Team haben da auch ihre Load Tests inzwischen automatisiert. Bevor die Hochsaison beginnt, stoßen die einmal an, oft fliegt dann da auch was um die Ohren und dann haben sie noch ein paar Wochen das zu fixen. Also das ist ja auch schon Shift Left. anstatt einfach den, weiß ich nicht, Black Friday kommen zu lassen, Leute auf On-Call zu haben und dann den Inzident während der Hochverkaufssaison zu haben. Also das ist ja auch eine Art von Shift Left.",
            "start": 1658651,
            "end": 1701323,
            "confidence": 0.8188306451612907,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber jetzt musst du mir mal was erklären, weil wir haben ja in Episode 101, was war das für eine Episode? Andi, du kannst alle Episoden auswendig. Da muss ich dir wieder antworten. Observability und Open Telemetry mit Severin. Da haben wir ja eigentlich besprochen, dass man mit Telemetriedaten die Applikationen überwachen kann. Wäre das jetzt eigentlich nicht wieder ein Shift-Right, weil ich ja dann meine ganzen Performance-Tests eigentlich im Produktivsystem mache und dort die ganzen Daten und Telemetriedaten sammle, um dann Rückmeldungen zu kriegen, also möglichst schnell zu shippen, um dann wieder die Informationen zu bekommen. Das wäre ja eigentlich fast ein Shift-Right.",
            "start": 1701787,
            "end": 1739417,
            "confidence": 0.7697980769230768,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Teilweise ja, aber eher nein, weil folgendermaßen. Ich meine, mit Open Telemetry und auch mit den Metriken und den Logs und dem Tracing, dass so was Standard in deiner Applikation ist, ist ja jetzt auch noch nicht so alt. Applikationen von vor acht Jahren wurden eigentlich so geschippt, die haben in der Regel keine Metriken nach außen gegeben. Das waren Blackbox-Systeme für den Betrieb, für das Operations. Und die haben dann per Nagios einfach geguckt, aha, rennt da der Prozess, verbraucht der Prozess gerade noch so und so viel RAM, Aber inzwischen machst du mit OpenTelemetry, gibst du ja die Innerdaten deiner Applikation raus. Wie viele Bestellungen wurden in der letzten Minute gemacht und so weiter und so fort. Das bedeutet, das ist für mich eigentlich ein Shift Left, weil jetzt auch Metriken für den operationellen Betrieb während der Entwicklungsphase bereits in die Software eingefügt werden und nicht erst wir shippen das und dann fragt Ops nach, Ja aber Moment mal, der gibt ja einen falschen Exitcode raus, aber ich brauche den Exitcode 0 und dann geht das wieder in die Dev-Abteilung und so weiter. Die Devs kümmern sich gerade jetzt schon, welche Metriken wollen wir eigentlich.",
            "start": 1739457,
            "end": 1808822,
            "confidence": 0.8207157360406097,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Okay, also die Metriken werden zwar generiert oder aufgenommen auf der rechten Seite, aber sie fließen eigentlich wieder zurück auf die linke Seite ins Dev-Team, die ja die beauftragt haben sozusagen auch durchs Coding und die fließen auch wieder zurück und gehen nicht durch ein Ops-Team, das dann die Auswartung macht und dann erst wieder die Developer informiert. Also es hängt viel enger zusammen, wenn ich dich richtig verstehe.",
            "start": 1809445,
            "end": 1832267,
            "confidence": 0.8021739130434783,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, also ich meine, wir hatten in der Optelemetrie gesagt, okay, es gibt drei Signale. Die Metriken, okay, das ist für den operationellen Betrieb eigentlich sehr gut. Tracing, und da kommt es jetzt wieder ans Performance-Testing, welcher Function Call verbraucht wie viele Millisekunden, würde ich fast sagen, ist eher eine entwicklerspezifische Metrik oder ein entwicklerspezifisches Signal. Und jetzt nehmen wir mal Logs und jetzt Besonders in Bezug auf Datenbanksysteme, die Logs prozessen, in OpenSearch, in Clickhouse und so weiter, da machen ja Structured Logs ja noch mehr Sinn. Und ich würde schon fast sagen, Structured Logs sind ebenfalls eher aus der Entwicklungssparte anzusiedeln, anstatt aus der Opsparte. deswegen die ganze sache hat schon ordentlichen shift left und jetzt lehne ich mich mal aus dem fenster ich denke umso mehr leute open telemetrie beziehungsweise diese metriken einbauen desto eher geht es dahin dass bald die entwicklerinnen und entwickler auch die alerts zum beispiel in der sprache wie prom ql oder ähnliches schreiben dass sie dann den Ops Leuten auch wirklich sagen, hey, ich würde da drauf checken, weil ich bin der Domänenexperte und ich weiß, wie diese Metrik sich verhält. Hier, ich habe dir schon mal den PromQL Alert geschrieben.",
            "start": 1832840,
            "end": 1909046,
            "confidence": 0.8352914572864324,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Und wenn wir schon bei Alert sind, ein super Übergang. Heute können wir wirklich viele Episoden erwähnen, nämlich in Episode 60, haben wir über On-Call gesprochen. Und das ist natürlich auch eine Entwicklung, dass Entwickler an sich in dem Team viel mehr in On-Call-Rotationen auch mit dabei sind und auch die Metriken auswerten und die ganzen Informationen bekommen und dann halt auch wirklich sofort reagieren, auch wenn es in der Nacht ist. Also auch da gibt es eigentlich einen Shift-Left-Move im On-Call, weil früher hat es halt nur der Admin gemacht, der da rausgeleitet wurde in der Nacht.",
            "start": 1909086,
            "end": 1943445,
            "confidence": 0.8139795918367351,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ich kann dir jetzt auch noch sagen, die Gegenwehr von Softwareentwicklerinnen und Softwareentwickler ist immer noch sehr hoch auf Wurfbereitschaft zu sein. Keiner macht's gerne. Aber ich sage es jedem Gegner, der jetzt am Kopfhörer sitzt oder im Auto oder wo auch immer und das hört und sagt, nein, ich werde nicht on call sein, versucht es mal.",
            "start": 1943770,
            "end": 1963464,
            "confidence": 0.8247068965517245,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Und hört euch die Episode 60 an, weil da kommen noch mindestens 20 weitere Argumente von Andi.",
            "start": 1963504,
            "end": 1968167,
            "confidence": 0.6892941176470587,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ihr werdet bessere Devs, wenn ihr das Zeug betreibt und dafür auch gerade steht. Ihr macht denselben Fehler nicht zweimal. Ihr werdet bessere Devs. Ich sag's euch, probiert mal. Ihr könnt ja auch auf Second-Level-On-Call sein, aber quatscht mal mit eurem Ops-Team.",
            "start": 1968640,
            "end": 1985271,
            "confidence": 0.7961666666666667,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber wenn jetzt das ganze Team, also auf der linken Seite, Shift-Left, mehr Responsibilities, mehr ... Wie nennt sich das auf Deutsch?",
            "start": 1985311,
            "end": 1992656,
            "confidence": 0.7869999999999998,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Verantwortungen.",
            "start": 1992676,
            "end": 1993337,
            "confidence": 0.946,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Danke. Verantwortungen hat. Darf das Team dann auch mehr mitbestimmen auf der rechten Seite, also auf der Plattform-Seite, auf der Admin-Seite? Also gibt es einen Kanal zurück auch auf die rechte Seite?",
            "start": 1993657,
            "end": 2006542,
            "confidence": 0.8260000000000001,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, Plattform und Infrastruktur ist natürlich ein tolles Thema, weil besonders in dem ganzen Cloud-Movement geht es ja immer noch mehr an Infrastruktur als Code. Und umso spezialisierter es wird, ich gehe jetzt mal in die Bereiche ML Ops, AI Ops, wie betreibt man Modelle auf Infrastruktur und Co. Ich würde fast sagen, da ist die Mitbestimmung bzw. der direkte Austausch unausweichlich. Denn die Software muss ja auch an die Infrastruktur angepasst werden. Nehmen wir mal AWS Lambda Funktionen. Du musst ja mit der AWS Lambda API und mit dem SDK sprechen, damit das alles ordentlich stattfindet. Oder nehmen wir mal Amazon EC2 Instanzen und dann bist du kostengünstig auf Spotinstanzen unterwegs. Und Spotinstanzen senden dir zum Beispiel, ich glaube, 60 oder 40 Sekunden, bevor die runterfahren, ein Signal. Diese Signale musst du ja catchen. Also, in irgendeiner Art und Weise muss eine Kommunikation da sein. Und desto spezifischer die Anforderungen werden, auch in Bezug auf proprietäre Nutzungen oder proprietäre Service bei Cloud, denn Achtung, du nutzt einen Cloud-Provider nur effizient, Wenn du dich dann auch auf die proprietären Systeme von diesem einlässt, damit du auch die volle Power nutzen kannst, da muss natürlich in irgendeiner Art und Weise eine Mitbestimmung oder ein Kommunikationskanal da sein. Wo es natürlich anders ist, wenn du ein Plattformteam hast, was dir natürlich alles sehr eng stirnig zusammenstellt. Aber auch da muss das Plattformteam dann auch, ich sag mal, Umfragen machen, um die Developer-Experience hochzuhalten. Es gibt ja auch schon, ich sag mal, Serverless-Functions, die du auf deinem eigenen Cloud-Provider laufen lassen kannst und so weiter. Also ein offenes Ohr muss da auf jeden Fall sein, damit die Entwickler-Experience und die Developer-Experience halt hochgehalten werden kann.",
            "start": 2006582,
            "end": 2110771,
            "confidence": 0.8075886524822696,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Also ich filme gerade, wie so eine Meta-Episode, wo wir alle anderen Episoden irgendwie zusammenfassen. Aber ich habe schon wieder eine Referenz auf Episode 103, wo wir über Plattform-Engineering gesprochen haben. Und genau darin, haben wir auch gesprochen über dieses Business-Mindset, dass die Plattform-Engineers eigentlich ja ein Produkt anbieten und ihre Kunden verstehen müssen und die Kunden sind jetzt die Developer auf der linken Seite. Das heißt, hoffentlich fragen die auch die Developer, was braucht ihr, was wollt ihr eigentlich erreichen, was können wir euch anbieten, dass da wirklich eine bidirektionale Kommunikation stattfindet und die die Kunden halt auch dementsprechend bedienen.",
            "start": 2110811,
            "end": 2145655,
            "confidence": 0.7932178217821781,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Es ist ja keine Werbeveranstaltung für vorherige Engineering-Kiosk-Episoden.",
            "start": 2145935,
            "end": 2149577,
            "confidence": 0.808875,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Klingt nur so.",
            "start": 2149717,
            "end": 2150877,
            "confidence": 0.5636666666666666,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Aber es ist halt wirklich so eine Art ... Wie soll ich das sagen? Ja, alter Wein in neuen Schläuchen, nur ein bisschen weiter gedacht. Weil wenn wir jetzt mal an weiter gedacht denken, was jetzt gerade der neueste heiße Scheiß ist, ist FinOps, Financial Operations. Da geht's eigentlich darum, wir hatten grad das Jahr der Effizienten, ihr erinnert euch an meinen kleinen Wirtschaftsinformatikexkurs mit der makroökonomischen Lage. Die Cloud ist leider auch nicht gratis. Und viele Firmen versuchen gerade, ihre Cloud-Kosten zu reduzieren. Da sind wir natürlich im Shift-Left-Bereich super aufgehoben. Weil was wäre denn, wenn deine Software-Entwickler sich während des Entwicklungsprozesses oder auch die Operations-Leute oder die DevOps-Leute während dem Schreiben von Infrastructure as Code bereits Gedanken machen über ihre Cloud-Kosten. Wenn ich jetzt in Teraform drei neue Nodes hochstarte, wie teuer sind die? Und was ist, wenn man im Continuous-Integration-System oder im Pull-Request schon einen Report kriegen würde, wie teuer wird es, diesen Terraform-State oder Ansible-State oder was auch immer auszuführen? Dazu gibt's natürlich jetzt auch schon Tools. Ein Tool nennt sich InfraCost, ist so eine Cloud-Cost-Estimation-Geschichte für Terraform. Im Endeffekt geht's eigentlich um Automatisierung von Kostenanalysen und dass frühzeitig ein Bewusstsein für die Kostenentwicklung von Cloud-Ressourcen geschaffen wird. Und wenn man das einfach mal kontinuierlich weiterdenkt, klar, jetzt haben wir gerade gesagt, kommt Security mit in den Mix, aber jetzt bald kommt auch das Finanzdepartment in den Mix, um die Cloud-Kosten weiter runterzutreiben.",
            "start": 2150917,
            "end": 2246230,
            "confidence": 0.8005864978902953,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jetzt hatten wir am Anfang DevOps oder am Anfang hatten wir eigentlich Ops, dann hatten wir DevOps, jetzt ist die Security Sache dazu gekommen, jetzt haben wir DevSecOps. Wenn du jetzt die Finanzwelt noch dazu bringst, haben wir dann DevSecFinOps. Gibt es diesen Begriff?",
            "start": 2247316,
            "end": 2262490,
            "confidence": 0.8215454545454545,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Den Begriff in einem habe ich noch nicht gehört, aber FinOps ist jetzt der neue heißer Scheiß, der gerade rüberkommt. Aber wir können auch weitersprechen. Es gibt ja auch HR Ops, Legal Ops, BIS Ops, LLM Ops, Cloud Ops, Data Ops. Also es gibt... Nimm einfach irgendwas, mach eine Abkürzung drauf und pack da Ops dran.",
            "start": 2262510,
            "end": 2280223,
            "confidence": 0.7326071428571427,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Operation ist wichtig. Ich sehe es schon. Aber so, jetzt habe ich heute schon mal die ganze Fragerolle da gebachtet. Jetzt kann ich auch mit deinen Klassikern kommen. Jetzt komm mal runter da von deiner grünen Wiese und von deiner Marketingveranstaltung, von unseren anderen Episoden und wie toll das nicht alles ist, da nach links zu rücken. Gibt's denn keine Nachteile auf der linken Seite?",
            "start": 2280323,
            "end": 2300574,
            "confidence": 0.8078923076923077,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Naja, die erste Frage ist, die, ich sag mal, vor dir am Tisch liegt.",
            "start": 2300614,
            "end": 2305276,
            "confidence": 0.6582857142857143,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Nein, es ist nicht politisch gemeint, wenn du das jetzt fragen willst. Ich rede schon von der Shift-Left-Ecke.",
            "start": 2305740,
            "end": 2310364,
            "confidence": 0.5890555555555556,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Schon klar. Nur, wie viel soll Entwickler denn noch tun? Also, wie viel Verantwortung kann denn ein einzelner Job haben? Ja, ich wiederhole mich noch mal. DevOps ist keine Person, das ist ein Konzept. Weil es ist ja nicht so, als können ... Kann eine Softwareentwicklerin 100 Prozent Entwicklerin sein und 100 Prozent Operationsperson. Und Achtung, DevSecOps ist nicht eine Person, die drei Jobs macht.",
            "start": 2310384,
            "end": 2333164,
            "confidence": 0.7485846153846152,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Wir haben auch gerade in unserer Discord-Community eine Diskussion am Laufen. Und da hat auch ein Mitglied aus einem DevSecOps-Team geschrieben, entwickelt hauptsächlich, und er will sich eigentlich nicht mal mit der Datenbank auseinandersetzen, weil er da eigentlich ein OMR dazwischen hat. ORM, nicht OMR. Habe ich jetzt OMR gesagt? Klassischer Fehler, ORM. Und dass das schon eine Zusatzbelastung ist und die in seinem Fall einfach nicht so wichtig ist, die Datenbank jetzt intus zu kennen, Verstehe ich auch, aber da sprechen wir jetzt gar nicht noch von den ganzen anderen Bereichen, die man abdecken soll.",
            "start": 2333404,
            "end": 2367826,
            "confidence": 0.8181249999999998,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, das ist halt wirklich die Frage, die auf dem Tisch liegt, weil Entwicklerinnen sind dann eigentlich für Qualitätssicherung, Sicherheit, Effizienz, Monitoring, Finanzen der Software zuständig. Und dann fragt man sich, okay, die Komplexität deines Jobs wird halt echt hart steigen und auch das Wissen über die Best Practices, weil im Endeffekt musst du ja verstehen, wenn du einen Prozess, einen menschlichen Job, einen menschlichen Prozess versuchst, in ein automatisiertes Tool zu überführen und somit das Left zu shiften, dann musst du ja schon wissen, wie es richtig funktioniert. Du wandelst also ein Best Practice um oder du wendest den Best Practice an. Und wie viel Best Practices aus anderen Disziplinen musst du denn drauf haben? Also das ist ja schon eine harte Sache.",
            "start": 2368467,
            "end": 2411994,
            "confidence": 0.7974677419354843,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber heißt das eigentlich, dass man immer mehr in Richtung, so wie ein Startup funktioniert eigentlich geht, aber auf Team-Ebene, dass man sagt, okay, man braucht eigentlich alle Spezialfunktionen irgendwie im eigenen Team und dann kauft man sich natürlich gewisse Sachen durch die Automation, von einem Cloud-Ambiter oder von einem internen Plattform-Team quasi dazu, aber man braucht das gesamte Knowledge im Team, entweder in einem Kopf oder in ein paar Köpfen, aber zumindestens alles lokal im Team.",
            "start": 2412714,
            "end": 2439085,
            "confidence": 0.8102207792207792,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, auf jeden Fall bist du einem gewissen Grad, denn im Endeffekt hast du dann ein Teil implementiert, weiß ich jetzt, sagen wir mal Security oder Monitoring oder ähnliches oder Observability, Dann können die Leute, die müssen ja jetzt da nicht neben dem CI-System sitzen und dann immer aufs CI-System schauen, die können sich dann um weitere Dinge kümmern, was euer Security-Bereich dann aufs nächste Level hebt, um ein neues Tool zu schreiben oder oder oder, was dann halt auch immer notwendig ist. Und dann kann man sich die, dann braucht man die Leute halt nicht mehr im Team, sondern eigentlich in der Firma und dann können die halt, ich sag mal, zentralisiert arbeiten in einem Plattform-Team oder eben.",
            "start": 2439606,
            "end": 2471852,
            "confidence": 0.7588907563025213,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ja, aber das sind die Spezialisten, klar, die nochmal tiefer gehen. Aber ein Grundverständnis brauche ich schon in meinem Team. Es gibt zwar einen Spezialisten, der vielleicht dieses Tool schreibt, das mir die Dockerlöcher aufspürt, aber dass ich dieses Tool überhaupt brauche und was eigentlich für Probleme mit Docker kommen oder mit meinem klassischen Linux-System ist ja ganz egal oder mit meiner Software und Libraries, mit meinen Abhängigkeiten, dieses Wissen, brauche ich natürlich schon im Team, um mal überhaupt zu wissen, welche Tools soll ich verwenden, auf was muss ich Acht geben, was gibt es vielleicht auch für Einfallstore, gerade wenn es um Security geht, in meiner Software. Also diese Dinge braucht man natürlich schon, weil die kann man schwer automatisieren. Man kann natürlich schon gewisse Tools zur Verfügung stellen, aber ein Grundwissen brauche ich trotzdem, ein Verständnis von dem Ganzen.",
            "start": 2472314,
            "end": 2516980,
            "confidence": 0.8041631205673755,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Also in der Zukunft werden sich die Erwartungen an dich als Softwareentwickler deutlichst erhöhen. Und das ist ja genau unser Intro gewesen. AI ist meines Erachtens nach vielleicht ein Risiko für deinen Job. Aber ich finde dieser Shift-Left-Ansatz, wenn du da stehen bleibst, ich denke das ist ein größeres Risiko, ich sag mal, abgehängt zu werden.",
            "start": 2517632,
            "end": 2541440,
            "confidence": 0.848392857142857,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber das heißt auch, dass man die klassischen T-Shaped, also diese Formen wie ein T, dass man so ein Grundwissen oben hat und dann irgendwo in die Tiefe geht, dass diese eher aussterben, weil man irgendwie diesen Strich vom T eher nach oben schiebt und eigentlich in mehr Bereichen grundlegende Informationen oder auch vielleicht so halb tiefgehende Informationen oder Wissen benötigt, um überhaupt den Job zu erfüllen und es immer weniger Spezialisten gibt oder die Spezialisten dann halt in diesen externen Teams draußen arbeiten.",
            "start": 2542300,
            "end": 2573052,
            "confidence": 0.828880952380952,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ich denke einfach, dass der horizontale T-Strich einfach länger wird. Die Spezialisierung musst du weiter aber haben, um Wert im Team zu leisten. Aber der horizontale T-Strich wird einfach nur länger.",
            "start": 2573092,
            "end": 2580898,
            "confidence": 0.7427419354838711,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Du bist gut, du machst da einfach irgendwelche Striche länger. Da hängen ja viele Weiterbildungen und Kurse und Informationen dran zu dem Strich.",
            "start": 2581318,
            "end": 2590960,
            "confidence": 0.7535652173913042,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Das weiß ich und ich habe auch größten Respekt davor. Und auch ich frage mich, wie kriegt man das alles in meinen Kopf? Denn Achtung, ich werde leider nicht jünger und man merkt ja jetzt schon, ich bin auch keine 20 mehr. Aber Leute nach dem Studium, sage ich dir ganz ehrlich, die hängen mich jetzt schon ab in der Geschwindigkeit, wie junge Leute neue Frameworks und neue Techniken lernen können. Also da sag ich auch nur Respekt.",
            "start": 2590980,
            "end": 2613325,
            "confidence": 0.7941923076923076,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jetzt kommt schon der alte Mann, der jammert, diese Jugend, die versteht ja nichts, die wendet nur alles an und kann ja gar nichts mehr in der Tiefe verstehen.",
            "start": 2613345,
            "end": 2620467,
            "confidence": 0.7849310344827587,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Das hab ich nicht gesagt.",
            "start": 2620507,
            "end": 2621848,
            "confidence": 0.6437999999999999,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Und früher Assembler, wir haben alle noch Assembler kurz nach dem Krieg programmiert.",
            "start": 2621888,
            "end": 2626569,
            "confidence": 0.8228461538461538,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Nee, da möchte ich auch nicht zurück, aber nee, es wird eine Herausforderung. Und die Firmen werden mehr und mehr drauf schauen auf Automatisierung in allen Bereichen. Und SoftwareentwicklerInnen von heutzutage, die müssen sich mehr und mehr und mehr mit all diesen Bereichen, zumindest auf einem High Level, auf jeden Fall auseinandersetzen.",
            "start": 2626629,
            "end": 2649175,
            "confidence": 0.8289423076923079,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jetzt klingt das ja alles ganz nett, okay, man bildet sich da weiter und braucht halt mehr Wissen, dass man das Ganze bedienen kann, würde ich mal sagen. Aber wenn ich mich da so zurückerinnere an die ganze DevOps-Bewegung, ist ja kein Job, sondern ein Mindset, wie du mir immer beibringst. Da hat es ja schon sehr viel Konfliktpotenzial gegeben oder gibt es immer noch zwischen den Ops-Leuten und denen, die vielleicht dieses DevOps-Mindset voranbringen wollen, die Ops die irgendwas abgeben müssen auf die Developer-Seite, Kompetenzen abgeben müssen, vielleicht auch Kontrolle abgeben müssen oder dürfen, wie man sieht. Aber es hat auf jeden Fall ein hohes Konfliktpotenzial. Jetzt erweitern wir aber die Dimensionen da auf noch viel, viel mehr Dimensionen. Ist es nicht extremes Konfliktpotenzial, vor allem bei der Umstellung?",
            "start": 2649810,
            "end": 2695725,
            "confidence": 0.8456000000000004,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Sehr gute Frage und ich weiß nicht, ob meine Antwort richtig ist, aber ich präsentiere dir mal meine These. Das Konfliktpotenzial bei DevOps liegt in der Natur der Sache. Du hast Dev, die werden dafür bezahlt, Sachen zu ändern, Bugs zu fixen, Features zu entwickeln. Du hast Ops, die werden dafür bezahlt, Systeme stabil zu halten. Und du hältst Systeme stabil, indem du einfach nichts änderst. Und da hast du natürlich zwei entgegengesetzte Motivationen, die aufeinander clashen. Nehmen wir mal den Security-Bereich. Es kommen jeden Tag neue Exploits und neue Wege, wie du in ein System eindringen kannst und neue Informationen erhaschen kannst. Nehmen wir mal Heartbleed und Co. Das bedeutet, Security Folks sind von Haus aus, ich sag mal, dynamischer unterwegs. Die müssen sich jeden Tag mit neuen Sachen auseinandersetzen. Wenn die jetzt mit Entwicklerinnen zusammenarbeiten, dann ist das ein und dieselbe Motivation. Die sind beide auf derselben Dynamik unterwegs. FinOps, genau dasselbe. Du hast ein Finanzdepartment, deren Ziel ist es, zuzusehen, dass die Firma nicht zu viel Geld verbrennt. Und wenn sie ein Optimierungspotenzial finden, dann lass uns doch an dieser Schraube drehen. Klar, jetzt kann man sagen, okay, Entwicklerinnen sind jetzt nicht die Leute, die gerne Cloud-Kosten ausrechnen und diese optimieren. Ja, das stimmt schon. Aber da ist nicht so ein Konfliktpotenzial, so ein gegenläufiges Konfliktpotenzial wie bei Operations und Dev. Und deswegen denke ich, ist das nicht vergleichbar. Macht das Sinn? Würdest du da mitgehen?",
            "start": 2696325,
            "end": 2785582,
            "confidence": 0.8138912133891216,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ja, ich kann es irgendwo nachvollziehen, aber natürlich klassisch war ja Security immer in Ops angesiedelt und jetzt ziehst du Security in irgendeiner Form raus, also könnte da natürlich schon auch wieder Konfliktpotenzial drin sein. Aber ich verstehe natürlich, was du meinst, ja, weil gewisse Bereiche wie Testing, hat wahrscheinlich weniger Konfliktpotenzial. Das stimmt. Das hat eher vielleicht das Konfliktpotenzial, dass die Devs sagen, warum soll ich die testen? Ich will eigentlich nicht testen. Das ist so eine nervige Arbeit und eigentlich will ich keine Tests schreiben. Aber darüber sind wir, glaube ich, schon drüber. Das war ja die Diskussion vor zehn Jahren.",
            "start": 2786380,
            "end": 2819100,
            "confidence": 0.7635825242718444,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Für mich ist das so ein bisschen, Entwickler, die keine Tests schreiben wollen, sind für mich irgendwie Handwerker, die eine Duschtasse einbauen und nicht unter der Duschtasse abdichten wollen. Also ist für mich irgendwie das gleiche, du machst deinen Job, Alter, bin ich ordentlich. Und ja, natürlich schreibe ich nicht gerne Tests. Ich verstehe das, ich schreibe aber auch nicht gerne Dokumentation, aber der Zukunfts-Andi, der in einem Monat wieder auf die Software guckt, ist immer wieder glücklich, dass da Dokumentation ist. Also gehört halt einfach zur Profession dazu.",
            "start": 2819584,
            "end": 2847893,
            "confidence": 0.801561797752809,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Und man kann glaube ich einfach viel mit Automatisierung heutzutage abfangen. Also sei es jetzt von einem internen Plattform-Team, Security-Team, die da Tools zur Verfügung stellen, aber es gibt ja auch tausende Tools da draußen und das ist natürlich teilweise teuer und irgendwelche SaaS-Tools, die Security-Lags auch spüren, aber sie machen natürlich auch schon Sinn. Und so kann man sich natürlich auch wieder helfen.",
            "start": 2847933,
            "end": 2869067,
            "confidence": 0.8142812500000001,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Im Endeffekt muss ich jetzt auch mal die Arbeit und die Überwindung von Widerständen und Kollaborationsbarrieren und so weiter Ich finde das immer schwierig, wenn Leute sagen, das will ich jetzt aber nicht, weil im Endeffekt alle Leute, die für eine Firma arbeiten, wurden eingestellt, um den Traum von jemandem zu entwickeln, und zwar in der Regel von der Chefetage. Das bedeutet, alle sollten das Incentive haben, am selben Strang zu ziehen und das Ziel umzusetzen. Deswegen ist es natürlich fraglich, warum es Kollaborationsbarriere gibt und warum, ah, das möchte ich jetzt nicht und ah, nee, das macht ja alles instabil. Also immer, wenn man halt sagt, ah, das macht das alles immer instabil, dann frage ich mich, okay, dann switch doch mal in den Lösungsmodus. weil wir haben jetzt beide dieses problem auf dem tisch und das muss jetzt irgendwie von unserem tisch und deswegen verstehe ich es halt nicht und die ja das ist dann politik und allem drum und dran und kriege man kriegt man heils bei ja aber.",
            "start": 2869107,
            "end": 2920053,
            "confidence": 0.771587209302325,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Man muss natürlich schon, Sagen, das was du auch am Anfang erwähnt hast, es geht ja eigentlich um die Kommunikation und wie wir nicht müde werden zu wiederholen, Kommunikation ist nicht so leicht. Das heißt man muss wahrscheinlich schon auch in dem Bereich einfach investieren und darf die Kommunikationsseite nicht vergessen, weil die ganzen Teams in irgendeiner Form miteinander kommunizieren müssen. Und es ist keine reine technische Lösung. Und auch wenn man sagt, okay, Business-Mindset wäre besser, aber eigentlich geht es ja da auch ganz viel um Kommunikation, dass die Plattform-Teams ein Business-Mindset haben mit den Kunden, mit den Entwicklern, demnach sprechen. Also da findet überall Kommunikation statt. Und es kann ja durchaus sein, dass die Techies nicht immer die kommunikationsstärksten Leute sind. Ausnahmen bestätigen die Regeln natürlich. Aber da muss man, glaube ich, investieren und das darf man bei so Shift-Left-Änderungen, Prozessänderungen nicht vergessen, weil es ist halt doch immer noch eine große Prozessänderung und jede Prozessänderung hat Gegner und Gegnerinnen und dem muss man sich halt auch annehmen.",
            "start": 2920073,
            "end": 2980792,
            "confidence": 0.8426352941176468,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Eine Idee, die mir dazu seit ein paar Wochen im Kopf rumschwirrt, ist, du bekommst eigentlich immer nur das, was du inzentivierst. Was meine ich damit? Das Operations Team wird anhand von Sachen gemessen, wie stabil die Plattform ist. Das Entwicklerteam wird daran gemessen, wie viele Features die pro Monat oder in einem Cycle rausgehauen haben. Aber warum inzentivierst du denn beide Gruppen nicht gegeneinander? Warum sagst du nicht, das Operations-Team kriegt eine KPI vom Entwicklerteam und das Entwicklerteam kriegt auch eine KPI zur Performance-Messung vom Operations-Team? Dann haben beide automatischen Incentive, sich gegenseitig zu helfen.",
            "start": 2981773,
            "end": 3021103,
            "confidence": 0.7728125,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber ich glaube, das ist ein guter Punkt und wichtiger Punkt, dass du eben deine alten Prozesse nicht mehr gleich anwenden kannst, weil die KPIs, die du früher verwendet hast, funktionieren in so einem Modell vielleicht nicht mehr. Gleich wie die Kommunikation ein Problem ist, hast du gewisse alte Mechanismen, die du halt auch mit ändern musst im Leadership zum Beispiel oder eben wie machst du deine Zielsetzungen und solche Dinge. Es ist kein reines technisches Problem und das ist ein guter Punkt, da die ganze Leadership-Ecke natürlich auch nochmal mitzunehmen.",
            "start": 3021263,
            "end": 3049528,
            "confidence": 0.8073406593406594,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Gut jetzt umso umso höher das im leadership geht ja die werden shift left auf irgendeinem c level cto meeting mal gesehen haben oder gehört haben und dann werden das mit kosteneinsparung in verbindung gebracht werden und das haben die vom cfo der cfo liegt dir nämlich schon seit monaten im ohr dass du mal deine cloud kosten runterdrücken sollst. Dann lass doch einfach mal finden, ob es noch mal was shift left. So, buff. Für ein CTO ist das jetzt geregelt und dann kann sich das Mittelmanagement und die Engineeringmanagement-Riege nämlich damit rumschlagen und dann geht es natürlich an den Zielsetzer.",
            "start": 3050008,
            "end": 3081495,
            "confidence": 0.7694803921568627,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Aber das war ja auch genau bei DevOps das Problem, dass die Ops-Leute ja verantwortlich sind, dass alles läuft und für die ist es eben schlecht, wenn es Ausfälle gibt. Jetzt haben sie das aber nicht mehr in der Hand, sondern müssen das aus der Hand geben oder auch Security, dass auf der Entwicklerseite das mehr gemacht wird. Das heißt, das hat natürlich dann sofort Konfliktpotenzial, wenn du die Rahmenbedingungen nicht änderst und dementsprechend musst du die Rahmenbedingungen halt auch immer mit ändern und ich glaube, da ist dann halt auch viel Kommunikation im Spiel und da sind dann irgendwelche Agile Coaches oder sonstige Leute, die halt mehr mit Kommunikation machen, Engineering Manager, dem ganzen Leadership Team auf allen Ebenen, die sind dann natürlich auch gefordert, das dementsprechend umzuändern und nicht nur irgendeine Technologieänderung zu machen oder, weil es halt gerade so cool ist, Shift-Left zu schreien.",
            "start": 3081807,
            "end": 3124833,
            "confidence": 0.792523809523809,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ja, wie du auch beschreibst. Also ich meine, Shift Left ist nichts Neues. Man könnte sagen, alter Wein in neuen Schläuchen. Hat angefangen damals mit Testing, was heutzutage, glaube ich, hoffentlich Standard in vielen Firmen ist. Zumindest ein bisschen Unit Testing, Akzeptanz Testing, Integration Testing oder ähnliches, was automatisch im CI-System läuft. Aber im Endeffekt geht es halt jetzt weiter. Da kommt Security mit in den Mix, da kommt Monitoring Observability mit in den Mix, da kommt Finance mit in den Mix, mit einer Infrastruktur. Und ich gehe stark davon aus, in den nächsten Jahren werden wir noch mehr Themen im Bereich Shift-Left auf uns zukommen sehen. Denn wie ich schon gesagt habe, in der Zukunft werden sich die Erwartungen an Softwareentwicklerinnen deutlich erhöhen. Und wie im Intro gesagt, Ich denke, umso mehr Shift Left es geben wird, desto höher ist gegebenenfalls auch das Risiko für unseren Beruf. Nicht, dass wir nicht mehr benötigt werden, aber dass wir gegebenenfalls abgehangen werden, weil wir kein Basiswissen in Security haben, weil wir kein Basiswissen in Operations haben, weil wir kein Basis in dem Wissen der Cloud-Kostenoptimierung und, und, und haben. Denn ein gewisses High-Level-Verständnis von der ganzen Sache musst du schon haben, sonst ist das vielleicht das nächste Jobrisiko. Und ja, sieh mal zu, dass dein T-Strich von deinem T-Shape-Developer, dein horizontaler T-Strich, mal ordentlich breiter wird, würde ich sagen.",
            "start": 3125084,
            "end": 3202863,
            "confidence": 0.8185657894736841,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Oder wie es Björn aus unserer Community sagt, der Cum-Shape, er driftet schon immer weiter ab zu einem Cum-Shape, wie einem Cum mit ganz vielen Spitzen nach unten. Vielleicht ist das die Zukunft.",
            "start": 3202923,
            "end": 3214149,
            "confidence": 0.7804242424242424,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Das ist schön, das ist schön. Aber mein kleiner Win in dieser Podcast-Episode, Wolfgang zum Shift-Left-Fan gemacht zu haben, um endlich mal einen validen Use-Case für Pair-Programming gefunden zu haben. Oder eine gute Management-Argumentation. Kann der gute Consultant jetzt wieder verkaufen.",
            "start": 3215370,
            "end": 3233074,
            "confidence": 0.7447560975609755,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ich würde sagen Personal Pain, den ich immer bei Leuten spüre, die da kämpfen. Aber ich bin ja ein alter Shift-Left-Fan, also hab da ja auch viel schon mitgemacht im negativen und positiven, bin aber immer noch voll überzeugt. Uns würde aber natürlich auch eure Meinung dazu interessieren, also kommt vorbei in unsere Discord-Community, erklärt uns, ob ihr T-Shape, Cum-Shape, keine Ahnung was für ein Shape bevorzugt und Warum? Hoffe, spannende Diskussionen. Auch vor allem, wenn ihr anderer Meinung als der Andi seid. Das freut mich immer am meisten. Kommt gerne vorbei. Und alle Episoden, die wir erwähnt haben, sind natürlich auch in den Shownotes. Könnt ihr direkt draufspringen, um jeweils in die Tiefe zu tauchen. Und sonst freuen wir uns natürlich auch, wenn ihr uns weiterleitet, empfehlt, irgendeinen Stern vergebt oder irgendeinen Daumen nach oben. Was es auch immer ist. Egal auf welcher Plattform.",
            "start": 3233891,
            "end": 3281508,
            "confidence": 0.8251724137931035,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Das war der Werbespot von Dr. Wolfgang Gassler. Und jetzt zurück. Nehmt ernst. Hat Spaß gemacht. Tschüss, bis zum nächsten Mal. Bye bye.",
            "start": 3281548,
            "end": 3288567,
            "confidence": 0.49852173913043474,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ciao. Und nicht vergessen, 50.000 Euro für dein Open Source Projekt für sechs Monate einzureichen bis Ende März. Also gib Gas. Link findest du in den Show Notes.",
            "start": 3289088,
            "end": 3299581,
            "confidence": 0.7781785714285715,
            "speaker": "A",
            "channel": null
        }
    ],
    "confidence": 0.796652990190911,
    "audio_duration": 3299.0,
    "webhook_status_code": null,
    "webhook_auth": false,
    "summary": null,
    "auto_highlights_result": null,
    "content_safety_labels": null,
    "chapters": null,
    "sentiment_analysis_results": null,
    "entities": null
}