{
    "language_code": "de",
    "audio_url": "https://audio1.redcircle.com/episodes/9012e774-bb6c-46d3-8d57-443bb74a8bad/stream.mp3",
    "punctuate": true,
    "format_text": true,
    "dual_channel": false,
    "multichannel": null,
    "audio_channels": null,
    "webhook_url": null,
    "webhook_auth_header_name": null,
    "webhook_auth_header_value": null,
    "audio_start_from": null,
    "audio_end_at": null,
    "word_boost": [],
    "boost_param": null,
    "filter_profanity": false,
    "redact_pii": false,
    "redact_pii_audio": false,
    "redact_pii_audio_quality": null,
    "redact_pii_policies": null,
    "redact_pii_sub": null,
    "speaker_labels": true,
    "speakers_expected": 2,
    "content_safety": false,
    "content_safety_confidence": null,
    "iab_categories": false,
    "custom_spelling": null,
    "disfluencies": false,
    "sentiment_analysis": false,
    "auto_chapters": false,
    "entity_detection": false,
    "summarization": false,
    "summary_model": null,
    "summary_type": null,
    "auto_highlights": false,
    "language_detection": false,
    "language_confidence_threshold": null,
    "language_confidence": null,
    "speech_threshold": null,
    "speech_model": null,
    "id": "21d4c26a-038f-487e-a7f9-693e55025bee",
    "status": "completed",
    "error": null,
    "utterances": [
        {
            "text": "Endspurt im Engineering Kiosk Adventskalender. Der vierte Advent steht kurz bevor. Das bedeutet auch, dass die vierte Kerze angezündet wird. Immer wenn es um Feuer geht, geht es auch um die Sicherheit. Besonders bei Kindern. Deswegen die große. Aber nun genug von Streichhölzern. Reguläre Ausdrücke sind schon gefährlich genug. Zurück zum eigentlichen Inhalt. Diese Episode ist ein Community Beitrag von unserem Freund Matthias Endler vom Rust in Production Podcast. Dabei dreht sich alles um Softwareversionen. Wenn du nun denkst, ich kenne doch schon alles zu diesem Thema, dann bleib dran. Denn diesmal geht es nicht um ab Version eins ist die Software stable oder semantic Versioning. Das Mikrofon geht nun an Matthias. Los geht's.",
            "start": 2240,
            "end": 49282,
            "confidence": 0.90313226,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Legacy verdient das Geld, sagt der Andi immer. Mich als Softwareentwickler hat Legacy Code schon immer fasziniert. Denkt mal drüber nach. Die Software, die in Banken, Versicherungen und Betriebsratsmittel Systemen läuft, ist älter als so mancher, der gerade zuhört. Und genau hier wird es spannend. Wie schaffen wir es eigentlich, dass alte Software weiterhin funktioniert? Ein zentraler Baustein dabei sind Versionsnummern. Damit können wir Änderungen nachvollziehen und Programme kompatibel halten. Aber selbst bei so was Einfachem wie Versionsnummern kann einiges schiefgehen. Und manchmal sogar richtig spektakulär. In dieser Weihnachtsepisode vom Kiosk nehme ich euch mit auf die Reise durch die kuriosesten Versionsnummern bekannter Software. Mein Name ist Matthias Endler und normalerweise bin ich Host vom Rust in Production Podcast. Vielleicht habt ihr auch schon Folge 98 gehört, in der wir über den Hype um Rust gesprochen haben. Aber heute geht es um Versionsnummern. Fangen wir mit dem Textsatzsystem LaTex an. Das basiert auf Tags oder tech von Donald Knut. Knut ist vieles Mathematiker Informatiker Genie und ein bisschen verrückt. Er hat die Versionsnummern von tags nämlich so gestaltet, dass sie sich Pi annähern. Der Grund ist, dass in Text keine neuen Funktionen mehr eingebaut werden sollen. Es ist fertig. Nur Bugfixes sind erlaubt. Tags nähert sich also immer weiter seiner finalen Version an. Übrigens soll die Versionsnummer von tags nach Knuts Tod eingefroren werden. Und die Versionsnummer wird exakt auf Pi gesetzt. Und jetzt ohne welche browser Versionsnummer benutzt ihr eigentlich? Früher war die Welt ganz einfach. Es gab Internet Explorer sechs und Firefox drei. Aber Google Chrome ist bei Aufnahme dieser Episode bei Version 102 und dreiig und Firefox bei 104 und dreiigste. Dabei ist das Parsen solcher Versionsnummern gar nicht so einfach. Viele User Agent Parser hatten schon mit den zweistelligen Versionsnummern vor ca. 12 Jahren Probleme. Damals hat man oft nur eine Ziffer erwartet und die zweite Ziffer einfach ignoriert. Habt ihr Folge 146 über Doom gehört? Eine Sache, die Andy dort nicht erwähnt hat, ist die Versionsnummer von Doom. Natürlich geht es dabei um die Zahl des Teufels. Das war eine der finalen Versionsnummern von Doom und das fanden die Entwickler so lustig, dass es auch eine Version von Doom zwei gibt. Ein weiteres Beispiel für Entwicklerhumor ist PHP. Die Version sechs war Jahre in der Entwicklung und es gab sogar schon Bücher darüber. Aber PHP wurde nie veröffentlicht. Es wurde komplett verworfen und stattdessen kam PHP siebte. Aber zumindest war PHP der einzige PHP Release, der keine Sicherheitslücken hatte. Die Hauptaufgabe der Roadmap für die Entwicklung von PHP war das sehr ehrgeizige Ziel, echte Unicode Zeichenunterstützung in der gesamten Sprache einzuführen. Die Arbeit daran begann schon 2005, aber 2009 war noch immer kein Ende in Sicht und die erforderlichen Änderungen waren immer noch nicht zwischen den Entwicklern abgestimmt. Die Zeit verging und es wurde beschlossen, die Verbesserungen von PHP einfach in den Fünferzweig von PHP zu integrieren. Um diese Änderungen von der negativen Online Presse bezüglich der fehlgeschlagenen Unicode Arbeit in PHP abzugrenzen, wurde der neue Zweig PHP genannt. Das Perl Team hat so lange an Perl sechs gearbeitet, dass es zu einer komplett eigenen Sprache wurde. Der Designprozess für Perl sechs begann im Jahr zwei tausendste. Es gab so viele Änderungen und Verzögerungen, dass Perl sechs im Jahr 2019 offiziell umbenannt wurde. Heute heißt die Sprache Raku. Java ging von Version 1. Apr. Direkt auf. Intern war die Version allerdings als 1. Mai. Bekannt. Java sechs war intern 1. Jun. Erst mit Java SE hat man sich entschieden, die Versionsnummer zu vereinfachen und einfach nur Java 11 zu sagen. Wir bräuchten wahrscheinlich eine eigene Episode, um die Unterschiede zwischen Jese, JeE, Java SE, JRE und JDK zu erklären. Node hat ein zweigleisiges Versionierungssystem. Geradzeilige Versionen also sind stabil und ungeradzeilige Versionen sind instabil. Als ob bei Node jemals irgendwas stabil gewesen wäre. Linux hat die semantische Versionierung schon lange nicht mehr verwendet. Bis 2003 verwendete Linux ungerade und gerade Versionen. Ungerade sind instabil, gerade sind stabil. Dann kam 2. Jun. Das ein geologisches Zeitalter in Bezug auf Software überdauerte, und zwar acht Jahre. Bis dann, ziemlich willkürlich, erhöhte Linus die Version auf und damit endete die Anwendbarkeit der semantischen Versionierung auf Linux. Versionen und als fällig war, ging Linus dazu über, die Hauptversion einfach immer dann zu erhöhen, wenn die miner Version so groß wurde, dass ihm die Finger und Zehen zum Zählen ausgingen. Lustig ist auch MySQL, die von 5. Jul. Direkt zu acht gesprungen sind. Tatsächlich wurde MySQL sechs um das Jahr 2008 eingesetzt und hat einige Alphas erlebt. Im Laufe der Zeit wurden die meisten Dinge darin in die ER Serie zurückportiert und einige Ideen für haben sich nie bewährt. Ich bin mir nicht sicher, wann oder wie die Version sieben verwendet wurde, aber beim Sprung von 5.",
            "start": 49466,
            "end": 364547,
            "confidence": 0.9179129,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Jul.",
            "start": 364560,
            "end": 364649,
            "confidence": 0.49,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Auf acht fällt einfach die erste Ziffer weg, die schon eine Weile bedeutungslos war. Oracle hat sich entschieden, die Versionsnummer von Oracle 12 c auf 18 hochzudrehen. Damit wurden die Versionsnummern 13 bis 17 übersprungen. Die 18 steht für das Jahr 2018, in dem die Version veröffentlicht wurde. Tatsächlich macht das sogar irgendwie Sinn. Wahrscheinlich hat Oracle einfach gemerkt, dass man für jede neue Version Lizenzgebühren verlangen kann. Zu guter letzt kommen wir zu Ÿousand Windows. Warum gibt es Windows sieben, Windows acht und Windows 10, aber kein Windows neun? Es wird oft behauptet, dass Windows neun nie veröffentlicht wurde, weil es zu viele Probleme mit der Versionsnummer gab. Als die Entwickler alte Programme analysierten, stellten sie fest, dass viele Anwendungen Windows 95 oder 98 nur an der führenden neun erkannten. Sie standen vor der Wahl, entweder den alten Code zu patchen oder die Versionsnummer einfach zu überspringen und entschieden sich für letzteres. Allerdings handelt es sich dabei höchstwahrscheinlich um eine Legende. Zumindest gibt es keine offizielle Bestätigung von Microsoft und einige Argumente, die dagegen sprechen. Siehe dazu auch den Link in den Shownotes. Deswegen zum Trost ein kleiner Bonus. Nach Windows 3. Nov. Kam Windows fünf und neunzigste. Viele Entwickler wollten damals sicherstellen, dass ihr Programm mindestens auf 03.01. Läuft. Sie verglichen dazu die Versionsnummer. Die Hauptversion musste mindestens drei sein und die Nebenversion mindestens 10. Die Nebenversion wurde nämlich damals als zweistellige Zahl dargestellt. 03.01. War intern als 3. Okt. Gespeichert. Das Windows 95 war intern eigentlich Windows und da ist null natürlich kleiner als 10. Die Programme hätten also fälschlicherweise gedacht, sie würden auf einem zu alten Windows laufen. Microsofts Lösung war pragmatisch. Windows 95 gab sich einfach als Version aus. Damit liefen die Programme weiter, denn 95 ist größer als 10. Und ja, das ist kein Gerücht. Das hat sogar Raymond Chen, ein bekannter Microsoft Mitarbeiter, auf seinem Blog the Old New Thing gepostet. Und das bringt uns zurück zu Legacy verdient das Geld? Das ist nicht nur ein Spruch, sondern eine Lebensweisheit. Denn hinter jeder krummen Versionsnummer steckt die Geschichte von Entwicklerinnen und Entwicklern, die Software am Leben halten. Ich hoffe, ihr hattet Spaß bei dieser Reise durch die Welt der Versionsnummern. Falls ihr mal genug von Legacy Code habt, hört euch auch gern mal eine Folge von Rust in Production an. Alle Referenzen zum Nachschlagen findet ihr in den Shownotes. Ich wünsche euch eine erholsame Weihnachtszeit und einen guten Rutsch ins neue Jahr. Euer Matthias.",
            "start": 364662,
            "end": 518200,
            "confidence": 0.91911185,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Danke, Matthias, für diesen Einblick und ob Rust nicht auch Legacy Code sein kann.",
            "start": 518900,
            "end": 524092,
            "confidence": 0.9215393,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Zweitausendein.",
            "start": 524156,
            "end": 524310,
            "confidence": 0.8122,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Ich würde sagen, da sprechen wir uns in ein paar Jahren wieder. Die Links zu Matthias und seinem Ruß in Production Podcast findet ihr wie immer in den Shownotes. Falls ihr noch weitere wilde Versionsnummern entdeckt habt, lasst es uns wissen, entweder in unserer Discord Community oder auf Social media. Ansonsten freuen wir uns immer, wenn ihr diesen Podcast auf der Streaming Plattform eurer Wahl bewertet. Bis dahin, eine schöne Adventszeit, euer Engineering Kiosk.",
            "start": 524340,
            "end": 549070,
            "confidence": 0.93578553,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Ÿousand.",
            "start": 552850,
            "end": 553572,
            "confidence": 0.62249,
            "speaker": "B",
            "channel": null
        }
    ],
    "confidence": 0.91745436,
    "audio_duration": 557,
    "webhook_status_code": null,
    "webhook_auth": false,
    "summary": null,
    "auto_highlights_result": null,
    "content_safety_labels": null,
    "chapters": null,
    "sentiment_analysis_results": null,
    "entities": null
}