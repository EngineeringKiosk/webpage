{
  "language_code": "de",
  "audio_url": "https://cloud.inlupus.at/s/dB9x6jfW7ENdnQE/download/ep188_game_design.mp3",
  "punctuate": true,
  "format_text": true,
  "dual_channel": false,
  "multichannel": null,
  "audio_channels": null,
  "webhook_url": null,
  "webhook_auth_header_name": null,
  "webhook_auth_header_value": null,
  "audio_start_from": null,
  "audio_end_at": null,
  "word_boost": [],
  "boost_param": null,
  "filter_profanity": false,
  "redact_pii": false,
  "redact_pii_audio": false,
  "redact_pii_audio_quality": null,
  "redact_pii_policies": null,
  "redact_pii_sub": null,
  "speaker_labels": true,
  "speakers_expected": 3,
  "content_safety": false,
  "content_safety_confidence": null,
  "iab_categories": false,
  "custom_spelling": null,
  "disfluencies": false,
  "sentiment_analysis": false,
  "auto_chapters": false,
  "entity_detection": false,
  "summarization": false,
  "summary_model": null,
  "summary_type": null,
  "auto_highlights": false,
  "language_detection": false,
  "language_confidence_threshold": null,
  "language_confidence": null,
  "speech_threshold": null,
  "speech_model": null,
  "id": "16c3b6a9-894e-4a27-be55-d7052ab71bc7",
  "status": "completed",
  "error": null,
  "utterances": [
    {
      "text": "Also ich muss ja jetzt in dieser Episode eine Einleitung finden, obwohl eigentlich Andi bei uns der große Gamer ist und er ja darüber eigentlich sprechen sollte, weil mein letztes Game ist irgendwie Monkey Island zwei oder so, was ich noch mit Disketten gespielt habe. Aber seitdem habe ich eigentlich keinen Berührungspunkt mehr mit der Game Design Branche oder mit der Gaming Branche ganz allgemein. Also Andi, eigentlich solltest du das machen.",
      "start": 105080,
      "end": 126816,
      "confidence": 0.9128367,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ich muss gerade erst mal googeln, wie viele Teile es von Monkey Island eigentlich gibt.",
      "start": 126848,
      "end": 129888,
      "confidence": 0.9704933,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Es gibt eigentlich nur zwei wahre Teile, aber das werden wir vielleicht auch noch kurz besprechen. Auf jeden Fall sprechen wir heute über eine Branche, die so als die Königsdisziplin in der Informatik fast oft bezeichnet wird oder gesehen wird, weil sie einfach extrem viel abdeckt. Also sei es Algorithmen, Grafik, Netzwerk, wenn es bei Multiplayer Games geht, Design natürlich, die ganzen d Geschichten, Storytelling gehört natürlich auch noch dazu und vielleicht hat man sogar neue spezielle Hardware, die man im Spiel hat. Und man arbeitet noch in cross functional Teams untereinander, also in ganz verschiedenen Disziplinen zusammen. Und wie wir alle wissen, ist es natürlich auch nicht leicht. Und darum haben wir uns überlegt, okay, wir widmen uns mal genau dieser Branche und klären, ob das wirklich die Königsdisziplin der Informatik ist. Und darum haben wir uns heute jemanden in unser Podcast Studio geholt, der nicht nur die ganze technische Seite beleuchten kann, sondern auch die Seite der Zusammenarbeit, wie man in solchen Teams zusammenarbeitet, weil er ist Lied von einem Game Developer Team. Und damit willkommen, Dominik.",
      "start": 130024,
      "end": 198856,
      "confidence": 0.93379474,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Hallo zusammen. Danke für die Einladung.",
      "start": 198968,
      "end": 200952,
      "confidence": 0.9747,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Dominik, man hört es schon an deinem Akzent, du kommst irgendwo aus dem Süden. Jetzt könnte man Bayern, Österreich, man weiß es nicht. Wenn man aber deinen Namen mal googelt, dann springt eine Sache ins Auge, zumindest für die Fans von Wolfgang. Und zwar bist du auch wirklich Fans, kann das sein? Fans, Stalker? Schauen wir mal. Weiß ich nicht. Aber wenn man eure beiden Profile mal übereinander legt, dann merkt man, ihr habt zufällig an derselben Uni studiert und zufällig am selben Lehrstuhl, nennt man das zumindest in Deutschland, Lehrstuhl Datenbank. Wie nennt sich das bei euch?",
      "start": 201016,
      "end": 235220,
      "confidence": 0.9263741,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Institut oder Forschungsgruppe oder Institut, je nachdem, wo es ist.",
      "start": 235260,
      "end": 240308,
      "confidence": 0.961714,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Da hast du auf jeden Fall 2014 den Dr. Der technischen Informatik gemacht mit deiner Doktorarbeit Spatially aware Graph Stores und ich musste erst mal übersetzen, was das heißt. Und DeepL hat mir die Übersetzung raumbezogene Graphen zurückgegeben. Du nix gerade. Das klingt also richtig, was Deep Amy da rausgegeben hat. Also kurzum, ihr habt zur gleichen Zeit einen Dr. Gemacht. Wir wissen ja alle, Running Gag Wolfgang hat ein paar Jahre länger gebraucht. 2017 habe ich auch noch mal nachgesehen und ich glaube, er hat sogar früher angefangen. Aber das nur zur Info und zum Lachen für die ganzen Fans von Wolfgang.",
      "start": 240444,
      "end": 276656,
      "confidence": 0.9280399,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Moment zur Klarstellung. Also Full Disclaimer natürlich auch. Wir sind auch im selben Büro gesessen und es kann ja auch sein, dass Dominik Einfluss darauf hatte, warum ich so lange gebraucht habe. Also möchtest ja nicht jeden Tag dran.",
      "start": 276768,
      "end": 289418,
      "confidence": 0.9322418,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Gearbeitet, um deine Arbeit zu verzögern bei diversen Kaffeepausen.",
      "start": 289434,
      "end": 293710,
      "confidence": 0.92487776,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Also wenn der Dominik dafür verantwortlich ist, dass du drei Jahre länger gebraucht hast. Also ich weiß nicht, irgendwas, irgendwas matcht da nicht. Naja, wie dem auch sei. Auf jeden Fall habt ihr anscheinend in diesem Büro jetzt nicht nur in eurer Doktorarbeit gearbeitet, sondern auch habt ihr das Engineering Kiosk eigentlich, ich sage mal, schon mal Probe geführt, denn ihr beide habt einen Podcast zusammen gemacht mit dem tollen Namen Infoküche. Auch ein geiler Name eigentlich. Ich habe mal nachgeguckt, es war ein deutschsprachiger Podcast, der sich auf Datenbanken, Informationssysteme und Webtechnologien konzentriert. Und ihr wolltet die Wissensbrücke zwischen Wissenschaft und Industrie schließen. Und leider habt ihr festgestellt, dass es keine Lücke gab oder die Lücke viel zu groß war, denn nach sechs Episoden habt ihr einfach mal das Handtuch geschmissen. Aber wer die Webseite noch mal möchte, der Wolfgang hat auf GitHub diese Webseite archiviert. Aber jetzt zum Podcast Thema und warum der Dominik eigentlich hier ist. Dominik, du warst Lead Programmierer bei einem kleinen Game Studio Don vs. Dodo und hast zuletzt am Industriegiganten gearbeitet, einer Wirtschaftssimulation. Ich musste erst mal gucken, was das überhaupt für ein Spiel ist. Ich kenne nur den Landwirtschaftssimulator, aber bei dem Industriegiganten gibt es da geht es um darum, dass du ein kleines Unternehmen im Laufe eines Jahrhunderts zu einem großen Konzern ausbauen sollst. Ist das korrekt?",
      "start": 295250,
      "end": 377836,
      "confidence": 0.9302436,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Das ist richtig, genau. Also letztendlich fängt man in einer Stadt an, baut ein Geschäft und versucht dieses Geschäft zu beliefern, indem man über Industrie, z.B. einen Bauernhof, Sachen produzieren lässt und die dort dann in der Stadt verkauft und damit Geld macht und dann wieder sein Industriereich ausbaut und zum Industriegegangen wird.",
      "start": 438028,
      "end": 455388,
      "confidence": 0.9286523,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Du hast nie Industriegigant gespielt, Andy sagt er nicht Gamer. Das kenn sogar ich. Das war irgendwann in den ERN, so die erste Version.",
      "start": 455444,
      "end": 466860,
      "confidence": 0.8539492,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ende 90 ist der zweite Teil. Der war sehr bekannt. Genau, Anfang zwei tausendste.",
      "start": 466940,
      "end": 471548,
      "confidence": 0.915175,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ich war immer der Age of Empires Kollege und Command Conquer Kollege, wohingegen jetzt gerade vor kurzem Command Conquer die komplette Reihe Open Source gestellt wurde. Also auf GitHub gibt es die originalen Command Conquer Teile. Verlinken wir auch, habe ich auch mal.",
      "start": 471644,
      "end": 484524,
      "confidence": 0.9240463,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Reingeschaut, kann man mal in den Code schauen, das ist ganz nett, ganz unterhaltsam auch teilweise.",
      "start": 484532,
      "end": 489420,
      "confidence": 0.9173206,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Auf Reddit gibt es einen geilen Thread über die besten Code Kommentare aus diesen Command Coker Games. Verlinken wir auch. Interessant. Und auch mal wieder so. Ja, ich sag mal so, die Programmierer und Programmierinnen haben auch sehr viel geflucht. Aber kommen wir mal wieder zur Wissenschaft zurück. Erklär mir mal in drei Sätzen, was raumbezogene Graphenspeicher sind.",
      "start": 490080,
      "end": 511416,
      "confidence": 0.9079919,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Da ging es damals darum, wie man Netzwerkdaten in Datenbanken speichert und wie man sie so ablegt, dass sie lokal zueinander schnell zugreifbar sind. Also datenorientierte Speicherung würde man heutzutage sagen. Und das ist nicht so leicht bei Netzwerkdaten, weil da nicht so ganz klar ist, was daneben liegen soll. Das hängt dann davon ab, wie der Zugriff ist und so weiter. Und darum geht es in dieser Doktorarbeit, wie man Daten clustert. Also im Prinzip eine Clusterung von Netzwerkdaten, damit man schnell einen Zugriff gebe leisten kann.",
      "start": 511488,
      "end": 539396,
      "confidence": 0.9299372,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Welches praktische Problem löst man damit, dass.",
      "start": 539468,
      "end": 541524,
      "confidence": 0.9776543,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Man schneller zugreifen kann, schnell abfragen machen?",
      "start": 541532,
      "end": 543236,
      "confidence": 0.92592573,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ne, ich meinte eigentlich mit der grundlegenden Speicherung dieser Netzwerkdaten.",
      "start": 543268,
      "end": 546640,
      "confidence": 0.979543,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Wenn du Netzwerke hast und die abfragen willst, hast du ja oft z.b. soziale Netzwerke oder sowas in der Art und du möchtest jetzt dich weiter hangeln, so von wer ist der Freund von Freund von Freund, sowas in der Art. Und das gibt es natürlich für diese ganzen. Damals waren diese semantischen Netzwerke, ADF und so weiter total groß und die effizient zu durchsuchen und abzufangen, analysieren und so weiter, dafür brauchst du sowas.",
      "start": 546820,
      "end": 571576,
      "confidence": 0.8763732,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Okay, ich habe jetzt eigentlich an Computernetzwerke gedacht, wie so eine LAN Party oder ähnliches oder das Internet und nicht von Freunden von Freunden von Freunden. Und wie kommt man jetzt zum Gaming, wenn man einen Dr. In Datenbanken und in spatial aware graph stores macht?",
      "start": 571608,
      "end": 585252,
      "confidence": 0.9044389,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ja, erst meine Lions Geschichte. Ich habe eigentlich immer Informatik studiert, weil ich Computerspiele machen wollte. So hat es angefangen und dann habe ich studieren angefangen und wurde dann immer abgelenkt, ich weiß auch nicht warum. Habe dann den Bachelor gemacht und den Master gemacht und dann hatte ich beim Master diese Chance irgendwie den Dr. Zu machen. Und ich wollte eigentlich Computerspiele machen. Habe hast die Chance. Und es war auch ein bisschen dieses schafft man Dr. Überhaupt? Irgendwie wird es dann schon ziemlich dünn, die Luft da oben. Jetzt probierst du es aus, das wirfst du dir vor, wenn du es nicht ausprobiert hast. Und dann ging die Doktorjahre ins Land, wie Wolf auch vorher schon berichtet hat, nachdem der Dr. Endlich fertig war, habe ich da gesagt, so okay, jetzt Datenbanken für den Rest meines Lebens ist mir dann doch irgendwie vielleicht zu trocken. Jetzt mache ich das, was ich eigentlich immer machen wollte. Und dann habe ich angefangen mit Game Design vor 10 Jahre her. Wer macht das jetzt 10 Jahre?",
      "start": 585316,
      "end": 635906,
      "confidence": 0.9032773,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Jetzt hattest du beim Studium gerade gesagt, okay, du wurdest immer abgelenkt, du hast jetzt nicht gesagt womit, sehr wahrscheinlich durchs Zocken, wer weiß das schon. Hast du dir das dann so vorgestellt, in der Game Industrie oder in der Spieleindustrie zu arbeiten, so wie du die Spiele gespielt hast, so nach dem Motto, oh cool, dann sitze ich da den ganzen Tag und spiele Spiele. Oder wie sieht eigentlich der Alltag eines Game Entwicklers denn wirklich aus?",
      "start": 635938,
      "end": 657250,
      "confidence": 0.93825823,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Naja, ich bin natürlich schon Techniker, also ich habe die, fand es immer cool, die Spiele selber zu machen. Ich habe natürlich auch eigene während des Studiums schon gemacht, aber jetzt nichts großartiges, was man so Hobby Sachen halt macht. Und habe es immer von der technischen Seite natürlich interessant gefunden. Das ist tatsächlich auch was, also diese ganze, weil wir vielleicht bald noch reden werden über Game Design und auch die Artgeschichte und so dahinter, die jetzt nicht Technik sind, das blendet man vielleicht auch ein bisschen aus, aber man weiß es nicht. Und das ist schon so eine Sache, die einen einholt. Also wenn man von der technischen Seite rein startet in das Business, weil es halt einfach mehr wie nur Technik und das hat man ja nie gelernt. Also da kann man auch mit dem Informatikabschluss, der natürlich schon gutes Grundwerkzeug irgendwie gibt, aber da ist noch viel zu lernen und das muss man halt dann auch machen.",
      "start": 657290,
      "end": 700083,
      "confidence": 0.9253319,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und was gehört jetzt wirklich alles dazu, wenn du sagst, es ist eben nicht nur eine Informatik? Und ich habe ja schon initial gesagt.",
      "start": 700131,
      "end": 705907,
      "confidence": 0.9362575,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Die Königsdisziplin, die klassische Dreiteilung ist so ein Game Art Bereich. Das ist alles was künstlerisches, d d Modellierung, d Modelle. Ich nehme jetzt auch mal die ganze Soundgeschichte dazu. Also alles, was mit Musik und Audio zu tun hat, in diesen künstlerischen Bereich rein. Dann gibt es Game Design, das hat jetzt nichts mit dem eigentlichen Überbegriff zu tun, das wird oft verwechselt, sondern Game Design beschäftigt sich wirklich mit der Mechanik, mit dem, was Spaß macht an dem Ganzen, die Erfahrung, die geschaffen werden soll, was man macht, was Spaß machen soll, wie das gebalanced wird. Und im Prinzip steht der Spaß im Vordergrund, dass es wirklich ein gutes Spiel wird. Das ist das, was die Game Designer machen.",
      "start": 705923,
      "end": 744282,
      "confidence": 0.9311896,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das sind jetzt aber keine technischen Leute.",
      "start": 744346,
      "end": 746282,
      "confidence": 0.98036283,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Das sind unbedingt technische Leute. Die muss man sich am ehesten vorstellen als Leute, die sehr viel spielen und Spielmechaniken kennen, was eben Spaß macht. So Hauptwerkzeug bei denen ist oft die meiste Zeit Excel, weil sie vor allem bei sowas Wirtschaftssimulation wie der Industriegant oder sowas, da hat man unglaublich viel Produkte, man kann sehr viel Geld verdienen und so weiter, Progression vom Tellerwäscher zum Millionär drin. Und da muss man natürlich irgendwie schauen, wann verdiene ich was, wie starte ich, was kostet jetzt irgendein Item, für was kann ich es verkaufen? Und das wird sehr, sehr komplex. Und da geht es über Excel Sheets, damit man zumindest weiß, okay, das ist mein Startpunkt, den hat er vielleicht in ein, 2 Stunden erreicht, den Punkt, das ist das Endgame, wo er vielleicht 10 Stunden, 50 Stunden, wie auch immer, welche Spiele es erreicht hat. Und das geht dann über Excel Sheets mit sehr vielen Daten und weil man auch mal drehen muss an gewissen Sachen, werden wir vielleicht später noch mal reden über Worst Balancing oder so im Detail. Und da gibt es verschiedene Schulen dazu. Das eine ist mit sehr wenig Staaten iterativ Game Design unterwegs zu sein, viel zu testen und die andere ist vielleicht eher die ältere Version. Die älteren Game Designer, die kommen da wirklich mit diesem Ringbuchhalter her und haben da 100 Seiten Game Dokument drin, so eine Game Bibel, wo sie das Spiel versuchen vorzudesignen. Also wirklich jetzt hier, was Spaß macht, welche Mechaniken drin sind und so weiter und wie das gebalanced sein soll.",
      "start": 746426,
      "end": 825846,
      "confidence": 0.91577184,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ist dann aber jetzt rein textuell dann sowas oder seitenlang, also beschreibt man das oder sind da dann schon Grafiken drinnen.",
      "start": 825918,
      "end": 833446,
      "confidence": 0.9305519,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Auch Skizzen, textuelle Beschreibungen, Excel Sheets, also einfach Tabellen an Zahlen, wie die zusammenhängen, Formeln, wie gewisse Sachen zusammenhängen, eine Formel, wie Einkaufsverkaufspreise z.B. wie sich das entwickelt, solche Geschichten, da kann alles mögliche drinnen sein, auch teilweise ein bisschen so diese Mutgeschichte. Also kommt immer auf das Genre an, es gibt unglaublich viele Genres. Aber wenn ich ein gewisses Gefühl vermitteln will, wie kann ich das als Game, das kommt auch vom Game Design, so ist was was dunkles sein, soll es was cozy, also dieses gemütliche Spiel sein, wie drücke ich das aus? Hat natürlich dann auch Implikationen für die Artists, die dann damit arbeiten. Aber die eigentliche Idee, also der Startpunkt, das machen die Game Designer. Die Vision des Spiels sozusagen, das ist das, was die Game Designer machen.",
      "start": 833558,
      "end": 881836,
      "confidence": 0.9233185,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und sind die dann wirklich im Vorfeld unterwegs, bevor da irgendwas technisches sich überlegt wird? Also ist das wirklich so Wasserfall mäßig fast?",
      "start": 881868,
      "end": 889164,
      "confidence": 0.9180252,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Es gibt diese drei großen Entwicklungsbereiche, das ist eigentlich dem Film entlehnt. Die Gaming Branche orientiert sich sehr stark an der Filmbranche, wobei finde ich das nicht immer ganz passt. Aber da gibt es eben auch den Concept Bereich, die concepting, quasi die erste Stage, wo du anfängst zu arbeiten. Dann kommt bei uns der Prototyp in der Gaming Branche und dann kommt die Produktionsphase. Diese drei Phasen gehen aufeinander zu, grob immer doppelt so lang, also die nachgehende Phase ist immer doppelt so lang wie die davorgehende. Diese Game Designer arbeiten natürlich von der Concept Phase am Start schon. Also da ist wirklich, was mache ich, wie starte ich, welche Richtung sollte es gehen. Da werden natürlich die Artists auch schon einbezogen, wenn ich mal weiß, ich möchte irgendwas, sagen wir mal, was dunkles, endzeittypisches machen, dann beschreibt der Game Designer natürlich, wie soll sich der Spieler fühlen vielleicht. Und dann kommt es zum Artist und der Artist macht da Konzeptzeichnungen damit und sagt, okay, wie könnte das ausschauen. Die werden schon auch in diese Art Bible, gibt es eine Art Bible, also sowas wie das Game Design Dokument, das da reinkommt, wo halt so ein paar Vorzeichen, wenn es in Konzeptzeichnungen sind. In der Phase sind die Techniker natürlich eher weniger gefragt, da geht es oft eigentlich eher um Machbarkeitssachen, also dass halt nichts irgendwie von den Game Designern im Zentrum stehen soll, was technisch einfach sehr schwer zu lösen ist oder vielleicht sogar unmöglich zu lösen. Das gibt es natürlich auch manchmal, aber da wird je nach Projekt normalerweise vielleicht Vorarbeit geleistet, was man technisch machen kann, aber die sind nicht so stark involviert im Sinne von wie die anderen zwei, um ein Konzept fertig zu machen. Und mit diesem fertigen Konzept versucht man sich dann an den Prototypen. Im Prototypen geht es vor allem darum, dass man seinen Game Loop, das ist dieser zentrale Bestandteil eines Spiels. Ein Game Loop heißt immer, du startest ein Spiel, der Spieler bekommt ein Ziel, das ist ganz wichtig, dass er von Anfang an ein Ziel hat. Dann gibt es eine gewisse Mechanik, sowas wie Jump'n'Run, Springen, die Sprungmechanik, irgendwie klassisches Super Mario Brother, du kannst laufen und du kannst springen, das ist diese Mechanik dahinter. Und dann versuchst du dieses Ziel zu erreichen damit. Und dieses Ziel, wenn es erreicht wird, dann bekommst du eine Belohnung dafür. Und am besten ist dann, wenn diese Belohnung dich deinem Ziel natürlich nähergebracht hat, aber vielleicht auch den Weg zum Ziel vereinfacht, was dir irgendwas einfacher macht, in dein Ziel zu erreichen. Ein anderes Beispiel, was ich immer ganz gerne ist Diabolo. Das ist so ein Hack and Slay Spiel im Prinzip, man ist ein Held, man soll gegen Monster kämpfen in irgendwelchen Dungeons. Da funktioniert es ganz einfach. Du wirst da reingeworfen, das erste Monster kommt auf dich zu. Du hast am Anfang praktisch nur deine bloßen Hände oder irgendein schlechtes Schwert. Du haust auf das Monster ein, das fällt gleich um, es ist leicht und das lässt Gegenstände fallen oder Geld fallen. Und diese Gegenstände kannst du selber wieder ausrüsten. Dann ist dein Game Loop schon abgeschlossen. Die Mechanik ist diese Kampfmechanik, das Monster ist tot und du bekommst die Belohnung dafür und bekommst vielleicht ein besseres Schwert und kannst damit wieder besser Gegner besiegen. Aber da ist der Loop schon durch und es dauert ein paar Sekunden im besten Falle. Und du hast schon dieses positive Feedback und stehst eigentlich wieder am Anfang von diesem sehr kurzzeitigen Loop. Und dann fängst du von vorne an. Das ist dieser Game Loop, der wirklich wichtig ist und der muss passen. Da gibt es auf verschiedene Ebenen. Ich habe jetzt gerade von was ganz kurzem geredet. S zu S, min zu min. Das sind so diese Sachen, die Spieler reinzuholen. Ganz wichtig. Und da baut man natürlich drüber gewisse Sachen auf, die viel länger dauern. Sowas wie ein bestimmtes Gegenstand Set zu finden, das dauert viel länger. Oder eine Story, die über das gesamte Spiel sich praktisch bewegt, die über Stunden hinweggehen kann, wo du halt immer Progression machen kannst, irgendwelche Gegner weiterkommst und dann die Story weitererzählt wird. Da gibt es verschiedene Ebenen dann, damit du halt nicht immer in diesem kurzzeitigen bist, sondern dem ganzen auch langzeitmässig mehr Sinn gibt. Und so holt man dann die Spieler rein.",
      "start": 889212,
      "end": 1106148,
      "confidence": 0.916104,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und bei so einem age of empire, wenn der Andi schon ein großer Age of Empires Fan ist.",
      "start": 1106244,
      "end": 1110004,
      "confidence": 0.89496833,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Empire.",
      "start": 1110092,
      "end": 1110760,
      "confidence": 0.35146,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Empire, sorry. Was? Was ist da das Ziel? Weil da gibt es ja kein Ende an sich, oder?",
      "start": 1111260,
      "end": 1119506,
      "confidence": 0.9412017,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Da gibt es kein Ende, aber da ist der Loop natürlich auch du fängst an, du baust dein erstes Gebäude, baust Ressourcen ab und mit diesen Ressourcen kannst du wieder mehr Einheiten bauen. Und mit den Einheiten kannst du den Gegner besiegen, beziehungsweise wieder mehr Ressourcen abbauen, noch mehr Ressourcen abbauen, noch mehr Gebäude bauen. Und in dem Moment, wo du einmal Ressourcen abgebaut hast, mit den Ressourcen neue Gebäude oder Einheiten bauen konntest, bist du auch schon wieder durch diesen Loop durch.",
      "start": 1119578,
      "end": 1141122,
      "confidence": 0.9382289,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Also ich finde es super interessant, wie Dominik gerade über diese Spielmechanik aus einer anderen Perspektive du unterteilst diesen Loop wie bei Diablo in Minuten Loop oder Sekundenloop. Das ist ganz interessant. Und ich habe gerade noch mal gegoogelt, bei Age of Empires gibt es ein Ziel, und zwar auf der einen Seite gegnerische Völker zu besiegen. Also das bedeutet, man spielt gegeneinander. Oder es gibt auch andere Siegbedingungen, wie z.B. kannst du, glaube ich, als erstes irgendwie vier Weltwunder oder so bauen oder Reliquien nehmen. Also es gibt Spielmechaniken, dann hast du das Spiel gewonnen, ohne einen einzelnen Kampf zu führen. Also die gibt es bei age of Empires schon und die gibt es, glaube ich, eigentlich bei jedem Spiel. Auch bei Diablo kannst du, glaube ich, durch die verschiedenen Dungeons dann gehen und hast irgendwie so einen Endgegner oder sowas.",
      "start": 1141146,
      "end": 1186778,
      "confidence": 0.9268805,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Oder das ist das, was ich meinte mit verschiedenen Ebenen. Und du kannst natürlich auch dann den Leuten, vor allem bei diesen Langzeitzielen, verschiedene Möglichkeiten geben, das Spiel zu gewinnen. Civilization ist auch so ein Ding, du kannst die ganze Welt erobern, du kannst aber auch den Forschungstitel erringen, indem du vor allen anderen zum Mars fliegst oder was auch immer dann das Ziel war. Das soll verschiedene Spielertypen ansprechen, aber das sind sehr starke Langzeitstile. Ihr müsst euch vorstellen, so ein age of empires Spiel, so ein Civilization Spiel, wir reden da über zig Stunden an Spielen, bis du das Ziel erreicht hast. Und das ist das endgültige Ziel. Wenn du nicht kürzere Ziele hast, dann fangen die Leute gar nicht so zum Spielen an. Du musst irgendwas haben, wo die Spieler, weil die kommen in dein Spiel rein und die haben so eine Art, eine Vorleistung geben sie dir oder sagen, mal schauen, was das Spiel so kann und fangen dann an zu spielen. Und abhängig davon haben sie vielleicht so 10 Minuten, 15 Minuten, das ist nicht mehr oft, wo sie das Spiel einfach mal ausprobieren. Hängt davon ab, wie viel sie davon gezahlt haben, ob das ein drei Spiel ist und was auch immer. Aber letztendlich musst du sie in kürzester Zeit irgendwie in dieses Spiel hineinziehen, damit sie auch wirklich weiterspielen. Und das ist dieser kurze Game Loop. Und der muss sehr viel kürzer sein, als man eigentlich oft denkt. Das sind Sachen, die merkt man gar nicht, auch wenn das gut gemacht ist, dann hat man einfach diesen Flow, an das man ständig spielt und weiterspielen möchte. Und natürlich gibt es diese großen Ziele, auch was du gemeint hast mit Age of Empires, gegenüber sich irgendwelche Gebäude bauen. Aber das sind sehr Langzeitziele, die kommen erst dann zum Tragen, wenn du schon stundenlang gespielt hast.",
      "start": 1186794,
      "end": 1269478,
      "confidence": 0.916615,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Du hattest gerade auch schon beim Game Design oder beim Game Art die sogenannte Bibel erwähnt oder Art Bible oder wie hast du es genannt in diesem Podcast. Wir haben irgendwie so einen Hang zu Doom. Ich glaube, jeder Informatiker hat irgendwie so einen Hang zu Doom. Ich hoffe, du hast auch in irgendeiner Art und Weise einen Hang zu Doom. Wir haben auf der einen Seite schon mal eine Doom Folge gemacht, auf der anderen Seite hatten wir die Tage eine Folge zum Mainframe. Und da war die erste gibt es schon jemanden, der Doom auf dem Mainframe portieren hat? Die Antwort ist inzwischen ja. Aber da möchte ich nur kurz sagen, die Doom Art Bible habe ich gerade auch gefunden und die verlinken natürlich auch in den Shownotes. Sehr interessant. Meine Frage ist eigentlich, bei dem ganzen Game Design und Story und Loop und allem drum und dran, gibt es da nicht eigentlich einen Feature Creep? Also wie entscheidet man, wann jetzt mal genug ist? Also kannst bestimmt auch so Dungeons and Dragons und so weiter, also diese Tabletop Spiele, wo jemand eine Story erfindet und dann wird die beim Spielen irgendwie weiterentwickelt. Also ich kann mir schon vorstellen, wenn du voll in deiner Story da bist, du designst so ein Spiel und du designst den Loop und die ganzen Game Mechaniken und so weiter. Also du musst dich ja schon selbst zwingen, so jetzt ist mal gut mit der Story, jetzt bringe ich das erstmal raus, bevor ich dann irgendwie so ein Extension Pack später noch reinbringe.",
      "start": 1269534,
      "end": 1339944,
      "confidence": 0.92987776,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Da sprichst du was an, was ein großes Problem ist, vor allem für Indie Entwickler oder neue Entwickler auch selber kann mich da nicht ausnehmen, wo ich angefangen habe, dass eine große Gefahr ist, dieser feature creepy. Und das liegt einfach daran, dass man natürlich in seiner Welt irgendwann gefangen ist und immer wieder an Teilen arbeitet und wieder was dazu bauen will. Und aber vergiss das, deswegen habe ich diesen Loop erwähnt. Der Game Loop ist super wichtig, weil es einen konzentrieren lässt, was ist wirklich wichtig? Was ist mein Spiel? Auch ich kann sagen, mein Spiel ist dieser Loop. Es kann sein, dass der schlecht ist und dass der keinen Spaß macht. Das kann natürlich immer sein. Aber prinzipiell hat man immer was, wo man sich daran festhalten kann. Jegliche Verbesserungen in dem Spiel, man kann nämlich wirklich sehr viel machen, sollte immer eine Antwort auf die Frage sein, inwieweit verbessert es den Game Loop? Also wenn ich den Game Loop durchgehe komplett, wie weit wird das verbessert werden? Wenn man das macht, dann hat man so ein bisschen ein Mittel an der Hand, dass man nicht anfängt. Man macht das Spiel und dann merkt, irgendwie funktioniert es nicht, es macht keinen Spaß, irgendwie ist es nicht so richtig. Jetzt mache ich mal die Art Seite besser, ich mache mehr Sounds rein, ich mache irgendwie die Animationen hübscher oder sowas. Und am Ende des Tages ist es aber oft so, dass das alles nichts bringt, weil der Kern an sich vom Spiel, das Game Design, der Game Loop an sich nicht funktioniert. Und da kann man sehr, sehr, sehr viel Zeit verbringen und irgendwann ist man frustriert und gibt auf, weil man halt viel Zeit investiert hat, aber es wird irgendwie nichts so richtiges. Das ist was, was ein zwei Mann Teams haben, aber das kann auch im Großen passieren. Es gibt auch Entwicklungsstudios, die 1020 Leute haben und irgendwie an dem eingehen, da ist es nochmal teilweise extremer, weil die haben ab der Größe hat man dann noch Spezialisten für Art und für Sound und was auch immer. Und die machen natürlich ihr Ding, also die haben ihre Spezialisierung. Wenn die nicht angeleitet werden in die richtige Richtung, was ist jetzt wirklich wichtig für den Game Loop, dann kann das zu großen Problemen führen. Und dem gegenüber steht halt auch dieses Vordesign, was ich vorher gesagt habe, diese eher ältere Variante, dass man diesen Ringbuchhalter hat und das Spiel vordesignt. Das kann natürlich funktionieren, wenn man sehr gut ist, aber auch all diese, da gibt es z.b. den Dumont von Kalypso, die Port Royale und so die Reihe gemacht hat, die arbeiten so, aber die arbeiten, also für die ist es nicht heilig, diese Bibel, sondern die schreiben die auch ständig um. Und da ist irgendwann die Frage, macht man das und macht man es nicht? Weil wenn man sich drauf versteift, man merkt, es macht keinen Spaß und man hat unglaublich viele Twicklungsressourcen schon auf diesen kompletten Ringbuchhalter in der Implementierung gemacht. Also Technik, alles mögliche Sachen, aber das komplette Konzept wird schwierig dahinter. Dann kann man da sehr viel Geld ausgeben und sehr viel Zeit und auch Frust erzeugen. Und da ist es lieber besser, man fangt klein an. Also es gibt auch die Forschungsecke vom Game Design, die sagen, nicht mehr wie ein DIN A Zettel an Game Design schreiben, bevor man anfängt. Da ist zwar egal, wie groß die Schriftgröße ist, du kannst auch gerne kleiner werden, aber es soll wirklich nur dieser DIN a zettel sein. Und mit denen fängst du an. Und dann musst du akzeptieren, dass du so eine Wissenslücke hast, nämlich nicht weißt, ob das Spiel wirklich Spaß macht. Und kommen wir vielleicht später nochmal dazu, im Testing oder so in der QA, da wird es halt dann schwierig und man muss schauen, ob man irgendwie diese Wissenslücke füllen kann durch Tests, durch externe Tests, die einem hey, das geht in die richtige Richtung oder das macht keinen Spaß. Und dann halt aus dem Ganzen irgendwie was schließen und okay, wir probieren es anders. Und viele Spiele, die berühmt geworden sind, haben ganz anders gestartet, so wie das z.B. ein schon uraltes Freelancer Spiel, das heute immer noch hochgerühmt wird. Das Super Space shooter Sim, wie auch immer, hatte ein, zwei Entwicklungsphasen, wo es ganz anders ausgesehen hat, bevor es das geworden ist, was zum Schluss der Erfolg war. Also da hat man große Änderungen vorgenommen und so ist es halt. Deswegen macht man Prototypen. Man probiert das irgendwie mal in so einem Vertical Slice hinzukriegen und schauen, dass das wirklich gut funktioniert. Und dann kann man auf dem, in der Produktion aufbauen, daraus das finale Spiel bauen.",
      "start": 1339992,
      "end": 1566062,
      "confidence": 0.91983825,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Was ist ein Vertical Slice?",
      "start": 1566126,
      "end": 1567566,
      "confidence": 0.876104,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Der Vertical Slice ist, dass du deinen Game Loop einmal komplett durchziehst, über alles, über die Art, über Audio, über d oder d Art, je nachdem, was dein Spiel ist. Das Level mal auf ein Level aufgebaut hast, das Spaß macht, wenn es levelbasiert ist. Und natürlich technisch mal alles durch hast und im Prinzip vielleicht eine Spielerfahrung von einer halben H bieten kannst.",
      "start": 1567678,
      "end": 1588558,
      "confidence": 0.93406063,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Also im Prinzip das MVP des Game Designs. MVP heißt Minimal Value. Jetzt komme ich auch schon Viable Product.",
      "start": 1588654,
      "end": 1600010,
      "confidence": 0.8303337,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Manche Leute sagen Valuable Product, also das ist das kleinste nutzbare Produkt.",
      "start": 1601110,
      "end": 1607256,
      "confidence": 0.863905,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Jetzt hast du erwähnt, okay, man schreibt so einen Prototypen. Wenn wir jetzt mal in das ganze Programmieren hineingehen, also ich kenne noch, dass es da irgendwie Game engines gibt und Unreal und Unity sagen mir auch noch was. Und dann hört so mein Wissen auf. Also werden heutzutage eigentlich alles, was so am Markt ist, basieren die auf diesen Game Engine, auf diesen zwei? Oder wie sieht da der Markt auf? Gibt es auch Spiele, die keine Game Engine haben? Also keine von den bekannten oder eigene? Wie sieht das Ganze aus, wenn man da so losstartet eigentlich für ein Spiel oder für einen Prototypen?",
      "start": 1607448,
      "end": 1641354,
      "confidence": 0.91199577,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Es wird immer mehr fertige Game engines verwendet. Also du hast es schon erwähnt, Unity, Unreal, Godot, das sind so die drei bekanntesten. Die ersparen dir natürlich viel Eintrittshürde, weil sie dir einiges an abnehmen. Und sowas wie ein Renderer zu programmieren ist einfach viel Arbeit. Audio ist einfach viel Arbeit. Es strukturiert dir schon mal was. Du hast ein Asset Datenbank dahinter, in die du Sachen reinwerfen kannst, von denen du teilweise was benutzt, Lokalisierung und all die vielen, vielen, vielen Themen, die da drin stecken. Die gibt dir so eine Engine unter verschiedenen Lizenzbedingungen, mehr oder weniger über Nacht oder brauchst du es nur downloaden und kannst damit anfangen. Klar musst du dich einlernen in diese Engines, aber das ist wesentlich, es bringt dich wesentlich schneller weiter, wie eine Custom Engine nennt sich das dann selber zu programmieren. Das ist natürlich nach wie vor auch gibt Spiele, die das machen und auch sehr erfolgreich sind damit. Aber das ist sehr viel Vorleistung, die du da bringen musst. Und auch technisch musst du da schon auf einem anderen Level sein. Und viele wollen und auch viele erfolgreiche Spielentwickler sind eher Game Designer, die sagen, ich möchte ein Spiel machen, aber ich bin jetzt kein Entwickler. Das kann auch mal große Vorteile haben, weil sie sich eben auf das Game Design beziehen und nur so viel Technik machen, wie sie irgendwie machen können oder vielleicht noch jemanden haben, der ihnen ein bisschen hilft. Und da sind natürlich die Game engines super, weil ich auch vielleicht in Unreal kann ich mit Blueprints arbeiten, das ist so eine grafische Geschichte zu programmieren. Für uns normale Programmierer ist es eher mühsam, aber für jemanden, der nicht so gut programmieren kann, ist es natürlich super, weil du kannst dir was zusammenklicken und kannst schon mal losstarten, deine Idee zu verfolgen. Und das ist auch beim Spieldesign oder in der Spielentwicklung von großem Vorteil.",
      "start": 1641402,
      "end": 1737622,
      "confidence": 0.91815996,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und wie kann ich mir so eine Engine vorstellen? Also es ist mehr als irgendeine Lib, so klassisch aus dem Programmieren. Also das ist wirklich so ein komplettes Framework oder sogar vielleicht mehr, weil wenn du jetzt sagst, da ist eine Datenbank dahinter, eine Asset Datenbank und so weiter, es klingt schon fast wie Content Management System, oder eher Content Management System.",
      "start": 1737686,
      "end": 1758246,
      "confidence": 0.9257682,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Im Prinzip ist es das. Du hast wie ein Content Management System mit einem Renderer drauf, der natürlich flexibel ist. Du kannst dir die Sachen zusammenklicken, welche Welten du haben willst. Also auch diese, wenn du jetzt ein d Spiel machst, ein d level aus verschiedenen Elementen zusammensetzen, die machst du natürlich dann im Blender noch selber oder so, aber du kannst sie da alle zusammen konfigurieren, du kannst das Ding mal starten. Ein riesiges Ding ist natürlich, du kannst in Unity mehr oder weniger ein Bild machen, der auch auf Linux und Mac läuft, für euch beide z.B. ohne jetzt riesig zu arbeiten, dran zu müssen, dass man das irgendwie hinbekommt. Da gibt es halt einen Haufen Tools, die dir einfach dein Leben erleichtern. Und das ist schon auch ein großer Punkt von der Spieleentwicklung, ist, dass man sehr viel Tooling braucht, einfach durch diese vielen Disziplinen, die man hat. Du hast halt die ganzen d und d Leute haben alle ihre Texturen, Bilder, d Modelle, Animationen auf d Sachen, Character Modeling. Dann hast du die ganzen Sound Geschichten, die irgendwie Sound in ein Spiel einmixen wollen. Gibt es auch Middleware, schon auch was, was es in Custom engines gibt. Aber das ist ein großer Part. Und wenn du dann schnell irgendwelche Änderungen machen willst, auch für einen Game Designer, das sind ja eben, wie man vorher besprochen, nicht unbedingt welche, die auch wirklich programmieren können, sie meistens aber schon skripten oder sowas können sie schon, aber jetzt nicht sehr tief in der Materie drin sind. Wenn die mal schnell was ändern wollen, weil sie irgendwelche Werte anpassen wollen, irgendwas ausprobieren wollen, ist es auch von Vorteil, wenn du so ein Editor halt hast, wo du Sachen zusammenbauen kannst, mal schnell was ausprobieren.",
      "start": 1758398,
      "end": 1843982,
      "confidence": 0.9228815,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Wenn ich da jetzt so ein Jump Run z.B. bauen will, und ihr habt jetzt irgendeinen Charakter, der da springen können soll und links rechts bewegen, wie mache ich das dann konkret? Habe ich dann da ein Asset, das ist mein Charakter, und dann lege ich irgendwie drauf, was macht der bei einer Pfeiltaste links und rechts. Und das ist dann eine Funktion oder.",
      "start": 1844046,
      "end": 1867150,
      "confidence": 0.9503972,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ein Code, den ich schreibe, abhängig von der Game. Z.B. in Unity hat man diesen Character, ist einfach, sagen wir mal, ein Bild, nur normales Bild. Und du kannst auf dieses Bild Skripte drauflegen. Unity ist C, letztendlich ein c Script, das dieses Bild in D bewegen kann. Und z.b. die ganze Input Layer, die kriegst du auch mit. Das ist ja auch so ein Handling, wo du dann sagst, hier Taste so und so, und dann bewegst du ihn nach links, Taste so und so bewegst du ihn nach rechts, und es läuft dann über das Skript da drauf. Über Unity ist da eher so, würde man sagen, Composition, also nicht Vererbungsserien, sondern Komposition von Objekten oder von Komponenten zusammen. Da gibt es verschiedene Komponenten. Du kannst dem jetzt auch gleich mal so ein Rigid Body geben, also eine Physik Simulation, dann fällt der schon mal von oben nach unten im d Raum, wenn du eine Schwerkraft angibst.",
      "start": 1867190,
      "end": 1915562,
      "confidence": 0.90789634,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und das gibt mir dann aber schon die Engine. Also ich kann sagen, schwerkraftabhängig. Und dann wird mein Bild nach unten gezogen von meinem Charakter.",
      "start": 1915626,
      "end": 1924626,
      "confidence": 0.932756,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Genau, und fällt aus dem Screen raus, wenn da kein Boden ist. Und wenn der Boden dann Collider hat, also diese Physik engines, da gibt es ja eigene Frameworks und Libraries, die binden die aber schon ein und ist dann im Prinzip eine Komponente, die kannst du da draufziehen und dann kannst du schon mal ausprobieren, dann läuft das. Diese Iterationszyklen sind sehr kurz.",
      "start": 1924778,
      "end": 1941346,
      "confidence": 0.9419164,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Wenn ich dir jetzt so zuhöre und mal über die Spiele nachdenke, die ich früher gespielt habe, so Rollercoaster Tycoon und Roller Coaster Tycoon gilt als eins der ja schon ähnlich, würde ich sagen, fast wie Doom in der Softwareentwicklung, weil das wurde von einem Typen geschrieben in Assembly 1999. Wer das Spiel nicht kennt, du musst einen Freizeitpark aufbauen und kannst Achterbahn designen und so weiter und so fort, muss man ja schon sagen, dass das ja schon irgendwie so eine Art nerdige Meisterleistung war, oder? Weil ich habe gerade mal gegoogelt, Rollercoaster Tycoon, da gab es jetzt keine Engine, sondern wirklich relativ viel Assembly. Das ist natürlich dann schon eine harte NR. Was da früher auch gemacht wurde, oder?",
      "start": 1941538,
      "end": 1982552,
      "confidence": 0.90979683,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ja klar. Also in dem Bereich, bevor es die ganzen Game Engine gegeben hat, noch früher, also in den er Jahren, da wurde sehr gerne Semna verwendet, weil es einfach das einzige war, um so schnell zu kriegen gewisse Sachen. Da ist es hart, dann hat man später C genommen und so. Also diese Eintrittshürde war früher viel, viel höher, man musste viel mehr selber leisten und das kriegt man halt alles geschenkt durch diese Engines. Und natürlich sind die Leistungen der PCs viel besser geworden. Das heißt, man kann jetzt auch sowas wie C ist jetzt nicht so maschinennah, aber es reicht in den meisten Fällen aus.",
      "start": 1982736,
      "end": 2013738,
      "confidence": 0.9186688,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das bedeutet aber auch mit geschriebener Hardware, dass die Hardware von heutzutage viel mehr Fehler verzeiht, oder? Ich meine, man muss nicht mehr so effizient programmieren, wenn man jetzt keine hochauflösenden Grafiken dauerhaft irgendwie durchs Level bewegen müsste, sondern ich sag mal, angenommen, man wird jetzt mal Rollercoaster Tycoon, also ein d Spiel, glaube ich gewesen, nachprogrammieren. Also man muss ja bei weitem nicht mehr so performante Algorithmen nehmen wie früher, oder doch?",
      "start": 2013874,
      "end": 2037386,
      "confidence": 0.9221875,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ist ein bisschen schwierig jetzt hier, weil du Rollercoaster Tycoon ist ja eine Wirtschaftssimulation im weitesten Sinne auch. Also du hast diesen Freizeitpark, den du aufbauen musst und da sind natürlich auch die Ansprüche einfach hochgegangen. Es wird auch so vom Industriegiganten so, wenn du heutzutage sowas veröffentlichst, dann wollen die Spieler natürlich auch eine viel größere Simulation haben, mit viel mehr Details. Jeder einzelne deiner Besucher soll simuliert werden, das soll cool sein, diese Wuselfaktoren stehen. Und mit Sachen, wie du früher noch weggekommen bist, weil es vereinfacht simuliert war oder so, musst du es heute noch besser machen, weil natürlich auch andere Titel da waren. Klassisch wäre so Anno z.B. so ein Anno Titel, der ist super erfolgreich und hat diesen extremen Wuselfaktor, irgendwelche Wirtschaftsketten und was da alles so passiert. Das hat sich halt einfach über die Jahrzehnte natürlich auch weiterentwickelt und dementsprechend sind auch die Ansprüche der Spieler hochgegangen, ganz verständlicherweise. Da ist halt dann die Frage, in welche Richtung du gehst. Und das ist die Indie Entwickler, also die jetzt wirklich keine große IP haben, also große Marke wie jetzt Anno, die versuchen natürlich in einen Bereich zu gehen, da irgendwie ein bisschen eine Wirtschaftssimulation zu machen, mit so einem bestimmten unique setting point, wie man sagt, irgend so einen gewissen Twist einfach, der neu ist, damit man nicht ganz so in die extreme Optimierung rein muss. So eine Städtebau Simulation. Heute erwartet man, dass du eine Millionenstadt hochziehst, am besten jeden einzelnen simulierst, macht man natürlich nicht, aber es geht in diese Richtung viel stärker wie früher in SimCity im ersten Teil war. Es war relativ einfach simuliert, du ging natürlich auch nicht besser damals, aber die Ansprüche gehen da schon auch hoch. Aber was ich meinte mit z.B. unity, mit den Ressourcen, Unity ist so eine Plattform, wo sehr viel Mobile Games gemacht werden bis heute, weil das auch eben den Mobile Markt sehr stark abdeckt. Also ein Android Markt, kannst schnell mal ein Unity Spiel machen, das du auf die Android Games oder aufs iOS bringst und da hast du eh schon weniger Ressourcen, aber es reicht immer noch super aus, mit C Sharp da irgendwelche Spiele zu machen. Und das ist das große Ding, wo Unity halt sehr viel stark eingesetzt wird. Gibt viele dieser Nischen, wo das vollkommen ausreicht. Wenn ich jetzt hergehe und sage, Factorio ist ein anderes Spiel, das ist so eine Fabrik Simulation in d, super bekannt.",
      "start": 2037498,
      "end": 2164886,
      "confidence": 0.9145671,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Super erfolgreich, super suchtmachend.",
      "start": 2164918,
      "end": 2167814,
      "confidence": 0.8803875,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Super suchtmachend.",
      "start": 2167942,
      "end": 2168758,
      "confidence": 0.592715,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ich hab angespielt, ich hab mich gezwungen nach einer halben H aufzuhören, weil ich weiß, ich werd da reingesogen.",
      "start": 2168774,
      "end": 2174150,
      "confidence": 0.8732074,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Guter Game Loop scheinbar.",
      "start": 2174310,
      "end": 2175846,
      "confidence": 0.9239075,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, riesen guter Game Loop, super Game Loop, wirklich sehr gut gemacht, hat 98, 99 Reviewrate auf Steam, also positive Reviews, ist unglaublich gut bewertet, aber auch zu Recht. Aber eben sowas, wo du da auf deinem Bildschirm locker im Midgame schon tausende von Items durch die Gegend fahrst, auf Förderbänder und was da alles so passiert und so, das würde ich jetzt sehr stark bezweifeln, dass man das in Unity bringt, weil es einfach, das ist eine Custom Engine, das ist eigentlich C Kern mit Lua Scripting oben drüber, also schon auch eine Skriptsprache, aber vor allem um zu konfigurieren oder so. Der Kern ist aber C, da bist du irgendwann in solchen Optimierungssachen drinnen, da brauchst du sowas. Und da hilft es dann auch eine Custom Engine zu haben. Aber die meisten anderen Spiele, vor allem kleine Spiele und vor allem zum Lernen ist es super, wenn du eine Game Engine hast, weil sie dir halt schon ein bisschen Struktur bietet. Oder sie sagt, hier gibt es Physik, hier gibt es Audio, da gibt es D in den Formaten. Wenn du wirklich neu startest, dann gibt dir das so eine Form und auch eine große Community, die Unity halt programmieren kann. Du kannst dir finden im Internet drüber, da kann man extrem gut lernen, das hilft ungemein.",
      "start": 2175958,
      "end": 2244709,
      "confidence": 0.92951995,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und unreal ist ja so, zumindest mir irgendwie bekannt, immer für die ganzen Ego shooter Spiele. Haben sich die dann einfach fokussiert auf das klassische d Ego Shooting?",
      "start": 2244789,
      "end": 2254949,
      "confidence": 0.9113814,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Genau, also die sind First Person, Third Person Shooter oder halt Spiele, muss nicht unbedingt ein Shooter sein mittlerweile, aber der Unterschied bei Unreal ist, Unity ist so eine General purpose Engine. Also die ist dafür entwickelt worden, dass man Spiele machen kann und zwar möglichst breit. Das war immer die Idee, das ist auch die Konstruktion, Architektur dahinter. Während Unreal immer ein Ego shooter Engine war, den man später halt quasi frei lizenziert war, also freigekriegt hat, dass man es lizenzieren kann und so als Konkurrent zum Unity aufgebaut worden ist. Aber in seinem Kern ist es immer noch ein shooter Engine. Also wir haben damit Wirtschaftssimulation gebaut und das ist schon viel Arbeit, weil es nicht dafür gemacht ist eigentlich. Es gibt einfach gewisse Sachen, die halt für Shooter drinnen funktionieren. Beliebtes Beispiel ist, wir haben mal die Netzwerkverbindung ausprobiert, um zusammenspielen zu können in der Wirtschaftssimulation im Industriekanten. Wenn wir zu große Pakete geschickt haben, dann schmiert das Teil einfach ab, weil da ist irgendwo ein Bug drinnen. Und bei Ego shooter werden immer nur kleine, viele Pakete geschickt, weil du halt nur die Characters Updates oder Projektile oder was auch immer, also immer kleine Updates, viele davon aber kleine, wenn du das einfach zu hoch aufschraubst, dann fliegt halt irgendwo ein Bug und das ganze crasht dann halt, weil es halt ein Anwendungsfall ist, den ich nicht haben und dementsprechend nie gefixt haben. Das ist eine Kleinigkeit, kann man natürlich dann anders lösen, aber das ist so relativ repräsentativ für das, wenn du ein Spiel hast, das sehr in diese Richtung geht, also First, Third Person Shooter oder Survival oder irgendwas, was aus dieser Sicht funktioniert, dann ist es sicher eine gute Engine, die dir sehr viel bietet. Aber mit seinem Kern ist es nicht sehr flexibel, was andere Sachen angeht, aber hat halt natürlich den besten Renderer, einfach von der Performance her visuell, weil das halt immer ein großer Punkt war bei diesen Spielen, dass du immer super aussiehst, die visuelle Qualität ist sehr hoch und haben auch unglaubliche technische Klimmzüge drinnen, um das zu gewährleisten. Aber wenn du irgendwie im Internet nachschauen willst, irgendwelche Probleme, gibt ganz wenig Sachen, was du googeln kannst über Unreal Engine. Wenn du es mit Unity vergleichst, bist du meistens sehr ausgeliefert dem, dass du halt irgendwo was findest, vielleicht uralt oder die Unreal Erklärung ist halt immer, du hast den gesamten Source Code und das sind halt deine fast 2 Millionen Zeilen Code. Viel Spaß. Damit suchst du halt dann die Lösung selber raus. Du kannst das ganze Ding neu bilden und so weiter, das kannst du alles machen, Custom Builds machen, das klingt alles ganz cool, aber bei der Menge an Codezeilen und du möchtest es jetzt ja auch irgendwie stabil haben, ist dann schon eine eigene Herausforderung.",
      "start": 2255109,
      "end": 2399808,
      "confidence": 0.90939313,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Moment, jetzt sagst du schon, okay, da gibt es halt super viele Codezeilen und die Engine, wenn ich dir so zuhöre und überlegen würde, okay, wie starte ich denn jetzt ein Spiel? Dann sagst du, okay, eigentlich kommt man um eine dieser Game engines nicht mehr drumherum, weil die bieten dir ziemlich viel Tooling. Jetzt frage ich mich natürlich auf der anderen Seite, was übernehmen sie denn nicht? Also was sind die Bits und Pieces, die man immer wieder neu entwickeln muss? Keine Ahnung, geben die mir ein komplettes Framework, z.B. um Multiplayer im Internet zu gewährleisten? Also Beispiel Cross Kommunikation zwischen Spielen, geben die mir das Tooling, um mich komplett im Steam Netzwerk da irgendwie einzubetten oder ähnliches?",
      "start": 2399904,
      "end": 2439080,
      "confidence": 0.9135162,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Genau, haben alle ihre eigenen Lösungen. Es ist nicht nur engine spezifisch, weil du hast vorher gerade angesprochen, Steam hat natürlich sein eigenes Backend, auch multiplayer technisch, wenn man Freunde findet und so weiter. Das heißt, da musste ich ja die Steam Sache anbinden. Aber hier fällt dir natürlich ein bisschen leichter, wenn du ein Unity oder sowas hast, weil du bist ja nicht der erste, der es macht. Also deswegen hast du da entweder irgendwelche Asset Packsachen, du kannst zumindest im Internet sehr viel googeln, wie das genau funktioniert, was die Probleme sind. Android ist genau das gleiche, da gibt es halt den Epic Store und die haben hier einen Epic Multiplayer Service und so weiter, den du anbindest, das funktioniert da hast halt dann oft die Probleme, ja, was passiert jetzt, wenn einer auf Steam dein Spiel spielt, aber mit jemandem von Epic zusammen, der aus dem Epic Store gekauft hat, dieses Crossplay?",
      "start": 2439160,
      "end": 2483112,
      "confidence": 0.91143465,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ja, ich denke da grad viel komplexer, weil das, was ich jetzt so mitbekommen hab, ist, dass du jetzt teilweise auch auf der Xbox ein Spiel haben kannst, auf dem Personal Computer und noch auf der PlayStation. Und die spielen dann zusammen. Der eine sitzt am Schreibtisch am Computer, der nächste sitzt dann irgendwie im Controller auf der PlayStation. Also das ist ja nicht nur Netzwerk oder ich sag mal, Ecosystem technisch, sondern auch hardwaretechnisch. Also es ist ja komplett andere Welten, oder?",
      "start": 2483176,
      "end": 2507368,
      "confidence": 0.9318346,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Warum ist das überhaupt ein Problem? Weil das Spiel ist ja dasselbe, oder? Ist ja egal, ob das auf einer Xbox oder am PC läuft, weil wenn der Charakter sich um ein paar Pixel bewegt, bewegt er sich überall um ein paar Pixel.",
      "start": 2507424,
      "end": 2517996,
      "confidence": 0.91850257,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, aber z.b. auf der PlayStation läuft kein Steam, da hast du kein Steam backend, das gibt es halt nicht. Und die haben halt dann ihr eigenes Backend und da brauchst du quasi irgendeine Schicht, die beides ineinander überführt oder verbindet.",
      "start": 2518108,
      "end": 2530412,
      "confidence": 0.90291023,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Da kann ich mir vorstellen, dass sowas noch nicht wirklich open source ist oder frei verfügbar, weil das ist ja, ist schon wirklich ein unique selling point oder unique selling proposition, wenn du wirklich, ich sag mal, FIFA jetzt hast, läuft über Steam, weiß ich nicht, glaube ich zwar nicht, aber PlayStation auf Xbox. Also hat ja schon erhöhteren Spielspaß und auch eine erhöhtere, ich sag mal, Anzahl an möglichen Spielern, oder?",
      "start": 2530476,
      "end": 2552774,
      "confidence": 0.93347305,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ja, klar, aber nur wenn es dein Hauptpunkt ist. Wenn du jetzt z.B. sowas machst wie Rollercoaster Tycoon, das ist ein Singleplayer Spiel, da kannst du vielleicht einen Koop Modus einbauen, weil es immer ein guter Verkaufspunkt ist. Leute wollen gern zusammenspielen, machen dann praktisch nicht, aber es ist so eine Sache, die man schon liefern sollte. Aber da gehst du das, dann ist es halt wirklich nur in einer Plattform.",
      "start": 2552862,
      "end": 2573008,
      "confidence": 0.8988121,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Jetzt hast du kurz erwähnt, Unreal ist Open Source, oder?",
      "start": 2573184,
      "end": 2575840,
      "confidence": 0.911175,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Richtig, Unreal ist, Naja, Open Source. Du hast halt, kriegst Zugriff auf den Source Code und da gibt es natürlich Lizenzbedingungen dahinter.",
      "start": 2575880,
      "end": 2582304,
      "confidence": 0.9281559,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und Unity ist nicht Open Source.",
      "start": 2582432,
      "end": 2584672,
      "confidence": 0.92257166,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Nein, Unity ist der Kern, closed und obendrauf. Aber dadurch, dass es so flexibel gebaut ist, hast du relativ wenig Probleme damit, weil es von Anfang an so erdacht worden ist, dass du viel konfigurieren kannst und Sachen selber bauen kannst. Auch diese, z.B. der Renderer an sich, da gibt es scriptable render pipeline, dass du sagen kannst, wie der Renderer an sich funktioniert, welche Stages der macht und so. Du hast auch überall Eingriffsmöglichkeiten, das liegt am Design, aber der eigentliche Kern ist C und der ist Closed Source.",
      "start": 2584736,
      "end": 2609694,
      "confidence": 0.944679,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und wie ist das allgemein mit Open Source? Also ist es in der Spieleszene üblich oder gibt es Open Source oder ist es eher eine Ausnahme? Oder kann ich da, wenn ich jetzt irgendwas suche für irgendeine spezielle Physik Engine oder irgendwelche Eigenschaften, finde ich da dann so Open Source Libs oder muss ich da wirklich eigentlich alles selber machen oder kaufen?",
      "start": 2609742,
      "end": 2628652,
      "confidence": 0.88388854,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Vieles lizenziert, klassisch Physik wäre z.B. havoc, ist die ganz klassische Sache, von Harvard, glaube ich sogar ursprünglich entwickelt. Ist natürlich eine lizenzierte Middleware Physik Engine. Gibt viele Sachen, die frei sind, Nvidia Physics oder sowas. Dann gibt es Open Source Varianten, wenn du bei Rust z.b. gibt es Rapier, das ist so ein Physik Engine dort. Und es gibt schon einiges an open Source gibt es, ich glaube, die ist Open Source, da bin ich mir nicht ganz sicher. Relativ häufig genutzte Engine, schon ein bisschen älter, aber ja, es ist so ein bunter Mix. Also die Gaming Branche oder die Entwicklungsbranche im Gaming Bereich ist, du nimmst Open Source her, wenn es gut ist. Z.B. auch Splendor ist mittlerweile, wird immer mehr zum Standard tatsächlich. Aber ja, es ist immer noch viel Middleware dabei, für die du zahlst, also schaust etwas dich weiterbringen.",
      "start": 2628796,
      "end": 2679732,
      "confidence": 0.90322983,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und unreal ist jetzt Open Source, also du hast Zugriff auf den Code, aber musst trotzdem lizenzieren, habe ich das richtig verstanden?",
      "start": 2679826,
      "end": 2686928,
      "confidence": 0.9466209,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, genau.",
      "start": 2686944,
      "end": 2687632,
      "confidence": 0.91293,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Also unreal, es kostet trotzdem noch Geld, aber du hast halt den Zugriff auf den Source.",
      "start": 2687696,
      "end": 2692752,
      "confidence": 0.9598075,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Du hast den Zugriff und du darfst es selber bilden.",
      "start": 2692816,
      "end": 2694816,
      "confidence": 0.954578,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und damit wir das noch abschließen, Godot, wie schaut es bei denen aus?",
      "start": 2694928,
      "end": 2698528,
      "confidence": 0.9049292,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Genau, Godot kommt immer stärker. Das ist eher was, was für Unity ein Problem vielleicht wird in Zukunft im positiven Sinne für uns Spieleentwickler, für Unity vielleicht eher negativ. Sie sind sehr stark im d Markt gewesen, komplett open source. Ist auch so eine Engine, mit der man vielleicht ganz gut anfangen kann, wenn man sich für Spielentwicklung interessiert, weil die haben auch ganz coole Lernmaterialien und sowas. Also kann man auch über Game Design viel lernen und kann man sich z.B. irgendwie einen Algorithmus anschauen, irgendeine Technik, die beim Rendering oder was verwendet wird. Und die erklären dir den relativ gut im Detail und sagen dir aber auch die Negativpunkte, was bei kommerziell bei Unity wird. Mit Unity in Unreal bashen sich immer, wer am besten ausschaut, wobei Unreal da meistens die Nase vorne hat, aber es ist immer so ein leichter Grafik Benchmark Wettbewerb und da werden natürlich immer die tollen Features und neuen Features rausgekehrt. Welche Nachteile und Anwendungsgebiete die haben, da sind sie immer sehr spärlich in Information, weil es eher negativ vielleicht ist oder man merkt, dass es halt nur ein kleines Ding ist. Und Godot hat jetzt natürlich nicht das Problem. Und da kann man da relativ viel nachlesen. Keine Ahnung, welcher Schattengenerierungs algorithmus gerade der beste ist und welche Seite, welche Nachteile. Da kann man sehr viel über über die Techniken lernen im Hintergrund finde ich. Und das ist das schöne an Godot, im d Bereich ist es auch mittlerweile, glaube ich, sehr stark Konkurrenz zu Unity, wenn man ein d Spiel macht im d Bereich. Ja, da holen sie halt gerade auf.",
      "start": 2698664,
      "end": 2782298,
      "confidence": 0.9231106,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und die sind wirklich gratis auch. Die sind richtig open Szene von richtig.",
      "start": 2782354,
      "end": 2786510,
      "confidence": 0.9116254,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ich hab grad nachgeschaut, mit License komplett auf GitHub, alles offen. Und Achtung, ein Mythos, es wird go do geschrieben. Es hat nichts mit der Sprache go zu tun, es wird go do ausgesprochen und es ist ein C geschrieben. Also es ist keine Game Engine auf der Programmiersprache Go, es ist eine C programmierte Game Engine.",
      "start": 2787410,
      "end": 2806814,
      "confidence": 0.9564635,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Genau, die kommen immer mehr und die machen das auch wirklich gut. Habe ich auch letztes Jahr in der Gamescom gesehen oder vorletztes Jahr an der Gamescom. Siehst du auf der Indie Boost Seite, wo die ganzen Indie Spiele sind, wird es auch sehr häufig verwendet. Da gibt es auch eine Geschichte dazu eingetroffen, die da ihr Indie Spiel aufgebaut haben im Aufbau. Und die hatten da ihren Laptop und haben das Spiel aufgebaut und sind dann irgendwie auf den Kaffee gegangen und wie das so immer ist, auf so Messen hat irgendjemand den Laptop geklaut, war der weg. Das war ihr einziger, wo halt ihr Spiel drauf war und was machen sie jetzt und so. Also hatten halt keine Hardware mehr. Dann haben sie irgendwo einen Laptop her geholt noch und haben das Spiel drauf installiert und dann ging das erst nicht, weil andere Hardware und das war natürlich ein Prototyp und so. Aber man kann mit Godot relativ, wenn du das Projekt selber da hast, weil du auch alles an Source und so da hast, das relativ gut eingekapselt, konnten sie haben es dann vor Ort schnelles hingehackt, ohne jetzt große Entwicklungsressourcen zu haben und haben das dort gestartet und waren dann super happy, um das herzuzeigen. Man möchte es selber herzeigen können. Das geht halt wie ein Godot. Wenn du mit Unreal da kommst, ohne großen Entwicklungs PC, hast du ein Problem, musst es bilden und so weiter. Das geht alles viel, viel langsamer. Das ist halt das Godot.",
      "start": 2806862,
      "end": 2874310,
      "confidence": 0.90560186,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Moment, das verstehe ich nicht. Ihr habt es doch in meinem Git, in meinem Source Control. Lad das einmal runter, drück oder tipp ein Make und dann habe ich das Spiel, oder?",
      "start": 2874470,
      "end": 2883174,
      "confidence": 0.92015,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, aber die Unreal Entwicklungsmaschine ist 64 gb Speicher, da fängt es an. Ich habe 128 dann benutzt, weil ich mal profilen wollte. Das ist schon sowas, was man braucht. Und klar, wenn du eine Building Pipeline hast, bei komplexeren Spielen oder so, also wenn du da niemand, weil die hatten ja niemand im Büro, oder es ist jetzt nicht so ein großes Team gewesen, dass du im Büro jemand anrufen hey, bild mir das jetzt noch mal schnell und schieb es uns irgendwie rüber, machen wir einen Download oder so. Hast ja auch kein schlechtes Internet, war auch noch, bist in der Messe, hast letztendlich gerade irgendwie GB ziehen kann. Irgendjemand hatte noch diesen USB Stick dabei und dann haben sie es halt da irgendwie drauf installiert. Ich meine, klar, es sind kleinere Spiele, es ist prinzipiell leichter, funktioniert bei Godot einfach gut. Das ist alles schön self contained, ist alles auf einfach gemacht und ist tatsächlich die Engine, die ich am wenigsten verwendet habe. Muss ich auch dazu sagen, mal ein bisschen reingespielt, aber es ist ein großer Konkurrent für Unity. Für Unreal sehe ich es nicht so.",
      "start": 2883262,
      "end": 2937876,
      "confidence": 0.8928037,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Aber der Wolfram hat ein spannendes Feld angesprochen, und zwar Source Control. Und du hast ja auch schon erwähnt, dass die ganze Spieleentwicklung, ich sag mal jetzt nicht nur Source Code ist, sondern auch ziemlich viel Texturen und Bilder und Audio und allem drum und dran. Und ich denke da immer nur an ganz große binary Dateien. Und meine Erfahrung ist, git und große Dateien würde man sagen igit. Also das funktioniert halt nur mäßig. Natürlich gibt es dieses git lfs, large File Storage, Last File System, blablabla. Punkt ist, wenn man das immer klonen möchte, dann muss man das immer irgendwie compact, neu und allem drum und dran. Kurzum, IT macht nur Probleme und Git ist nicht für große Dateien gebaut.",
      "start": 2937948,
      "end": 2980008,
      "confidence": 0.9049001,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Richtig.",
      "start": 2980184,
      "end": 2980840,
      "confidence": 0.87501,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Wie geht ihr bei der Spielentwicklung damit um?",
      "start": 2980920,
      "end": 2982680,
      "confidence": 0.98126376,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Nicht git benutzen oder nicht nur git? Du hast es schon angesprochen, das ist das große Problem. Es kommt noch ein Problem dazu beim LFS auch, dass du diese Assets vor allem in größeren Teams auch gerne locken musst. Binary Assets. Gibt auch so spezial Case, z.B. unreal verwendet auch bei Text Assets teilweise nicht Text, sondern macht daraus ein binary Asset oder sowas. Und dann kannst du das Ding auch nicht mehr merchen. Und dann hast du auch wieder das ganze Problem, dass bei Andrea ganz extrem sinnloserweise teilweise die Lösung dazu ist, eben Git nicht zu benutzen. Klassisch wird eine spielebranche Perforce benutzt, relativ teure, klassisches Produkt einfach. Ist halt so ein professionelles Tool mit allen positiven wie negativen Seiten. Also positiv im Sinne von hat natürlich viele Features, wird auch bei Triple A Produktion benutzt, du kannst alles mögliche konfigurieren, aber ist halt auch sowas, wo du wirklich wissen musst, wie du das Ding aufsetzt. Das ist nichts, was du irgendwie installierst und schon mal schnell benutzt, muss man konfigurieren und am besten hast du jemanden, der sich damit auskennt oder brauchst relativ lange, um es rauszubringen und es ist nicht ganz billig und eben nicht sehr zugänglich, aber es macht seinen Job gut, wenn man es aufsetzen kann. Dann gibt es Plastic oder mittlerweile heißt Unity DevOps Version Control oder sowas, weil es Unity aufgekauft hat. Früher war es mal so eine billigere Alternative, die aber sehr, sehr viel zugänglicher war mit weniger Features, aber die haben jetzt ganz gut aufgeholt, auch durch den Kauf mit Unity und Unity verwendet es eben für seine eigenen Projekte bzw. Für seine Kunden, das den bereitzustellen. Das ist auch so eine Version Control Software, die halt mit großen Files sehr gut umgehen kann. Eine gute Alternative dazu, die haben wir in unserem letzten Projekt benutzt und wir waren eigentlich relativ zufrieden damit. Also gibt immer ein paar Sachen, die irgendwie schwierig sind, aber im Großen und Ganzen hat es gut gepasst. Vor allem wir haben viel remote gearbeitet und da siehst du erstmal dann, wie viel mit Download zumindest die Artists mal wieder irgendwelche großen Sachen hochladen, dass das alles gut funktioniert und dass hat ganz gut geklappt. Dann eben git. Git hat auch das Problem, neben den großen Dateien, dass du meistens ja dein Repository komplett bei dir hast und das hat erstens rechtliche Gründe, wenn es größer wird, wirst du nicht unbedingt, dass jeder deiner Mitarbeiter den kompletten Zugriff auf dein Projekt hat. Das kommt drauf an, je größer du wirst, desto schwieriger wird es rechtlich, aber natürlich auch von der Größe her. Also du bist locker bei so größeren Produktionen im hohen TB Bereich an Assets, weil nicht unbedingt alles drinnen auch wirklich in deinem Projekt in einem Spiel verwendest. Aber da sind ja auch alle möglichen Zwischenassets drinnen, die irgendwie noch runterskaliert worden sind oder als Ausgangsbasis für andere Sachen dienen. Die liegen da oft in diesen Projekten drinnen.",
      "start": 2982720,
      "end": 3138674,
      "confidence": 0.9108533,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ist das jetzt aber schon gerechnet mit History oder ohne History?",
      "start": 3138722,
      "end": 3142290,
      "confidence": 0.91847456,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Naja, mit History, ich glaube the Witcher, wenn wir mal einen da hatten, Polen, das ist ein großes Sandbox Spiel aus Polen, CD Projekt, die hatten Repository Size von fast ein Petabyte. Also das speicherst natürlich nicht mehr lokal, du musst dir ganz genau überlegen, was du davon brauchst. Das ist halt einfach die Gaming Branche, vor allem wenn es dann Richtung AAA Triple A Produktion hochgeht. Mit sehr viel Content, je nachdem was für ein Genre du bist, da brauchst du irgendeine Lösung dafür. Und das machen die zwei Sachen ganz gut, beziehungsweise die haben natürlich wahrscheinlich perforce benutzt, gehe ich mal davon aus.",
      "start": 3142370,
      "end": 3175758,
      "confidence": 0.90307724,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und dieses Locking, wie funktioniert das? Das heißt, du lockst da dann wirklich irgendwelche Assets, die dann niemand mehr bearbeiten.",
      "start": 3175814,
      "end": 3182496,
      "confidence": 0.882661,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Darf, eben weil du sonst Merch Probleme hast. Also wir haben schon klassisch Branchen gearbeitet, Feature Branches, Tickets, jedes Ticket ist ein Branch und die dann rein gemerged, auch über Merch Bots und so. Und das Locking ist zwar immer, was natürlich alle Leute nervt, warum darf ich das Ding jetzt nicht benutzen und so, aber wir hatten z.B. es gibt so Sachen in Unreal UI, in Unreal ist auch wieder Binary Files, das heißt, wenn irgendjemand an UI an der falschen Stelle was dreht, auch wenn die zerlegt ist, ist ja nicht nur ein File, mehrere Files, was macht und dann kannst du es nicht gescheit mergen mit dem anderen, dann ist die Arbeit mal wieder verloren. Und da ist halt wichtig, dass du lockst, dass der zumindest das Feedback mitbekommt, oh, ich kann das jetzt gar nicht bearbeiten. Bei kleineren Teams, wir waren 10 1020 Mann Team, dann siehst du auch, wer es gelockt hat, dann kannst du mit dem reden und dann kannst du dich abstimmen. Also ist viel besser, auch wenn es ein bisschen nervig ist, als wenn dann zum Schluss jemand drauf kommt, ich kann das gar nicht reinbringen und ich kann es nicht mehr merchen. Und die Artists haben das natürlich auch das Problem, klar gibt es über Leads und schaut natürlich darauf, dass die nicht unbedingt sich sofort auf die Füße treten in ihren Assets, aber auch da gibt es natürlich Assets, die geshared werden zwischen verschiedenen Sachen, wo man vielleicht nicht daran denkt, dass die jetzt zwei Leute gleichzeitig irgendwie ändern oder verwenden wollen. Und da hilft es halt auch. Und deswegen braucht man dieses Locking.",
      "start": 3182528,
      "end": 3250608,
      "confidence": 0.91238445,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und weil wir gerade bei Assets sind, wie funktioniert da die Lokalisierung? Also werden dann alle Assets irgendwie in 20 verschiedenen Sprachen nochmal gespeichert, wenn da jetzt, keine Ahnung, irgendein Buchtitel auf dem Bild dann in der jeweiligen Sprache ist, wird das dann alles nochmal neu gerendert und ich habe dann 40 Versionen von einem.",
      "start": 3250704,
      "end": 3269774,
      "confidence": 0.89020944,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Genau, also Lokalisierung ist ein großes Thema, natürlich ein wichtiges Thema, um den Markt zu erweitern, aber letztendlich ist es genauso, wie du sagst, gibt natürlich eher einfache Anführungszeichen, Textlokalisierung, wo du Po File hast oder so, kennt man ja wirklich so ein Austauschfile, wo du die ganzen Texte hast, in verschiedene Sprachen lokalisiert. Aber bei den Assets gibt es das so? Genau, gibt es für jede Sprache, für jeden Länder key gibt es dann eigene Bilder. Z.B. oder gibt so diese Geschichte auch von the Witcher, da kommt das vor vom Lokalisierungsteam. Sehr lustig, die haben später für den arabischen Raum synchronisiert oder lokalisiert, kann man sich vorstellen, in the Witcher kommt sehr viel nackte Haut vor. Das ist natürlich nicht so ganz so leicht im arabischen Raum. Und da gibt es z.B. eine Anfangssequenz, wo irgendeine Frau auf der Couch liegt und keine Hose an hat. Für europäische Verhältnisse sieht man nicht so viel, aber halt praktisch nackte Beine zu sehen sind. Und das ist natürlich ein absolutes no Go im arabischen Bereich. Und dann musst du z.b. das d Modell, also es geht nicht nur um Bilder, sondern wirklich das d Modell anpassen in der Animation. Das heißt, die haben dann kommt dann der Artist, der zieht dir dann eine Hose an und dann gibt es eine eigene lokalisierte Version für das, damit die Hose angezogen wird. Und dann zwei Tage später ruft er, bost jemand aus dem japanischen Raum an für die lokalisierte Version, der die gleiche Version hat. Und er, hey, die hat jetzt eine Hose an. Das geht ja bei uns gar nicht, weil Japan und nackte Haut und so weiter, die haben natürlich komplett andere, konträre Einstellungen. Das muss so sein, wie es war. Und dann wird er wieder gesplittet. Da gibt es einen Bereich für Japan, einen Bereich für arabischen Raum und so weiter. Und so kannst du dich dann dadurch hangeln.",
      "start": 3269952,
      "end": 3365034,
      "confidence": 0.9317456,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das ist schon recht lustig anzuhören eigentlich. Denn im Web hat man ja ähnliche Herausforderungen. Also Text von rechts nach links, links nach rechts und so weiter. Also es ist wirklich faszinierend, dass sich das Problem von Lokalisierung und auch von, ich sag mal, Kulturen, also es ist ja kein Problem mit Kulturen, sondern die Herausforderung eigentlich, das auf die Kultur anzupassen. Es genauso wie mit Farben. Ich glaube, im asiatischen Bereich gilt Rot nicht als Warnfarbe, wie bei uns im europäischen Bereich. Und das muss dann teilweise auch umgedreht werden. Also was ich damit sagen möchte, es ist total spannend, dass diese Herausforderung überall existiert. Und ja auch bei Spielen. Ich meine, ich kenne das von der Indizierung. Ich meine, Deutschland ist sehr stark im Spiel indizieren mit Köpfe abhacken und Blut und so was war das ja relativ viel früher. Da hat man ja so auch speziellere Versionen für Deutschland und so weiter.",
      "start": 3365082,
      "end": 3417358,
      "confidence": 0.9284746,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Das war der Hauptgrund, warum der Dominik ausgewandert ist, von Deutschland nach Österreich gekommen.",
      "start": 3417534,
      "end": 3421374,
      "confidence": 0.98581284,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ist, nur wegen den Torrent Netzwerken aus der Zeit. Die waren ja auch in Österreich wesentlich freier. Nein, die Lokalisierung eben. Es ist einfach auch ein großer Geldpunkt, oder? Weil wenn du erst rechtlich kannst du Ärger kriegen, aber viel schlimmer ist, wenn dein Release oder dein Bild abgedreht wird in einem gewissen Land und es gar nicht verkaufen kannst, kann ja auch mal ein Bug passieren oder so, und dann hast du auch gleich Mordsprobleme damit. Sondern es gibt halt unglaublich viele Details, auf die man da achten muss. Du hast die Initiierung angesprochen, mittlerweile ist es ein bisschen leichter geworden. Früher war da kein Hakenkreuz, durftest er gar nicht haben. Mittlerweile gibt es diesen Paragraphen, der dafür auch sorgt, dass z.B. indiana Jones Hakenkreuze zeigen darf, der Film, weil es halt in einem gewissen Kontext gesehen wird. Und dieser Paragraph war lange Zeit nicht anwendbar auf Spiele, mittlerweile schon. Deswegen hat der neueste Indiana Jones Teil, der jetzt gerade rausgekommen ist, ich glaube der große Kreis heißt er, da darfst du haken, Kreuz, das ist ein Hakenkreuz drinnen. Insofern hat es sich ein bisschen geändert. Aber ja, es gibt diese Kulturanpassungen. Es gibt auch z.B. im chinesischen Markt, habe ich auch ein Freund von mir hat ein bisschen was darüber erzählt, die hat ein Szenario, das in China spielt oder in diese Richtung. Und wenn du z.B. irgendwie mit der Taiwan Insel daherkommst und da irgendwie geschichtlich vielleicht denkst, ein nettes Szenario gemacht hast, dann kann das halt sein, dass du es da einfach abgeschmettert. Das geht ja gar nicht. Kannst du vielleicht teilweise ganze Szenarien, ganze Levels, musst du dann rausgehen, überlegen, was du tust, mal, dass du es irgendwie ersetzen kannst.",
      "start": 3421422,
      "end": 3504332,
      "confidence": 0.9068927,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Wenn wir mal ein bisschen über Spiele spielen sprechen, also kurzum, das testen eigentlich, also das nenne ich als Spiele spielen. Früher habe ich mir als Kind immer gedacht, geil, ich spiele so viele Spiele, dann werde ich doch vom Beruf Spieletester, dann kann ich das den ganzen Tag machen. In der Softwareentwicklung ist es ja wie folgt, anfänglich hat man noch ein Formular programmiert und das hat man dann die ganze Zeit durchgeklickt. Und bei Mehrstep Formularen war das sehr zeitintensiv und irgendwann hat man die Automatisierung gefunden und dann hat man sich so Skripte geschrieben, die dann die Multistep Formulare automatisch durchtesten. Meine Frage ist, wie werden eigentlich Spiele getestet? Gibt es da auch Automatismen jetzt wie Selenium oder Playwright oder wieso? Also gibt es da irgendwas automatisiertes oder muss man da konstant, oh, ich lade mir jetzt wieder das Spiel runter, ich kompiliere das jetzt, ich starte das jetzt und klick mich da komplett durch? Also es ist ein zeitaufwendiger Prozess.",
      "start": 3504396,
      "end": 3554408,
      "confidence": 0.91635203,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ist es ja. Also auch da ganz genrespezifisch. Wir haben vorher über Factorio geredet, die machen sehr viel Autotesting, weil es einfach so komplex ist, so eine ganze Fabrik und die ganzen Abhängigkeiten ständig stabil zu halten, das könntest du gar nicht. Es wäre manuell testbar, wäre sehr, sehr schwierig. Die haben sehr große Testsets, in dem sie, gibt es auch ein nettes YouTube Video, vielleicht finden wir das noch irgendwo, kann man vielleicht noch verlinken, wo die ganzen Tests mal durchlaufen, schaut sehr, sehr lustig aus. Also wo es eine komplexe Simulation gibt, eben wie Wirtschaftssimulation oder was auch immer simuliert wird, dann macht das natürlich Sinn. Generell ist natürlich so, es ist so ein bisschen gestaged, du fängst an, irgendein Feature zu implementieren, irgendwas zu ändern. Klar, der tech Lead, wenn es den dann gibt oder man selber implementiert wird, mal schauen, wenn sie bei der Abnahme schauen, ist das überhaupt das, was eigentlich auf dem Ticket gestanden ist, soweit es die Game Designer oder der Game Designer sich gewünscht hat, geht es in die richtige Richtung, ist es natürlich technisch richtig implementiert? Das ist das, was natürlich da wichtig ist. Und dann geht es weiter an den Game Designer, der meistens auch QA macht, vor allem bei den kleineren Sachen, weil der weiß ja, wohin er will und der wird es testen und er muss es auch deswegen testen, nicht nur um zu sehen, ob das auch das ist, was er haben will, sondern auch, weil er meistens sehr iterativ tätig ist und dann schaut, ah, okay, das funktioniert nicht, ich muss von dem aus wieder weiterarbeiten. Und letztlich auch dem Ziel ein Feedback gibt, ob das so korrekt ist, wie es ist. Dann gibt es neben dem oft, wenn es ein bisschen größer wird, eigene QA Tester. Das ist das, was du, Andy, beschrieben hast vorher, warum Spiele testen, die wirklich nur Spiele testen? Gibt es coole Leute, die wirklich diese Spiele sehr, sehr gerne spielen, aber auch auf eine Art und Weise spielen, das muss man schon auch mögen. Also die machen nebenbei ein Excel Sheet, die haben keine Ahnung vom Game Design, sie haben jetzt nicht wirklich das Design da, wie es erdacht ist, sondern die bei Wirtschaftssimulationen schreiben sich in einem excel Sheet mit, wie viel Geld sie gemacht haben, wann, wie viel sie Geld gemacht haben, suchen Exploits, also so Sachen, die, um vielleicht in dem Fall sehr viel Geld zu verdienen, obwohl es gar nicht beabsichtigt ist, dass man viel zu schnell zu viel Geld verdient. Solche Sachen, die wirklich das Spiel von der Game Design Seite versuchen, irgendwie kaputt zu machen oder auch einfach zu sagen, es passt gut, es ist auch wichtig und je größer das Projekt wird, desto wichtiger werden die Leute, weil es auch die sind, die mit einem gewissen Abstand zum Projekt dann halt noch sagen können, OK, es läuft oder es läuft nicht.",
      "start": 3554504,
      "end": 3689952,
      "confidence": 0.9227108,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das sind dann aber auch externe Leute, die man einfach zukauft sozusagen.",
      "start": 3690056,
      "end": 3693968,
      "confidence": 0.9276,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Das ist nochmal die Stufe kommt danach. Das sind meistens Koala sind oft noch intern bei größeren Gruppen, die intern arbeiten oder zumindest beim Publisher oder so angestellt sind, für dein Projekt mal viele Stunden zu machen. Und dann gibt es obendrauf, weil natürlich die alle zu viel Kontakt irgendwann haben mit dem Spiel und das zu oft gespielt haben und nicht mehr einschätzen können, wie z.B. die ersten 5 Minuten von deinem Spiel sind, die sehr wichtig sind, kommt da rein, ist es irgendwie chaotisch, ist die UI nicht okay oder was auch immer. Solche Sachen, die man einfach nicht mehr sieht, wenn man es tausendmal gespielt hat. Und dann gibt es diese Zielgruppentester und da gibt es auch so eine Geschichte Dienstleister gehabt, den kann man anstellen, da kann man sagen, das sind die Zielgruppe, die suchen Leute aus, die haben ein großes Portfolio und die fangen dann das Spiel, schickt man das Spiel und die fangen dann an, dieses Spiel zu spielen. Das ist super wertvoll, weil die werden gefilmt, also die filmen sich selber beim Spielen. Du siehst quasi denen ins Gesicht, was super wichtig ist, um zu sehen, ob die verwirrt sind, ob sie Spaß haben, was auch immer, Emotionen rauszulesen, die kommentieren das auch ein bisschen mit und das wird auch transkribiert nebenbei, dass du halt ein bisschen suchen kannst und sage ich mal gemacht beim Industriekanten und dann schaust du halt so drüber und natürlich am Anfang habe ich mir angeschaut, wie weit Studentin oder so, die es gespielt hat, der Anfang gepasst hat und dann hat sie dann ganz gut durchgespielt und dann schaust du halt so über dieses Transkript rechts und schaust du drüber, was so gesagt worden ist und irgendwo steht da halt irgendwie so ein Autsch irgendwie ganz laut drinnen und denkst oje, was ist da passiert? Ist das Spiel abgeschmiert oder so und springst dann dahin, siehst du da die mit Schmerz verzerrtem Gesicht vor dem Monitor sitzen, weil sich ja gerade mit dem Fuß angehauen hat. Es hat also nichts mit dem Spiel zu tun gehabt, die lustigen bei Effekte, die du aus diesem Medium hast. Aber es ist halt super wertvoll und es ist auch sehr motivierend, weil Leute zum ersten Mal auch wirklich Spaß haben. Siehst, das sind ja Leute, die es noch nie vorher gespielt haben, die es nicht professionell machen und wenn gewisse Sachen funktionieren, ist es natürlich toll auf der einen Seite, weil du natürlich ein Spiel machst, damit Leute Spaß haben und auf der anderen Seite ist es eine unglaubliche Folter, wenn der den Button einfach nicht findet auf der UI und es einfach vor ihm blickt und einfach nicht versteht, was du von ihm haben willst und da Minuten oder Viertelstunde rumtut. Das ist zum Haare rausreißen, geht immer hin und her wie eine Achterbahn. Emotionale. Aber super wichtig, dass man das macht.",
      "start": 3694064,
      "end": 3835136,
      "confidence": 0.92464864,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das Testing, das hört sich jetzt an wirklich wie klassisches user experience testing, weil bei Webseiten und Applikationen wird genauso gemacht. Du setzt Probanden vor den Computer, die nutzen dann deine Webseite und das wird dann gefilmt und allem drum und dran. Und das klingt ja relativ ähnlich.",
      "start": 3835248,
      "end": 3849988,
      "confidence": 0.91765,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Genau, aber du hast diesen emotionalen State, den du glaube ich im Webbereich natürlich, wenn er verwirrt ist oder so, dann siehst du das auch. Aber wie weit der Spaß hat, ob er gelangweilt ist oder so, das ist natürlich nochmal eine ganz andere Hausnummer bei Spielen, weil da hast du was wie Levels z.B. und der fängt an von Spielen und du siehst, dass er engagiert ist und dass er Spaß hat und dann kann es z.b. sein, dass er gelangweilt wird. Und das sieht man ganz, wenn Leute einfach so vor sich hin spielen, aber irgendwie du merkst, dass sie nicht mehr so richtig dabei sind, einfach Momente gibt, die vielleicht zu langatmig sind in deinem Spiel, wo du kürzen musst und sowas. Und das ist super wertvoll.",
      "start": 3850164,
      "end": 3883644,
      "confidence": 0.92186487,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Den Puls siehst du aber noch nicht dabei. Oder Herzfrequenz, was kommt da noch?",
      "start": 3883692,
      "end": 3889880,
      "confidence": 0.8201043,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ich weiß jetzt nicht, ob die Herzfrequenz bei einem Wirtschaftssimulationsspiel steigt oder eher bei einem Horrorspiel.",
      "start": 3890740,
      "end": 3895276,
      "confidence": 0.9377225,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Beim guten Spiel schon, wenn es gut.",
      "start": 3895388,
      "end": 3897132,
      "confidence": 0.91124284,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ist, aber wo der Puls hochschnellen würde, wäre in meinem Wirtschaftssimulationsspiel, wenn mir die Kohle ausgeht. Und da kommen wir dann zu dem ganzen Punkt Testing und Balancing. Und zwar bin ich vor kurzem oder Anfang des Jahres, bin ich über Social Media über ein Spiel gestolpert, nennt sich Path of Exil zwei. Und dieses Spiel hat einen sogenannten Skilltree. Das bedeutet, irgendwie spielst du da und irgendwie kriegst du da Punkte und dann kannst du auf deinem Charakter halt irgendwelche Skills, ich sag mal hochleveln, keine Ahnung, du läufst schneller oder bist stärker, hast einen besseren Bizeps und so weiter. Und wenn du mal nach Skilltree Path of Exile zwei google, dann siehst du gefühlt das Sternenuniversum. Also dieser Skilltree hat 1500 Knoten. Jetzt kannst du dir natürlich ausrechnen, wie das Balancing deines Charakters dort enden kann. Und da kommen wir jetzt gerade zu dem Punkt, den du sagtest. Gerade in einer Wirtschaftssimulation ist das sehr, sehr schwierig. Wo verdient man viel Geld, wenig Geld, weil du möchtest den Spielspaß laufen halten. Und auf Instagram finde ich auch, ab und zu komme ich in eine, wie soll man sagen, in einen Hasenbau von Influencern, die Tipps und Tricks beim Landwirtschaftssimulator sagen. Ja, dann solltest du doch lieber Oliven anbauen. Oder was ist, wenn ich mein Feld dünger? Habe ich dann dreimal mehr Gras zum Verkaufen und so? Zugegeben, ich guck die ganzen Videos komplett durch. Ich habe Landwirtschaft Simulator noch nie gespielt, aber ich kenne jeden Tipp und Trick, wie ich $5 mehr krieg. Erzähl uns mal ein bisschen was über das Balancing in Spielen und warum es so schwierig ist, aber warum es auch so richtig wichtig ist.",
      "start": 3897156,
      "end": 4002848,
      "confidence": 0.91577506,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ja, das Balancing ist natürlich super entscheidend. Mein Lieblingsbeispiel ist wieder Super Mario. Wenn du Super Mario, die Geschwindigkeit deiner Laufart verstellst, wie hoch du springst, wenn du da ein bisschen dran drehen drehst, wird es nicht so gut sein oder wird es vielleicht ganz schlecht sein. Und deswegen sind diese Grundeinstellungen so wichtig, dass die wirklich gut passen. Wie geht man an das ran? Man kann letztendlich muss man immer klein starten. Das ist immer wieder bei diesem Game Loop. Du musst halt schauen, dass du mal irgendwo eine Baseline hast, die Spaß macht. Und da hast du auch wenig Parameter, die du gegeneinander schrauben musst und dann fängst du damit an. Natürlich hast du diesen Luxus bei Wirtschaftssimulationen oft nicht mehr dann, weil du halt viele Sachen machen musst. Auch da wäre natürlich, die kann ich mich nicht einschränken, denn was du vorher erzählt hast mit dem Skilltree. Stell dir vor, du haust den Skilltree jemanden um die Ohren, der gerade so ein Spiel anfängt. In dem speziellen Fall weiß ich jetzt nicht, aber ich gehe jetzt mal davon aus, dass da viel davon versteckt wird, wenn du anfängst, damit du erst später kommst. Und genauso kann man es natürlich auch im Design machen. Man fängt einfach an und dann versucht man immer mehr Schräubchen zu drehen und dann bekommt man diese Komplexität. Und es ist natürlich so, dass man viele, wenn man ein, zwei Systeme hat, die gut funktionieren und die zusammen gut harmonieren, können ja auch viele Sachen erschaffen, dass die Systeme an sich einfach zu Lösungen führen, die du so gar nicht voraus geplant hast als Game Designer. Das kann natürlich manchmal schlimm sein, aber oft ist es auch interessant, dass du gewisse Lösungen findest oder Spielerlösungen finden, die du so gar nicht erdacht hast. Da ist Rimworld z.B. so ein tolles Beispiel dafür. Ganz berühmtes Indie Spiel, wo du paar Leute auf dem Planeten hast, so ein Colony Simulator, wo du eine Kolonie von Leuten hast, mit denen du was baust. Und da kann alles mögliche passieren, weil die Leute miteinander agieren und letztendlich werden ein Haufen Geschichten, wildeste Geschichten erzählt. Und dafür ist es sehr berühmt und es hat halt so grundlegende Systeme, die gut miteinander arbeiten können. Aber viel passiert einfach so an Geschichten, die da erzählt werden und an Sachen.",
      "start": 4002904,
      "end": 4116630,
      "confidence": 0.9179659,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Aber wie designt man denn die Balance eines Spiels? Also ich stelle mir da jetzt gerade eine riesige Excel Tabelle vor. Also eigentlich musst du doch eigentlich Monte Carlo Simulationen auf diesen, auf diese Möglichkeiten fahren, oder du errechnest alle Möglichkeiten, um zu gucken, okay, hast du Outlier oder.",
      "start": 4116790,
      "end": 4132568,
      "confidence": 0.9105298,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Du misst es natürlich durch, du schaust, wie die Leute dabei sind, wie lange du Spielzeit zum gewissen Punkt brauchst. All diese Sachen. Machst du Simulation selber, kannst du den Computer ja nicht spielen lassen. Jeder spielt anders. Das heißt, du brauchst tatsächlich menschliche Tester dafür, um das irgendwie hinzukriegen. Das ist vor allem im Mobile Bereich extrem stark. Das wird alles analysiert und zurückgeschickt, wer wie lange spielt, welchen Progress, welche Achievements. Hat natürlich auch noch andere Gründe mit Freeplay, aber da wird sehr stark auf das geschaut. Aber auch im Core Game Markt wird geschaut, wie lange braucht ihr für ein Level, gibt es irgendwelche Probleme und so weiter. Sehr viel analytische Sachen dabei. Aber dann hast du diese ganze psychologische Schiene, die vielleicht ping ist. Z.B. gibt es diese Geschichte, weiß jetzt nicht mehr in welchem d Shooter das war, aber es gab irgendeine Waffe, die hat nie jemand benutzt, weil jeder gesagt, die ist irgendwie lame oder die ist halt underpowered und mit dem kannst du nicht einen Ego Shooter oder mit dem kann man nicht arbeiten. Und nach Zahlen wartet aber nicht so nach Zahlen war das eine coole Waffe, die hat genauso viel Schaden gemacht, wenn man es richtig gut gemacht hat, wie die anderen auch. Das war gut gebalanced, aber hat niemand benutzt. Und was sie dann gemacht haben, ist, sie haben den Soundeffekt verändert von der Waffe, die ein bisschen tiefer gemacht, die klang ein bisschen. Das hat einfach mächtiger wirkt und plötzlich haben es die Leute benutzt. Rein psychologischer Kniff gewesen. Die ganzen Foren waren voll davon, dass das halt einfach eine schlechte Waffe ist, ohne dass jemand sagen kann, warum. Da ist sehr viel Psychologie dabei. Mit dem hast du halt auch zu tun in diesen Balancing Sachen. Es kann auf dem Blatt Papier interessant sein oder stimmen alles, aber ob es dann auch wirklich Spaß macht, es wäre eine andere Sache. Letztendlich geht es wirklich um den Spaß, um die Spielerfahrung und die kannst du nur am Spieler festmachen. Da hilft dir die Monte Carlo Simulation nur vom Menschen was.",
      "start": 4132624,
      "end": 4230080,
      "confidence": 0.91696185,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Es gibt auch so ein Video auf YouTube oder auf Instagram, da steht ein Programmierer von Counter Strike auf dem und erzählt genau solche Storys. Die haben irgendwie eine neue Version rausgebracht und auf einmal fluchen alle Spieler. Ja keine Ahnung, die AK 47 schießt nicht mehr so wie vorher, obwohl die in dem Release gar nichts an der AK 47 gedreht haben. Wirklich gar nichts. So, okay, dann haben sie das ein bisschen untersucht, haben es ernst genommen und haben halt nichts gefunden. Aber okay, nächste Version wieder. Ja, ihr habt das und das verändert. Wieder alle Leute aufgeschrien, wir haben hier nichts verändert. Dann haben sie einfach eine eine neue Version rausgehauen, die nichts verändert hat, gar nichts. Die haben einfach die letzte Version genommen und nochmal geschippt wieder. Irgendwelche Leute haben was anderes gemerkt. Ja, die Pings sind um 20 Millisekunden hochgegangen. In der nächsten Version haben die einfach gesagt Ping 10 und in die Changelog improved ping. Also der Ping war derselbe, nichts technologisch geändert, einfach nur -10 gerechnet und alle Spieler so, ja super, genauso Musters, alles klasse. Obwohl die Latenz genau dasselbe war. Also die psychologische Effekt scheint riesig zu sein.",
      "start": 4231420,
      "end": 4297166,
      "confidence": 0.90641725,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ja, da bist du diesen sozialen Netzwerken kann da auch schnell mal was passieren, was einfach vielleicht nicht der Fall ist. Das ist eine ganz eigene Sache, vor allem wenn man dann Reviews über seine eigenen Spiele liest, weil es natürlich schon oft so ist, dass Leute irgendwie was schlecht finden, aber es nicht sagen, weil es sind ja keine Spieleentwickler und sie können es nicht wirklich festmachen und sagen dann z.B. irgendwie die UI schaut scheiße und teilweise ist es aber nicht, dass sie scheiße ausschaut, sondern dass sie einfach, dass sie sich nicht zurechtfinden drinnen. Also sie können es nicht gescheit benutzen und es hat dann nichts mit Optik zu tun, sondern wirklich mit der Aufteilung, wo stehen Informationen und so weiter. Klassisches UI Design halt. Aber das schreiben viele nicht und das ist auch okay, weil sie es einfach nicht wissen können. Aber da muss man so oft ein bisschen rein interpretieren und vielleicht auch ein bisschen nachmessen und kann sehr interessant sein. Ist auch oft nicht so leicht und teilweise ist auch unfair, das muss man auch sagen. Aber ja, so ist es halt. Also da muss man drüber stehen und schön ist, wenn man es natürlich dann rausfindet oder wenn du dann siehst, ah okay, deswegen habe ich vorher gemeint, hier diese Fokus Testing Geschichte, was du gemeint hast, wenn man den Leuten wirklich im Gesicht sehen kann, okay, das hat jetzt funktioniert. Die ersten zwei waren total verwirrt an der Stelle, da haben wir uns irgendwie eine UI aufmachen müssen, aber der hat sofort gecheckt, weil es jetzt die neue Version ist und das ist schon cool, wenn es dann funktioniert.",
      "start": 4297238,
      "end": 4369128,
      "confidence": 0.9334589,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Lass uns mal über die Veröffentlichung von Spielen sprechen. Und zwar kennt man natürlich die großen Hier, so wie EA Game, it's a sport, a cine game or was weiß ich, wie der funktioniert. Auf jeden Fall, EA kennt man, glaube ich, Rockstars kennt man, glaube ich, von GTA, sind wohl, glaube ich, die großen. Ich nenne die jetzt einfach mal Publisher. Meine Frage ist aber eigentlich, welche Rolle hat so ein Publisher? Was ist das? Also ist der Publisher immer das Game Studio, der das Spiel programmiert? Braucht man einen Publisher? Oder kann ich jetzt einfach mit Godot ein neues Spiel programmieren und das irgendwo hochladen? Ich nenne es mal wie bei Soundcloud, man MPs veröffentlichen kann und dann kann das jeder spielen.",
      "start": 4369304,
      "end": 4413774,
      "confidence": 0.91779023,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Ja, ist natürlich ein großes Thema. Generell haben Publisher mehrere Aufgaben. Klar, der klassische Verlag sozusagen, wie es früher hieß, kommt eigentlich aus der Zeit noch, wo man dann auch wirklich die Spiele irgendwo in einem Media Markt in irgendein Regal stellen musste und die ganzen physischen Distributionen machen musste. All das ist ja schon lang vorbei. Das meiste wird über Steam vermarktet oder andere, alles digital, das ist komplett weggefallen. Was natürlich übrig geblieben ist, was der Publisher als größter Punkt macht, oder als einer der großen Punkte, ist Risikokapital geben. Weil wenn man jetzt ein Spiel macht, wenn du jetzt mit einer tollen Spielidee zur Bank gehst und sagst, hey, ich habe eine coole Spielidee, ich möchte die Firma aufmachen und gibt es mir einen Kredit dafür, vielleicht kriegst du noch einen Kaffee, aber dann darfst du auch gehen, weil es natürlich ein Hochrisikomarkt ist, genauso wie die Filmbranche. Also wenn alles gut geht, dann vielleicht hat einer von 10 Titeln ganz gut Erfolg. Es ist auch sowas wie auf Steam, darf man auch nicht vergessen, sind letztes Jahr, ich habe die Zahl mal rausgesucht, 40 Titel pro Tag geschehen, jeden Tag. Also natürlich gibt es da Spitzen, wo mehr passiert und weniger, aber so im Durchschnitt 40 Titel am Tag. Und da stellt sich natürlich auch die Frage, neben dem Risikokapital dahinter, der Vermarktung, und das ist der zweite große Punkt, was die Publisher machen, nämlich wie kann ich das Spiel eben, wenn du es jetzt einfach auf dem Download stellst, so weit vermarktet haben, dass die Leute es auch kaufen oder spielen wollen, oder dass es sichtbar ist, dass es nicht einfach in dieser Welle von jedem Tag erscheinenden Spielen untergeht und es nie jemand sieht. Das passiert nämlich, wenn du es einfach so machst, ziemlich sicher mittlerweile, selbst wenn es ein gutes Spiel ist, ist das tragische daran. Und es ist auch so, dass der Release, egal was es für ein Release ist, aber es kann so ein Early Access Release sein oder so, aber der Release an sich ist halt der Punkt, wo du am meisten Geld verdienen kannst. Wenn du es jetzt kommerziell machst, wenn es ein Hobby ist, dann ist es egal, dann kannst du natürlich machen, aber wenn du es kommerziell machst, ist das ein wichtiger Punkt. Und dann willst du natürlich, dass du im Vorhinein schon möglichst viele Leute erreicht hast, die dieses Spiel gerne spielen und dafür natürlich auch ein bisschen Geld zahlen, damit du es weiterentwickeln kannst oder einen neuen Titel machen kannst oder was auch immer. Und dann gibt es so gewisse Dienstleistungen, die traditionell beim Publisher sind. Lokalisierung, haben wir vorher geredet, ist sowas, was der Publisher meistens übernimmt, die Studios, Lokalisierung, Studios anschreiben, QR auch noch abschließend, also du machst natürlich selber QR, aber QR macht natürlich auch nochmal der Publisher, bevor es release, das alles nochmal durchzuwinken. Diese fokusgruppentests z.B. ist sowas, was der Publisher meistens auch zahlt oder zur Verfügung stellt, diese Sachen. Und das so, was ein Publisher im Großen und Ganzen macht und dafür macht mit dem Vertrag, wo auch erstmal sein Geld meistens erst, je nachdem was man Vertrag aushandelt, aber seine Ausgaben, Recoupt nennt man das dann, also wieder rein bekommt im besten Fall. Und wenn das erreicht ist, dann teilt man sich die Gewinne oder was auch immer man für den Schlüssel natürlich dann macht.",
      "start": 4413902,
      "end": 4581294,
      "confidence": 0.91721094,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Und von was für einem Budget sprechen wir da bei so Spielen ganz allgemein? Oder auch das Risikokapital am Anfang?",
      "start": 4581342,
      "end": 4587352,
      "confidence": 0.9084145,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, wenn man sich so überlegt, wir hatten diese Dreiteilung vor, also du brauchst, vielleicht kann man, wenn man gut ist, zu zweit anfangen, das wäre jetzt nichts unübliches, klar gibt es Leute, die das alleine geschafft haben, aber das sind irgendwie Ausnahmen. Aber sagen wir, du bist so zwei, drei Leute, wenn du schaust, was die so im Jahr verdienen und du sagst, du machst vielleicht ein Jahr Entwicklung, hast ein kleines Ding, machst aber trotzdem Jahr Entwicklung, bist du schon ziemlich gut unterwegs. Dann bist halt aber auch schon im Bereich einfach an Gehältern und so, die du auch irgendwo selber zahlen musst, weil klar kannst du sagen, machst das für nichts, aber einfach was reell, was du reell kostest, bist du so im ER Bereich, das ist dieser ganze, wo der indie Markt halt losgeht, dann gehst du ziemlich schnell hoch auf Millionen, wenn du sagen wir mal im unteren AA Markt, es gibt ja drei, es gibt die AA Produktion, die größten, da gibt es die AA Produktion, das sind die mittleren und da gibt es eigentlich die A Produktion oder die Indie Produktion. Jeder sagt Indie Produktion, A sagt eigentlich keiner, das ist quasi nochmal drunter. Und so Double fängt halt dann irgendwo so an, dass du so 10 Leute hast und dann bist du halt so fünf bis 10 Leute und dann bist du so im Millionenbereich, unter dem einstelligen Millionenbereich, was dein Projekt kostet.",
      "start": 4587496,
      "end": 4650610,
      "confidence": 0.91956425,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das ist aber jetzt nur das Startkapital, das Risikokapital, oder?",
      "start": 4650690,
      "end": 4654178,
      "confidence": 0.902913,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Nein, das ist das ganze Produktionskapital oder was? Das ganze.",
      "start": 4654234,
      "end": 4657090,
      "confidence": 0.930848,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Also inklusive Publisher und Marketing und allem dann?",
      "start": 4657170,
      "end": 4660018,
      "confidence": 0.88006,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Nein, das ist das, was du bekommst, was der Publisher natürlich nochmal an Ausgaben hat, das ist dann je nachdem, das rechnet und. Aber die rechne ich jetzt nicht mit, weil die sind auch oft. Ja, das ist immer eine Frage, wie weit man das überhaupt mitbekommt, weil die haben natürlich auch so gewisse Synergieeffekte, oder? Die machen nicht nur dich als Projekt, sondern die haben ja viele, sie sind ja auch Hochrisikokapitalgeber, das heißt, die müssen auch viele Spiele haben, das muss ja irgend kennen viele wäre nix, einer wird was und so weiter. Das heißt, sie müssen ja auch mehrere Titel haben und verteilen natürlich z.B. schon ihre Leute auf verschiedene Titel und dann ist immer schwer querzurechnen, was das gekostet hat. Für die machen das natürlich schon, aber es wird nicht unbedingt weiter geben.",
      "start": 4660074,
      "end": 4700534,
      "confidence": 0.9219404,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Aber was würde mich jetzt so ein double A Spiel kosten, wenn ich das jetzt finanzieren wollen würde, gesamt?",
      "start": 4700582,
      "end": 4707254,
      "confidence": 0.9103505,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, da bist du im Einstieg Millionenbereich bis zum vielleicht dreiig Millionen oder sowas hoch. In diesen Bereichen bist du so oben. Streng genommen fangt AA bei 100 Millionen irgendwo so an. So reicht das sind so 100 Leute Team, kann man sich zusammenrechnen, 100 Leute auf vielleicht drei Jahre. Klar, die fangen nicht alle am Anfang an und so. Und das ist wirklich der Kern. Also in den Credits z.B. stehen von, ich glaube das war's, ein GTI Titel oder was schon auch einer von Rockstar sind 5000 Leute, die in den Credits standen. Das war vor Jahren so, also heute sicher noch mal mehr geworden, da sind natürlich viele involviert, aber jetzt so im Kernteam Bereich ist es so, um die 100 Leute, die da einfach mal arbeiten und dann kommst du halt in diesen Sphären, wo du dann auch wirklich in die hunderte Millionen kommst, weil es vorher erzählt worden ist, das GTA sechs würde mich jetzt nicht wundern, wenn die 1 Milliarde ausgeben, weil irgendwann ist auch das Marketingbudget so hoch, dass die 50 % fast für Marketing ausgeben. Und ich kann mich an letzten GTA fünf Teil noch erinnern. Man muss sich ja irgendwie vorstellen, dass da waren wir noch in Innsbruck und in Innsbruck in der letzten Bushaltestelle, irgendwo ganz weit draußen hängt dann halt das GTA Plakat, GTA fünf Plakat, dass das bald released wird. Und es hängt halt nicht nur dort, sondern auch im kleinen Dorf in Indien Irgen. Das ist eine weltweite Marketinggeschichte und da kostet dich das natürlich ein Haufen Geld. Das geht da auch mit rein. Man merkt es ja schon, wenn man so viel Geld für Produktion ausgibt, dann bist du auch wirklich jeden, dann lohnt sich auch den letzten irgendwo zu kriegen, der vielleicht ein Spiel kaufen kann, weil du musst ja unglaublich, du musst ja Millionen von Einheiten verkaufen, damit du das wieder rein bekommst.",
      "start": 4707302,
      "end": 4802992,
      "confidence": 0.92278445,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Wenn wir jetzt nochmal zurückgehen zu den kleineren Titeln, der Publisher übernimmt vor allem auch das ganze Release, wie du erwähnt hast, oder halt die Vorbereitung auch daran. Jetzt stellt man das heutzutage nicht mehr in den Media Markt, sondern halt auf Steam oder Epic. Und wie läuft es dann grundsätzlich ab, so ein Release? Also was macht man da? Gibt es da irgendwelche, ich hab mal gehört, irgendwelche Pre Versionen oder Alphaversionen, die irgendwer zur Verfügung gestellt kriegt oder keine Ahnung, diese klassischen Zeitschriften, die es da gibt. Also wie läuft denn so ein Release grundsätzlich ab?",
      "start": 4803056,
      "end": 4835286,
      "confidence": 0.9184954,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ist natürlich über ein bisschen anders, aber sagen wir mal spätestens sechs Monate vor dem Release muss man sich darum kümmern oder wird sich der Publisher darum kümmern, dass die Marketingmaschinerie irgendwie anläuft. Das heißt, da gibt es diverse Versionen, Vorversionen für die Medien, z.B. also für die ganzen immer noch relativ wichtig, z.b. irgendwelche Spielezeitschriften, also digital ja heute alles online, aber dass die Redakteure das kriegen, ihre Spiele Journalisten alles bekommen. Dann gibt es diverse Testings technischer wäre, aber auch einfach mal so ein Closed Beta Test, dass man wirklich Spieler mal testen lässt. Für uns Techniker natürlich wichtig, dass wir sehen, wie es technisch in der freien Wildbahn funktioniert. Da passieren auch immer wieder viele Überraschungen, aber natürlich auch vom Gameplay her, wo man nochmal schrauben kann. Und diese Demos werden dann meistens auch den Journalisten gegeben. Da hat man sowas wie die Gamescom wo man es zeigt, wofür die auf der Messe, da will man ja auch eine Demo haben und das ist oft nicht die gleichen, weil da hast du ja so ein Klientel, die dein Spiel einfach, die vielleicht 15 Minuten Zeit haben, sich da irgendwo hinzusetzen. Und so eine Wirtschaftssimulation kann man sich vorstellen, 15 Minuten kann man nicht viel machen, deswegen versucht man natürlich da irgendeine Demo zu machen, wo derjenige halt möglichst viel in dieser Zeit hat, auch irgendwie von einem Spiel erkennen kann. Das heißt, man macht dann nochmal vielleicht auch eigene Regeln, dass es schneller geht.",
      "start": 4835358,
      "end": 4909378,
      "confidence": 0.91603804,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Oder so, wie ich gerade gelernt habe, in 15 Minuten, da kommt es ja ganz stark auf den kurzen Game Loop an.",
      "start": 4909394,
      "end": 4913410,
      "confidence": 0.9754418,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Richtig, genau. Aber vielleicht willst du ihm noch zeigen, das was danach kommt, vielleicht gibt es noch irgendwie irgendwelche neuen Fabrikgebäude, die du geschenkt kriegst und solche Sachen, weil du Sachen einfach auslässt, also Wasserprogression hast, die du sonst nicht hast oder du zeigst noch ein anderes Level dazu, wie auch immer. Weil du möchtest ihm ja nicht nur die ersten 15 Minuten zeigen, weil selbst wenn die gut sind und er sagt, ja es passt schon, ist cool, du willst ihm ja noch ein bisschen was, wie es sich anfühlt in mitten im Spiel, im Endgame oder so, das was du sonst in einem Trailer sehen würdest oder ein bisschen weitergeben, das versucht man natürlich. Das heißt, für all diese Sachen gibt es eigene Version. Neben den ganzen QA Versionen wird nochmal Performance, auch so Extended Studios, die Performance tracken. Es gibt auch Studios oder Dienstleister, die technische Sachen nochmal checken, sowas wie, was war das, wie heißt es, SSE Chipsatz oder CPU Erweiterungen checken, ob die aktiv sind oder nicht. Solche Kleinigkeiten, die du einfach vergisst, ob du das gecheckt hast oder nicht oder was passiert in diesen Fällen. Das braucht als eigene Version. Und wie man schon merkt, da gibt es diese berühmte Crunch, wo dann der Stundenzettel relativ gut gefüllt ist, wenn man was zu tun hat. Und da musst du einfach mit. Die crunch Time ist ein eigenes Thema in der Gaming Industrie, aber das lässt sich nicht ganz vermeiden. Selbst wenn alles gut geht und es gut geplant ist, dann hat man zum Schluss natürlich einfach auch wegen einem selber schon den Stress, man möchte auch irgendwie ein gutes Ding abgeben und da gibt.",
      "start": 4913530,
      "end": 4996192,
      "confidence": 0.9174692,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Es eine Deadline, die dann definiert wird, einfach ab des Datum, es wird kommuniziert überall, oder?",
      "start": 4996216,
      "end": 5002464,
      "confidence": 0.96734315,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, weil es natürlich oft so ist, dass journalistische Spielejournalismus, auch für YouTuber, ich hab ganze YouTube Ecke, Social Media Ecke, gibt es ja oft so was wie eine Art Vorversion und dann wenn die fertig sind, wird das Spiel released. Das ist ja alles teilweise auch mit Embargo versehen und so, das heißt, die dürfen nicht vorher was posten und die brauchen also rechtzeitig die Version, die müssen Zeit haben, die zu spielen und dann muss der Release getriggert werden. Und das sind alles fixe Daten. Da kommst du also wenn du die schiebe, dann hast du gleich schon mal negativ Review oder was, wenn sie jetzt ihren Release verschieben und so und das wissen sie alles vermeiden. Deswegen bist du eigentlich ziemlich fix drinnen. Also klar, die Spieleindustrie verschiebt gern mal, wenn es ein GTA sechs ist, können die das auch, aber hat alles seine Grenzen und dann ist man schon unterwegs.",
      "start": 5002632,
      "end": 5052662,
      "confidence": 0.9320385,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Jetzt hört man ab und zu mal okay, dieses Spiel war ein Flop oder da wurde dreistellige Millionenbetrag ausgegeben und es gibt keine Playerbase und deswegen schaltet Sony die Server ab oder so, liest man ja ab und zu mal. Ab wann weiß man, ob ein Spiel ein Flop oder ein Top ist?",
      "start": 5052726,
      "end": 5069084,
      "confidence": 0.9038717,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Über Steam? Relativ schnell, weil der Verkauf von solchen Spielen ist immer so, dass man am Anfang diesen Release Hype hat. Man hat diesen hoffentlich sehr steil ansteigenden Berg an Sales, also innerhalb von 48 Stunden verkauft man sehr, sehr viele Einheiten. Und dann gibt es so eine Faustregel, we dieser Berg am Anfang natürlich dann irgendwann seinen Zenit erreicht und dann gibt es einen hoffentlich long tail, also es wird dann immer weniger, aber ein sehr langanhaltender Verkauf nach hinten, der immer weniger wird. Und die Faustregel besagt, das was man vorne an eid verkauft hat in diesen ersten Berg, dann kann man hinten vielleicht zwei oder dreimal noch mal so viel verkaufen. Das heißt, man weiß innerhalb von 48 Stunden, wo man hingeht in einem normalen Release Zyklus. Da gibt es Ausnahmen bei Early Access, meistens ist es auch so, aber Early Access ist ein Spiel, das nicht fertig ist, das wird dann nachgepatcht. Und da kann natürlich schon sein, dass man gewisse Features einpackt, wo noch mal viel mehr Leute dazukommen, wo man das quasi wieder anheben kann oder so einen kleinen neuen nächsten Release hat. Da gibt es alle möglichen Sachen, Spielereien, aber im großen und ganzen ist es immer so und deswegen weiß man selber natürlich der Spieler von außen sieht es nicht, aber wenn man selber weiß, was so die Sales sind, dann weiß man das innerhalb von dieser Zeit schon. Und das ist z.B. auch so eine Geschichte bei Steam, die Statistiken selbst, selber die Statistiken werden, wenn alles gut geht, eingeführt, weil dann bewegt sich so viel plötzlich auf der Seite und an Sales und so, dass Wolf, also die Firma hintersteam, den Account sperrt. Also die Statistik Sachen sperrt. Und die schauen dann selber manuell drüber, ob das mit rechten Dingen zugeht. Also da schaut dann wirklich, haben die einen Release gehabt und welche Reviews sind da reingekommen und so weiter. Weil die haben im Extremfall auch einen chinesischen Publisher mit 40 Titeln gesperrt, weil der halt Reviews gekauft hat. Und dann sind sie draufgekommen und die drehen dann, die haben den komplett abgedreht, alle 40 Titel von der Page genommen. Und das schauen die dann schon nach, damit das alles mit rechten Dingen zugeht. Ist zwar toll für alle Spieler, der Publisher selber schuld natürlich, wenn er daran dreht, aber das ist auch eine andere Geschichte. Wenn du da Spielfirma bist, die mit denen irgendwie einen Vertrag hat, dann hast du ein Problem, weil der ist dann quasi von Steam gefallen, dein Spiel ist von Steam gefallen, du kannst gar nichts dafür. Und dann war es das. Also es ist sehr drakonisch. Und das wird dann geprüft und deswegen wird das eingefroren. Meistens passiert es dann, kannst du dann auch schlafen gehen, wenn das am Anbau meistens. Und dann wird das irgendwann wieder freigegeben. Und wenn das freigegeben wird, dann siehst du, wie es war, auf Steam zumindest.",
      "start": 5069172,
      "end": 5214348,
      "confidence": 0.92380965,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das heißt aber, du arbeitest im Prinzip jahrelang auf die 24 Stunden hin, die dann passieren. Aber wenn ich das jetzt richtig verstehe, die Reviews, die sind auch wesentlich wichtiger geworden, oder? Als früher, weil früher gab es nur die Zeitschriften und so, jetzt sind die Reviews dementsprechend auch.",
      "start": 5214444,
      "end": 5232924,
      "confidence": 0.92173856,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Steam ist die Plattform für den PC Markt. Ungefähr, ich würde sagen, 70 80 % aller Verkäufe gehen darüber, auch Epic Store und so, was es so gibt. Ist ein nettes Gimmick, good old games gibt es noch und so, aber es ist machbar, wenn es gut läuft, macht es auch Sinn, das zu machen. Aber das gro ist Steam. Und Steam gibt es diese Reviews, da gibt es z.B. eine Grenze, die total wichtig ist, die 70 % Marke, weil 70 % ist größtenteils positiv bewertet und 69 ist es mixed, also gemischt Bewertung. Und dann switcht der Color Code um auf der Steam Page von blau zu gelb. Und das macht unglaublich viel aus auch, weil ich meine, ich kenne es an mir auch, wenn man selber ein Steam Spiel aufmacht auf der Shoppage und es ist gelb, dann merkst du schon, muss man schon mögen, dass man es kauft. Und ja, das sind so Sachen. Und nach oben hin, klar, je besser die Reviews sind, desto mehr wird man verkaufen. Aber auch da, wie in jedem Indie Markt, ist es so, du brauchst eine Zielgruppe, die groß genug ist, du kannst auch tolle Reviews haben, aber nur 10 Spieler, das hilft dir halt auch nicht weiter. Aber es ist wieder eine ganz eigene Sache. Wer ist deine Zielgruppe? Hast du ja auch richtig angesprochen, wegen dem Marketing. Ist auch das, was der Papa unter Kontrolle haben sollte, dass man auch die richtigen Leute anspricht. Weil wenn du jetzt zu breit reingehst und Leute das spielen, die sich aber ganz was anderes darunter vorgestellt haben, dann gibt es natürlich ein schlechtes Review. Ist verständlich. Die sind halt dann sauer, weil sie ein Spiel haben, das ganz anders ist, wie sie sich vorgestellt haben. Ja, aber gescheiter wäre, du würdest halt gar nicht erreichen oder zumindest irgendwie klar machen vorher. Ist halt eine Gratwanderung. Du möchtest großes Zielpublikum haben, aber halt auch das richtige.",
      "start": 5233092,
      "end": 5323180,
      "confidence": 0.9098161,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Der Wolfgang hat das ganze Thema hier schon eingeleitet mit der K Königsklasse. Und wenn ich mir die Komplexität von unserem Gespräch jetzt gerade mal so ansehe. Wir sind gestartet mit dem Bereich Game Design, Game Art. Da waren Stichworte wie eine Bibel, man schreibt etwas auf, wie das alles sein soll, Story Design. Dann haben wir über die Komplexität von Game engines gesprochen, Unreal, Godot, Unity, Mobile Games, Multiplayer, Cross Platform, Steam und PlayStation, was weiß der Geier nicht? Source Control, Git ist da, Igitt und Co. Hatten wir dann Testing, manuelles Testing, klassisches UX testing. Wir waren teilweise in den Bereich Monte Carlo Simulation, dann Balancing Skilltree, ist das hier alles ausgeglichen? Dann Publishing Markt. Ich habe so ein bisschen das Gefühl, dass wobei normalen Software as a Service Produkten du ganze Firmen hast mit Business Developer und keine Ahnung was. Leute, die sich da wirklich, wirklich Gedanken darüber machen, dass hier irgendwie eine Softwareentwicklerin mit all diesen Bereichen wirklich sehr nah in Berührung kommt. Weil im Endeffekt, klar, du implementierst die Texturen, die Algorithmen, du willst ja auch sehen, welche Reviews bei Steam reinkommen oder ob das ein Success ist. Du spielst das vielleicht, das bedeutet, dein Skilltree testest du aus und balancierst du auch die UI UX Testings schaust du dir an. Also ich frage mich gerade, okay, wann macht man sowas eigentlich? Und wie viel bekommt man eigentlich an einem klassischen Arbeitstag geschafft? Also Wahnsinn. Ich habe noch nie ein Spiel programmiert. Ich habe tierisch Bock auf jeden Fall mit Godoma was zu machen, zumindest mir da ein, zwei Tutorials durchzuklicken. Denn zumindest mal vielleicht irgendwie so ein, wie nennt man das? D d, wo man von links und rechts laufen kann, so wie dieses Chrome Spiel. Wenn du einen Fehler bekommst, dann kannst du ja auch mit so irgendwie so immer so springen. Vielleicht kriege ich das ja mal nachprobiert. Dominik, wir sind am Ende des Podcast. Vielen lieben Dank, dass du dieses Tor zur Komplexitätshölle von Spieleentwicklung aufgemacht hast. Also ach, es war vielleicht ein Diablo Pan, ich weiß es nicht. Mir hat sehr, sehr viel Spaß gemacht und ich hör auch immer wieder so raus, wir sind bei weitem nicht beim Ende angekommen. Deswegen die wenn ich jetzt als Softwareentwickler das nächste Wochenende Zeit hab, was ist die eine Ressource, die ich mir anschauen sollte, um mal was kleines auf die Straße zu bringen?",
      "start": 5324000,
      "end": 5484382,
      "confidence": 0.90643436,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Denke mit Godot kannst du nichts falsch machen. Eine gute Idee, mal anfangen. Und letztendlich gibt es diesen Grundsatz, Spiele werden erspielt und nicht gemacht. Das heißt, letztendlich kannst du nur einfach anfangen und schauen, ob du was zusammenbringst, was halt Spaß macht. Das ist das ein und alles an dem ganzen. Und das ist auch das Schöne neben der ganzen Komplexität, dass es was ist, was sehr schwierig ist, aber am Ende des Tages doch Spaß macht. Auch die Entwicklung davon macht Spaß. Und das ist hoffentlich ein schönes Schlusswort.",
      "start": 5484526,
      "end": 5514668,
      "confidence": 0.94414014,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Das ist es. Vielen lieben Dank an alle Hörerinnen und Hörer, wer in das Thema eintauchen möchte, wir haben in den Shownotes ganz viele Links, unter anderem auch zu Godot natürlich, aber auch zu den anderen Engines, zu der Bullitt Physik Engine, zu Git, LFS, wer da vielleicht mal ein bisschen einsteigen möchte, auch zum Industriegiganten oder zur Infoküche Podcast oder natürlich aber auch zur Doktorarbeit von Dominik, wer sich mal etwas eine Abendlektüre ins Bett nehmen möchte.",
      "start": 5514844,
      "end": 5541756,
      "confidence": 0.92344207,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Dominik, zwei Abende?",
      "start": 5541948,
      "end": 5543680,
      "confidence": 0.8531967,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Kommt auf die Lesegeschwindigkeit drauf an. Für mich sehr wahrscheinlich eine ganze Woche. Ich habe schon immer Probleme, wissenschaftliche Paper zu verstehen. Vielen Dank.",
      "start": 5545620,
      "end": 5553398,
      "confidence": 0.9346971,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Aber Andi, ich erwarte mir jetzt schon, dass wir dann dein Spiel sehen. Also das ist nicht wieder so ewig lang wird wie beim Brotbacken, sondern wir wollen jetzt da schon ein Spiel sehen. Ich will da kein, wenn wir schon bei schlechtem Panzer warten auf Godot sehen.",
      "start": 5553414,
      "end": 5566410,
      "confidence": 0.8858138,
      "speaker": "A",
      "channel": null
    },
    {
      "text": "Ja, das Riesenproblem ist, umso mehr Podcast episoden ich aufnehme, desto mehr Versprechungen häufen sich an. Also ich muss glaube ich inzwischen ein Brot backen, ich muss noch einen Ölpreis Scraper implementieren und jetzt muss ich noch ein Spiel programmieren. Also Wolfgang, du kannst dir aussuchen, machen wir eine Pause und dann baue ich das alles oder machen wir weiter Podcast? Da bin ich aktuell eher für weitere Podcast. Aber natürlich, ich merke immer wieder, Softwareentwicklung ist nicht Softwareentwicklung und Informatik hat so viele verschiedene Bereiche, dass es einfach unmöglich ist, sich überall reinzustössen, obwohl ich natürlich schon so ein bisschen Bock hätte, mal was komplett anderes zu machen. Deswegen, Dominik, vielen lieben Dank für deine Zeit. Wir reichen natürlich jegliches Feedback von Hörerinnen und Hörern natürlich auch weiter. Und wenn ihr mit Dominik auch mal Verbindung treten wollt, schaut in die Show Notes, da findet ihr alle Kontakte. Ansonsten würde ich sagen, viel Spaß beim Zocken und tschüss, macht es gut.",
      "start": 5566830,
      "end": 5618452,
      "confidence": 0.9016452,
      "speaker": "B",
      "channel": null
    },
    {
      "text": "Vielen Dank nochmal für alles. Danke für die Einladung.",
      "start": 5618476,
      "end": 5620292,
      "confidence": 0.89539444,
      "speaker": "C",
      "channel": null
    },
    {
      "text": "Ciao.",
      "start": 5620356,
      "end": 5620500,
      "confidence": 0.64737,
      "speaker": "A",
      "channel": null
    }
  ],
  "confidence": 0.9181637,
  "audio_duration": 5456,
  "webhook_status_code": null,
  "webhook_auth": false,
  "summary": null,
  "auto_highlights_result": null,
  "content_safety_labels": null,
  "chapters": null,
  "sentiment_analysis_results": null,
  "entities": null
}