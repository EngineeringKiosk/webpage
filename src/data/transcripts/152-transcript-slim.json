{
    "language_code": "de",
    "audio_url": "https://audio1.redcircle.com/episodes/eb52d44a-642f-4e1e-a52c-8a43573c6561/stream.mp3",
    "punctuate": true,
    "format_text": true,
    "dual_channel": false,
    "multichannel": null,
    "audio_channels": null,
    "webhook_url": null,
    "webhook_auth_header_name": null,
    "webhook_auth_header_value": null,
    "audio_start_from": null,
    "audio_end_at": null,
    "word_boost": [],
    "boost_param": null,
    "filter_profanity": false,
    "redact_pii": false,
    "redact_pii_audio": false,
    "redact_pii_audio_quality": null,
    "redact_pii_policies": null,
    "redact_pii_sub": null,
    "speaker_labels": true,
    "speakers_expected": 2,
    "content_safety": false,
    "content_safety_confidence": null,
    "iab_categories": false,
    "custom_spelling": null,
    "disfluencies": false,
    "sentiment_analysis": false,
    "auto_chapters": false,
    "entity_detection": false,
    "summarization": false,
    "summary_model": null,
    "summary_type": null,
    "auto_highlights": false,
    "language_detection": false,
    "language_confidence_threshold": null,
    "language_confidence": null,
    "speech_threshold": null,
    "speech_model": null,
    "id": "e5835904-6970-48ab-960f-d74bebd86fb6",
    "status": "completed",
    "error": null,
    "utterances": [
        {
            "text": "Einen wunderschönen ersten Adventssonntag wünschen wir euch und damit willkommen zum ersten Türchen des Engineering Kiosk Adventkalenders. Wissen kurz und leicht verdaulich, so wie es in der Adventszeit sein soll. Aber bevor wir starten, gibt es zum Baumwagen natürlich einen Dad Joke ÿousand. So, bist du bereit? Also los geht's mit den Zählvariablen.",
            "start": 9760,
            "end": 36908,
            "confidence": 0.8382762,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Viele von uns programmieren prozedural oder objektorientiert bzw. Mit Programmiersprachen, die diese Paradigmen unterstützen. Noch mal zur was ist denn eigentlich nochmal prozedurale Programmierung? Also der Begriff selbst ist nicht ganz eindeutig definiert. Er wird auf jeden Fall sehr früh geprägt, wo die zweitausendein Aufgabenstellung in Teilprobleme unterteilt wurden bzw. Als das angefangen hat. Heutzutage würde man sagen, das ist Standard und wir würden das als Funktionen oder Methoden bezeichnen. Es war halt alles bedingt durch den mehr oder weniger limitierten Sprachumfang früherer Programmiersprachen. Heutzutage würde man sagen, prozedurale Programmierung ist die klassische Art des Programmierens. Wie dem auch sei, Merkmale der prozeduralen Programmierung sind unter anderem Kontrollstrukturen wie Schleifen, nochmal zur Erinnerung, kopfgesteuerte Schleife, so eine while Schleife, eine fußgesteuerte Schleife, eine do while Schleife oder halt auch eine Zählschleife, also eine for i, null i, kleiner gleich wert i und so weiter. Als Alternative zur prozeduralen Programmierung gibt es da z.B. die funktionale Programmierung. Wenn du jetzt JavaScript funktional entwickeln wollen würdest, dann würdest du z.b. die klassischen Kontrollstrukturen wie Schleifen, die ich gerade erwähnt hatte, mit high order Functions ersetzen, wie z.B. map und Filter. Aber dies nur am Rande. Wir gehen jetzt nicht tiefer auf die funktionale bzw. Prozedurale Programmierung ein, also schiffen wir das wieder zurück zum Thema. Zurück zur Zählschleife bzw. Vor Schleife. Also vor Schleife, die Tage her ist wieder eine geschrieben vor i null i, kleiner gleich Wert i. Selten habe ich gesehen, dass für die Zählvariable ein anderer Buchstabe als i genutzt wurde. Außer es wurden mehrere for Schleifen ineinander verschachtelt und i ist als Variablename bereits belegt. Dann hat man natürlich j oder k oder l genommen. Der Punkt ist bzw. Die Frage, die ich mir gestellt habe, warum? Und warum mache ich das so? Und die simple Antwort ist eigentlich, weil ich es so gelernt habe bzw. Nie tiefer hinterfragt habe. Denn einsbuchstabige bzw. Sehr kurze variable Namen, die sind eigentlich. Ja, in der Programmierung verpönt, stammen sie wahrscheinlich aus den Anfangstagen der Programmierung. Zumindest habe ich das so gelernt in meinem Algorithmenkurs. Im Studium hat der Professor alle Algorithmen in C geschrieben und dabei immer einstellige Variablennamen genutzt. Also a, b, c. Der Quellcode selbst war rechtschreibtisch schwer zu folgen. Als generelles Best Practice sagen wir allen unseren Leuten deswegen, hey, nimm doch bitte etwas längere variablen Namen, welche, die etwas aussagen, wo man den Namen liest und weiß wirklich was gemeint ist. Klar, Ausnahmen gibt es immer, sowas wie ID oder UID, das sind auch kurze variablen Namen, aber eine ID, da weiß jeder, was gemeint ist. Natürlich könnte man jetzt die Diskussion starten, dass man id gegebenenfalls user id nennen sollte und so weiter, aber das ist nicht der reale Punkt, sondern benutze halt kein a, b oder c. Dann habe ich mir die Frage warum nutzen wir also i, j und k und nicht counter oder number oder ähnliches für die for Schleife? Und zwar hat das Ganze was mit Mathe zu tun, bzw. Hat es eine mathematische Herkunft, und zwar aus der linearen Algebra und der Matrizenrechnung. In diesen beiden Bereichen werden die Variable i auch als Indizes benannt und dort auch für Zählvariablen verwendet. Also Ÿousand, wo kommt denn sowas z.B. in der Praxis in der Mathematik vor? Und zwar beim mathematischen Summenzeichen. Ihr wisst schon, dieses große, etwas zackige e. Da gibt es eine einfache Schreibweise, wenn man z.b. eins, zwei, drei, vier, fünf rechnen möchte. Da kann man einfach schreiben Summenzeichen fünf. Unter dem e steht i gleich eins, das besagt, wo man anfängt. Erster Teil der Vorschleife. Über dem e steht fünfte, das ist die Zahl, wo du aufhörst. Wir wollen eins, zwei, drei, vier, fünf rechnen. Rechts neben dem e steht, was du jedes mal zur Summe dazu packst. Der Schritt, also i aus der Vorschleife und i in diesem Kontext steht für den Laufindex der Summe. Und diese Tradition hat sich halt aus der Mathematik in die Informatik übertragen. Falls du dich also jetzt schon immer gefragt hast, wie viel hat Softwareentwicklung eigentlich mit Mathematik zu tun? Nun, hier hast du zumindest einen kleinen Anhaltspunkt. Und an alle Mathematikerinnen, seid bitte nicht böse mit mir, wenn ich das Summenzeichen als großgeschriebenes E [Sos/eos], bezeichne. Mit hoher Wahrscheinlichkeit gibt es dafür einen mathematischen lateinischen Namen, den ich leider nicht kenne, aber es sieht halt aus wie ein großgeschriebenes E. Eine kleine Korrektur. Der Buchstabe selbst kommt aus dem griechischen Alphabet und wird dort als Sigma bezeichnet. Es ist also vielleicht doch sogar als Best Practice anzusehen, wenn man zumindest im Kontext von Zählvariablen und Laufindizes einstellige Variablennamen verwendet bzw. I, j und k. Aber Achtung, kommt mir bitte jetzt ja nicht auf die Idee, ein wenig Chaos zu verbreiten, indem ihr a, b oder x, y, z als Zählvariable nutzt, denn das bringt das globale System einfach nur durcheinander. Nun seid ihr wieder ein bisschen klüger, um auch beim nächsten Meetup ein bisschen klug zu scheißen. Viel Spaß.",
            "start": 37084,
            "end": 344060,
            "confidence": 0.8936676,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Wenn du jetzt noch mehr Lust auf Wissen hast, schau doch in eine unserer anderen Episoden rein und schicke diese Episode an ein, zwei Freunde bzw. Arbeitskolleginnen. Und auf dein Feedback freuen wir uns natürlich auch in unserer Discord Community. Noch einen schönen Advent von Andi und mir.",
            "start": 344220,
            "end": 360460,
            "confidence": 0.93987167,
            "speaker": "A",
            "channel": null
        }
    ],
    "confidence": 0.8928956,
    "audio_duration": 365,
    "webhook_status_code": null,
    "webhook_auth": false,
    "summary": null,
    "auto_highlights_result": null,
    "content_safety_labels": null,
    "chapters": null,
    "sentiment_analysis_results": null,
    "entities": null
}