{
  "language_code": "de",
  "audio_url": "https://audio1.redcircle.com/episodes/e755c20a-94fc-4d0f-baa2-95c5486ec18d/stream.mp3",
  "punctuate": true,
  "format_text": true,
  "dual_channel": false,
  "webhook_url": null,
  "webhook_auth_header_name": null,
  "webhook_auth_header_value": null,
  "audio_start_from": null,
  "audio_end_at": null,
  "word_boost": [],
  "boost_param": null,
  "filter_profanity": false,
  "redact_pii": false,
  "redact_pii_audio": false,
  "redact_pii_policies": null,
  "redact_pii_sub": null,
  "speaker_labels": true,
  "speakers_expected": 2,
  "content_safety": false,
  "content_safety_confidence": null,
  "iab_categories": false,
  "custom_spelling": null,
  "disfluencies": false,
  "sentiment_analysis": false,
  "auto_chapters": false,
  "entity_detection": false,
  "summarization": false,
  "summary_model": null,
  "summary_type": null,
  "auto_highlights": false,
  "language_detection": false,
  "speech_threshold": null,
  "id": "62xckva4m3-cd5f-44b7-b300-22e8886ebb26",
  "status": "completed",
  "error": null,
  "utterances": [
    {
      "text": "Wie findet man heutzutage einen Job in einer internationalen Firma? Genau, durch Over-Engineering. Man setzt sich also als zockender Informatiker hin und schreibt für Counter-Strike einen Lexer und einen Barser in Go, um seine Freunde auszuspionieren. Klingt komisch? Habe ich mir auch gedacht. Und darum habe ich mir die Geschichte von Andy ganz genau erklären lassen. Ich sag's euch, parade Beispiel, wie man als Nerd Probleme begegnet, was man aber dabei lernen kann und worum Gaming und LAN-Partys vielleicht nicht nur vergeudete Zeit sind.",
      "start": 5541,
      "end": 36308,
      "confidence": 0.8596904761904763,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Let's go, fellas!",
      "start": 36889,
      "end": 37789,
      "confidence": 0.5593333333333333,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "So, wir starten heute mal ein Experiment. Und zwar, ihr habt keine Ahnung, was Andi heute vorbereitet hat. Er hat mir nur gesagt, es geht um Counter-Strike und Lexer. Was für mich absolut keinen Sinn macht. Also, Andi, erklär mir mal.",
      "start": 41960,
      "end": 56444,
      "confidence": 0.7491463414634145,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich fange jetzt nicht an mit der Erklärung, sondern einfach mal mit so ein paar Fragen. Wolfgang, du bist ja auch keine 20 mehr, ne? Also... 22. Ja, ist ja trotzdem keine 20 mehr, ne? Wann hattest du deinen ersten Computer? Mit welchem Alter?",
      "start": 56484,
      "end": 69808,
      "confidence": 0.6876590909090909,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Elf oder so, vermute ich mal.",
      "start": 69868,
      "end": 71168,
      "confidence": 0.4649999999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Was war das für ein Jahr?",
      "start": 71567,
      "end": 73088,
      "confidence": 0.22533333333333336,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Jetzt muss ich rechnen.",
      "start": 73108,
      "end": 75310,
      "confidence": 0.49975,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "93. Was war das für ein Computer?",
      "start": 75801,
      "end": 76671,
      "confidence": 0.5602857142857143,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich hab keine Ahnung. Ich hab den von meinem Bruder bekommen, der hat schon in der IT irgendwie gearbeitet. Und es war ... Ja, ich hab keine Ahnung. Es war auf jeden Fall mit Disketten, ich glaub, ohne Festplatte. Man hat nur Disketten irgendwie reingeschoben fürs Betriebssystem booten und dann wieder gewechselt, wenn man irgendwas spielen wollte. Und da war irgendwie so ein Jump & Run oder so, hab ich drauflaufen lassen können.",
      "start": 76971,
      "end": 98209,
      "confidence": 0.7551506849315066,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Kennst du den Namen von dem Jump & Run noch? Aber das war schon der erste Use-Case von dir, oder? Mit dem Computer. Als elfjähriger Wolfgang in Österreich, hattest du eine Diskette in der Hand, wahrscheinlich noch die großen Disketten, oder?",
      "start": 98589,
      "end": 111124,
      "confidence": 0.6866097560975609,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, das waren große Disketten.",
      "start": 111164,
      "end": 113605,
      "confidence": 0.4098,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "3,5 Zoll oder was? Nee. 3,5 Zoll sind die kleinen, ne?",
      "start": 113615,
      "end": 117127,
      "confidence": 0.6438181818181818,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Fünf ein Viertel waren das.",
      "start": 117167,
      "end": 118528,
      "confidence": 0.6546000000000001,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Diese wabbeligen, ne?",
      "start": 118568,
      "end": 119409,
      "confidence": 0.8186666666666667,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, ja, genau.",
      "start": 119789,
      "end": 121470,
      "confidence": 0.6556666666666666,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber der erste Use-Case war schon zocken, war schon spielen? Oder hast du mit Basic irgendwas und Turbo Pascal programmiert?",
      "start": 121530,
      "end": 128154,
      "confidence": 0.7576000000000003,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich glaube, das war vor der Zeit noch. Also es war definitiv der Game-Use-Case. Und auch später, wie ich meinen ersten 386er bekommen habe, das war so der erste, den ich mal, glaube ich, selber gekauft habe dann wirklich. Oder mehr oder weniger selber gekauft habe. Da hat es dann alles angefangen, dass man vier Spiele in der Autoexec.bat die Maustreiber nicht lädt, damit man mehr Memory hat und mit dieser HighRAM-Geschichte und diesen ganzen Sachen, die wir absolut nichts gesagt haben damals, aber ich habe halt einfach irgendwo gehört, das macht Sinn und habe dann halt da je nach Spiel den Maustreiber geladen oder nicht geladen und habe mir da meine eigenen Menüs irgendwie geschrieben in der Autoexec.bat. Und so hat alles angefangen.",
      "start": 128685,
      "end": 167411,
      "confidence": 0.8031451612903227,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "An welche Spiele kannst du dich denn noch erinnern die du gespielt hast? Also warst du so ein Pac-Man oder so ein Monkey Island Mensch oder warst du eher so der Crash Bandicoot Kollege oder Wipeout, so dieses Flugzeugrennen?",
      "start": 167851,
      "end": 180546,
      "confidence": 0.6906923076923078,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also definitiv Monkey Island. Monkey Island habe ich schon gespielt auf Englisch, wie ich selber kein Englisch gekonnt habe, habe ich auch von meinen Geschwistern irgendwie bekommen. Hab null verstanden, aber trotzdem probiert es irgendwie zu spielen. Und seitdem bin ich Monkey Island Fan und ich bin extrem enttäuscht, dass ich das neue Monkey Island Return to Monkey Island nicht spielen kann, weil man braucht Windows dafür. Und ich hab eigentlich aktuell einfach keinen Windows PC oder eine Konsole, wo ich das spielen könnte. Und auf Linux funktioniert das Ding nicht.",
      "start": 180586,
      "end": 207162,
      "confidence": 0.7601428571428569,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Spielst du heutzutage noch?",
      "start": 207182,
      "end": 208523,
      "confidence": 0.7122499999999999,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Nein, aber für Monkey Island hätte ich eine Ausnahme gemacht. Ich spiele mit dir die ganze Zeit, das ist wohl Aufwand genug. Jede Woche einmal für dieses Podcast. Den Podcast, sorry.",
      "start": 209043,
      "end": 218669,
      "confidence": 0.7427096774193548,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das Spiel finde ich aber relativ langweilig hier.",
      "start": 218870,
      "end": 221291,
      "confidence": 0.8117499999999999,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, aber es ist anstrengend und sehr hart.",
      "start": 221331,
      "end": 223733,
      "confidence": 0.526,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Was war denn das letzte Spiel, was du so gespielt hast? Und wann war das?",
      "start": 223773,
      "end": 226895,
      "confidence": 0.8864666666666667,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Viele, viele Jahre her und wahrscheinlich zumindest motiviert habe ich vor allem diese Adventure immer gespielt. So irgendwelche Ballerspiele oder so habe ich nur bei irgendwelchen LAN-Partys oder so gespielt und ich war eigentlich immer recht schlecht darin. Also Counter-Strike sagt mir was, habe ich mal gespielt, aber wenn nur irgendwie bei Freunden.",
      "start": 227691,
      "end": 244355,
      "confidence": 0.8234528301886791,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und diese Adventure-Games dann zusammen oder immer als Eigenbrötler und alleine?",
      "start": 244395,
      "end": 251317,
      "confidence": 0.8542727272727273,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Alleine im Keller sozusagen, wie das ein richtiger Informatiker so macht.",
      "start": 252579,
      "end": 257401,
      "confidence": 0.7003636363636363,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber du hast ein gutes Thema angesprochen, Ladenpartys, da kommen wir gleich auch nochmal drauf, klasse. Warst du selbst mit deinem Rechner auf einer Ladenparty oder warst du immer einer dieser Besucher, die abends mal kurz rumkamen, sich irgendwo bei einem Kumpel am Computer gesetzt haben, eine Wurst gegessen haben und dann weitergezogen sind?",
      "start": 257440,
      "end": 272506,
      "confidence": 0.7282962962962963,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich glaub eher Zweiteres, ja. Ich kann mich nicht erinnern, dass ich da mal ... Also, vielleicht für andere Spiele schon, aber so klassische LAN-Partys, da war ich meistens Besucher, ja.",
      "start": 273135,
      "end": 282198,
      "confidence": 0.6835483870967741,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber das war dann eher schon so diese kleinen privaten LAN-Partys mit fünf bis zehn Leuten und nicht diese großen wie Dreamforce oder Ähnliches, oder?",
      "start": 282238,
      "end": 289120,
      "confidence": 0.8371200000000001,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Hey, das hat's in Österreich sowieso nicht gegeben, glaub ich. Außerdem ist das vor dieser ganzen Internetzeit und so weiter, das war ja wirklich so lokale LAN-Partys, wo man noch irgendwie so selber ein Netzwerk aufbaut.",
      "start": 289140,
      "end": 299463,
      "confidence": 0.7171388888888889,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das war die Netzwerkverbindung damals, wirklich T-Stücke und Endterminatoren, also 100 Mbit Kabel.",
      "start": 300233,
      "end": 306401,
      "confidence": 0.7566923076923078,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Habe ich auf jeden Fall auch verwendet, ja, aber das war dann mehr so mit Freunden in kleineren LAN-Partys oder so fixe Verkabelungen mit Nachbarn oder so, hat es da auch mal gegeben bei einem Freund, da hatten wir das installiert, ja, stimmt, mit T-Stücken und so, das klassische, was war denn das, ein Gigabit, ein Megabit, nein, das war nicht mal ein Megabit, oder?",
      "start": 307642,
      "end": 328621,
      "confidence": 0.8024769230769231,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nein, ich glaube, zehn Megabit. Zehn, zehn Megabit, genau.",
      "start": 329101,
      "end": 331683,
      "confidence": 0.5655555555555556,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, zehn Megabit, ja.",
      "start": 331703,
      "end": 332424,
      "confidence": 0.43450000000000005,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "War ne tolle Zeit auf jeden Fall. Wer hat denn noch ein T-Stück? Und oh, ich hab keinen Endterminator mehr. Oh. Naja, auf der anderen Seite, die Probleme haben sich halt auch nur geändert. Später ging's halt darum, oh, wer hat noch ein Sechser-Switch?",
      "start": 332887,
      "end": 343976,
      "confidence": 0.783340909090909,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Vor allem Switch, kein Hub, weil da natürlich viel schneller.",
      "start": 345080,
      "end": 348241,
      "confidence": 0.6748000000000001,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Logisch. Was war so der Grund, warum du Computer gespielt hast? Einfach so zum Abschalten oder weil du das nächste Rätsel bei Monkey Island wirklich haben wolltest und nicht mehr schlafen konntest? War das die Zeit, wo du schon arbeiten gegangen bist? Oder warst du noch in der Schule oder wieder in der Uni? Nur, um das ein bisschen einzuordnen.",
      "start": 348281,
      "end": 370048,
      "confidence": 0.7921000000000001,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Nein, nein, also die Spielerei war alles Schulzeit. Wie ich dann studieren angefangen habe, da habe ich dann schon an Projekten gearbeitet, gefreelanced und solche Sachen gemacht, da war das Spiel genug sozusagen, das war alles davor. Mir fällt übrigens gerade ein sehr cooles Spiel ein, was wir auch hatten, das war so der Vorgänger. Das war so ein rundenbasiertes Weltraumspiel, wo wir den Spielstand dann auf Disketten abgespeichert haben und in der Schule hat es dann einen Host gegeben. Dem haben wir diese Disketten dann alle mitgegeben. Der hat diese Runden zusammengeführt. Am nächsten Tag hat er wieder alle Disketten zurückgebracht, den Spielstand wieder verteilt. Wir haben wieder einen Zug machen können. Am nächsten Tag ist es wieder losgegangen, zurück in die Schule, Disketten verteilt. Und so haben wir so ein Weltraumspiel, ein Netzwerkspiel quasi.",
      "start": 370575,
      "end": 413975,
      "confidence": 0.8028749999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ohne Netzwerk.",
      "start": 414015,
      "end": 415135,
      "confidence": 0.8315,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Halb analog gespielt, genau. Ich hab mal rausgesucht den Namen, aber ich weiß ihn leider nicht mehr genau. Ist recht schwierig zu finden, wie das Ding geheißen hat.",
      "start": 415175,
      "end": 424195,
      "confidence": 0.6848571428571429,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Was blockt dich denn heutzutage vom Computerspielen? Warum spielst du heutzutage keinen Computer mehr?",
      "start": 424235,
      "end": 428897,
      "confidence": 0.7594999999999998,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich würd mal sagen, primär die Zeit. Ist mir zu schade. Arbeite lieber an Projekten. Ist ja auch ein gewisses Spiel und eine Herausforderung. Spielst du noch?",
      "start": 429197,
      "end": 437861,
      "confidence": 0.7428148148148148,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "In letzter Zeit spiel ich nicht mehr, nein. Ich hab ungefähr Anfang Corona, Anfang erstes Jahr, Mitte ersten Jahres Corona hab ich aufgehört, weil ich ... da irgendwie hinterfragt habe, wie ich meine Zeit verbringe. Und dann hab ich gemerkt, mit Zocken verschwende ich sie recht viel. Und dann hab ich einfach aufgehört.",
      "start": 437901,
      "end": 458949,
      "confidence": 0.8723584905660378,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Du bist wirklich gut, dir halb Deutschland immer zum Feind zu machen. Du schaffst das wirklich ganz gut. Wenn du sagst, alle Gamer, das ist Zeitverschwendung.",
      "start": 458969,
      "end": 467592,
      "confidence": 0.6832692307692307,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nein, nein, nein. Und warum, das sag ich dir gleich in einer Minute. Aber der andere Grund war ganz einfach, ich habe einen unglaublich alten Windows-PC. Mit unglaublich alt mein ich so zwölf Jahre alt, 13 Jahre alt. Und du kannst dir vorstellen, dass die Grafikkarte natürlich auch nicht mehr die aktuellste ist und somit dann die aktuellste Version von Counter-Strike natürlich auch auf der kleinsten Grafikstufe dann so ein bisschen ruckelt. Und wenn du dann tot bist, du siehst den Gegner noch niemals, weil der Computer ruckelt, das macht dann irgendwie keinen Spaß.",
      "start": 468063,
      "end": 495700,
      "confidence": 0.7671170212765951,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Siehst du, Return of Monkey Island könntest du wahrscheinlich spielen. Du musst nur die richtigen Spiele spielen.",
      "start": 496260,
      "end": 500722,
      "confidence": 0.6000588235294116,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Könnte ich sehr wahrscheinlich spielen, aber dann hatte ich mir gedacht, okay, investierst du jetzt wieder Geld dafür. Ah, habe ich dann auch nicht gemacht. Und dann war es, habe ich gesagt, komm, probierst du es mal aus.",
      "start": 500742,
      "end": 509927,
      "confidence": 0.7239210526315791,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich bin ja schon kurz davor, nur einen Windows-Rechner zu kaufen für das dumme Return of Monkey Island.",
      "start": 510267,
      "end": 515308,
      "confidence": 0.6326666666666667,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Du könntest mir meinen abkaufen, wenn du möchtest.",
      "start": 515328,
      "end": 517030,
      "confidence": 0.595375,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich weiß nicht mal, wie das heutzutage funktioniert mit diesen Lizenzen. Man kann ja Windows nicht mehr einfach so rabkopieren, oder? Geht gar nicht mehr so einfach.",
      "start": 517429,
      "end": 524715,
      "confidence": 0.6317407407407407,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber die ganze Story, die du gerade so ein bisschen erzählt hast, da habe ich mich wiedergefunden. Das bedeutet, ich war früher auch immer so auf so kleinen Ladenpartys und wir haben dann auch mal größere Ladenpartys in der Autowerkstatt organisiert, wo dann so 30, 40 Leute waren.",
      "start": 524755,
      "end": 538043,
      "confidence": 0.7205416666666665,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Warum denn in der Autowerkstatt?",
      "start": 538063,
      "end": 539904,
      "confidence": 0.6964,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Weil der Vater von einem Kumpel eine Autowerkstatt hatte.",
      "start": 539924,
      "end": 542785,
      "confidence": 0.7194444444444446,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also das entspricht ja dem Duisburger Klischee schlechthin.",
      "start": 542825,
      "end": 545127,
      "confidence": 0.6335,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Naja war halt richtig dodgy so auf dem Hinterhof in so einer Autowerkstatt Hebebühne wurde zum Buffet umfunktioniert, wo dann die Pizza angeliefert wurde und so weiter und so fort und wir hatten das natürlich dann auch ein paar Leute, die waren in der Clique über uns, die waren ein bisschen älter und die hatten dann ein bisschen mehr Geld schon und ein bisschen mehr Ahnung von IT die haben sich dann, so ein Open-Source-System aufgesetzt, so einen zentralen Server, und die haben dann immer so den Counter-Strike-Server gehostet und den Unreal Tournament und Tactical Ops-Server, und dann hatten wir so ein LAN-Management, PHP-System und so weiter und so fort, das ich zwischenzeitlich dann auch mal auf GitHub gehoben habe und ganz viel SQL-Injections gefixt habe. Grüße an unsere letzte Episode. Wer also ein bisschen was über SQL-Injections hören möchte, kann gerne in die Episode 41 einmal reinhören. Na ja, auf jeden Fall ging das über die letzten paar Jahre immer so ein Up and Down. Früher hab ich sehr, sehr, sehr viel Unreal Tournament 1999 gespielt. Und davon ein Mod, der nennte sich Tactical Ops. Und Tactical Ops war eigentlich die Unreal-Tournament-Version von Counter-Strike. Weil Counter-Strike ist ja dann dieser Team-Ego-Shooter auf Basis von Half-Life.",
      "start": 545731,
      "end": 615731,
      "confidence": 0.7801553398058256,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und 99 heißt, dass der von 1999 ist?",
      "start": 616191,
      "end": 618412,
      "confidence": 0.631,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, das war die Unreal-Tournament-Version damals, genau. Es gibt ja Unreal-Tournament 2003 und da gibt's ja noch verschiedene Unreal-Tournament-Versionen. Das war also die ganz alte.",
      "start": 619963,
      "end": 628908,
      "confidence": 0.7907599999999999,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "War Counter-Strike dann nach 2000 demnach?",
      "start": 628928,
      "end": 631529,
      "confidence": 0.7014999999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nee, Counter-Strike gab's ja schon ein bisschen was länger, aber Counter-Strike selbst hatte ja mehrere Versionen. Das ist normalerweise Counter-Strike 1.6, dann Counter-Strike Source und dann Counter-Strike Global Offensive. Das ist jetzt dieses sogenannte CSGO. GO steht für Global Offensive.",
      "start": 631569,
      "end": 645637,
      "confidence": 0.7692749999999997,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Drum wolltest du es unbedingt spielen, oder? Wenn das Go heißt, so wie deine Lieblingsprogrammiersprache.",
      "start": 645985,
      "end": 650367,
      "confidence": 0.7359333333333334,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich bin ein Riesen-Go-Fan, aber ich glaub, Counter-Strike Global Offensive kam raus, bevor es die Programmiersprache Go gab. Es könnte natürlich auch sein, dass jemand bei Google gearbeitet hat, sehr früh an der Sprache Go gearbeitet hat und dann nach Valve gewechselt ist, um ... Weiß ich nicht.",
      "start": 650407,
      "end": 667274,
      "confidence": 0.8057708333333333,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Garantiert, ja.",
      "start": 667334,
      "end": 667975,
      "confidence": 0.451,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Auf jeden Fall war's dann immer so ein Up and Down und irgendwann hat keiner mehr Tactical Ops gespielt und dann bin ich zur bösen Konkurrenz gewechselt und hab immer mal wieder Counter-Strike gespielt. Primär der Use-Case war Kopf ausschalten.",
      "start": 668835,
      "end": 681507,
      "confidence": 0.7969249999999998,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Moment, das machst du ja den ganzen Tag. Was machst du da als Ausgleich?",
      "start": 681528,
      "end": 684851,
      "confidence": 0.5325714285714286,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Touché. Muss ich zugeben. Nee, aber wenn man jetzt einfach mal einen stressigen Tag hatte, dann lockt man sich da ein und wählt ein Team und kauft sich eine Waffe und macht dann Team-Taktiken, ja? Ich wollt grad sagen, kauft eine Waffe und ballert ein bisschen rum, das hört sich total schlimm an. So ist das nicht, aber es ist halt einfach nur so ein bisschen abschalten. Auf jeden Fall hab ich dann immer hier und da mal mit ein paar Freunden gespielt. So und dann ging es eigentlich genau dieselbe Route runter wie du. Man geht in die Config-Datei von dem Spiel und fängt an was zu tweaken.",
      "start": 687613,
      "end": 721710,
      "confidence": 0.7905871559633025,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Moment, was tweakt man denn da? Ich habe ja das Operating System getweakt. Was tweakt man bei einem Spiel?",
      "start": 722031,
      "end": 727515,
      "confidence": 0.6397894736842105,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, du kannst zum Beispiel das Fadenkreuz abändern, die Fadenkreuz-Farbe. Du kannst dir Befehle auf verschiedene Tasten legen, wie zum Beispiel, dass du automatisch eine Message schreibst.",
      "start": 727675,
      "end": 740586,
      "confidence": 0.788037037037037,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das heißt, statt dem Fadenkreuz kann ich mir dann so ein rosarotes, pinkes Herz zum Beispiel da hinsetzen, statt dem Fadenkreuz.",
      "start": 740726,
      "end": 749633,
      "confidence": 0.8247142857142856,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich weiß nicht, ob du Custom-Emojis, nenn ich das jetzt mal, Custom-Zeichen da reinsetzen kannst. Du kannst aber auf jeden Fall verschiedene vorgefertigte Fadenkreuze hinsetzen, ja.",
      "start": 749673,
      "end": 759882,
      "confidence": 0.7618076923076924,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Aber dazu muss ich in irgendein Skript rein. Das kann ich nicht irgendwo in den Settings auswählen, sondern das muss ich ...",
      "start": 760485,
      "end": 766298,
      "confidence": 0.5985454545454545,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das kannst du schon in einer Spielkonfiguration in einem File ändern, ähnlich wie dein Mouse Speed oder ähnlich, ob du die Waffe von dem Männchen links oder rechts hältst und so.",
      "start": 766308,
      "end": 776173,
      "confidence": 0.7432258064516127,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ah, okay.",
      "start": 776294,
      "end": 777354,
      "confidence": 0.645,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Na ja, und auf jeden Fall ist das halt die klassische Config-Datei. Die endet mit .cfg. So weit, so gut. Und irgendwann kam halt dieser Zeitpunkt, wo eSports in Deutschland und in Europa relativ groß wurde. Hast du vielleicht schon mal gehört, so die ESL und GameStar Liga und so weiter und so fort. Und diese Firmen, Magazine damals, die haben große Turniere veranstaltet. Und die machen das ja nicht, weil das tolle Menschen sind, sondern weil das natürlich ein profitorientiertes Business ist. Und irgendwann fingen die an, diese Events in großen Stadien zu streamen. Und dann haben die die Pro-Spieler da reingeholt und dann haben die Pro-Spieler vor Ort gegeneinander das Finale ausgespielt und so weiter und so fort. Das sind Riesen-Events inzwischen. Ja? Und wenn du dann ... Ich war noch nie in so einem Stadion. Aber wenn du in so einem E-Sport-Stadion sitzt, dann hast du überall Screens, wo dann das ganze Match übertragen wird, wo du dann links und rechts immer siehst, wie viele Leute leben noch, wer hat welche Waffe, wer hat wie viele Granaten noch, und Rüstung und wie viel Geld und alle in der Ruhe dran. Weil anhand dieser Attribute, wie viel Geld ein Team hat und so weiter, bestimmt sich natürlich auch die Strategie, wo stellen die sich hin, wer kauft welche Waffen und so weiter. Das ist ein Teamspiel, ein strategisches Teamspiel. Und dann fing der Nerd in mir an. Hä? Wie kriegen die denn die ganzen Infos von dem Spiel? Weil du hast da, ich sag mal, eine Beobachterrolle in dem Spiel. Es sind aber nur zehn Menschen auf dem Server, fünf gegen fünf. Und dieser Beobachter hat irgendwie alle Informationen. Wer lebt? Wer ist tot? Wie viele Lebenspunkte haben die noch? Liegt die Bombe auf irgendeinem Bombspot? Wie viele Geiseln wurden gerettet? Und so weiter und so fort. Ähnlich wie ein aktueller Twitch-Stream. Da hab ich gedacht, hä? Da muss was im Spiel implementiert sein, was die Informationen gibt. Hab ich angefangen zu googeln. Und zwar gibt es in Counter-Strike, in Counter-Strike Global Offensive, in der aktuellen meistgespielten Version, eine sogenannte Game-State-Integration. Ich denk so, what? Was ist das denn Geiles? Okay, mal durchgelesen. Die Dokumentation verlinken wir auch in den Shownotes. Die Game-State-Integration ist ein Weg für Drittapplikationen, ihre Services mit dem Spiel zu verbinden. Das bedeutet, du kannst dem Spiel, dem Counter-Strike-Spiel sagen, gib mir mal bitte alle Informationen, was jetzt gerade in dieses Spiel abgeht. Und was kann man dann damit machen? Damit kann man zum Beispiel diese Beobachterscreens bei so großen Turnieren steuern. Man kann dadurch aber zum Beispiel auch eine Philips Huey, also eine Lampe, die Farbe ändern, abhängig davon, in wie viel Sekunden die Bombe gleich explodiert. Weil im Spiel geht's ja sehr viel um Taktik, ja? Und die Bombe hat dann, die tickt dann zum Beispiel 30 Sekunden. Und wenn du dann erst bei fünf Sekunden anfängst, die Bombe zu entschärfen, kann das sein, dass du das nicht mehr schaffst und dann stirbst.",
      "start": 777394,
      "end": 951899,
      "confidence": 0.7929101796407191,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und wo ist diese API? Wer kann darauf zugreifen? Jeder? Oder gibt's da irgendwie eine Limitierung?",
      "start": 951939,
      "end": 957221,
      "confidence": 0.6704375,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das hab ich ja dann grad auch. Das war dann meine nächste Frage. Erst mal bin ich über die Use Cases gegangen und hab dann gedacht, hey, cool, was gibt's denn da und so weiter und so fort. Im Allgemeinen kann diese Game-State-Integration dich über alle Game-State-Änderungen informieren. Also alle. Wer hat welche Waffe gekauft? Wer wechselt grade welche Waffe? Wer hat welche Granate geschmissen? Und wo sind die, mit welchen Koordinaten X und Y auf der Karte?",
      "start": 957721,
      "end": 982623,
      "confidence": 0.8186025641025646,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und wo liegt diese API?",
      "start": 983343,
      "end": 985765,
      "confidence": 0.6288,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, das ist das Geile. Die API liegt im Client. Das bedeutet, du kannst eine Adresse zu einem Webserver in deiner Config hinterlegen und dann postet dein Client ... alle Game State Changes zu einem zentralen Server. Das bedeutet, wenn wir beide gegeneinander Counter-Strike spielen würden, dann müsstest du eine Webhook-Adresse eigentlich in deine Config mit eintragen, und dann bekommt der zentrale Webhook-Server all deine Informationen über deinen Spielverlauf.",
      "start": 985805,
      "end": 1019107,
      "confidence": 0.8163623188405797,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Aber muss es dann jeder machen, der da mitspielt? Oder reicht da ein Client, und der bekommt alle Infos von allen?",
      "start": 1019167,
      "end": 1024490,
      "confidence": 0.8067619047619048,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Da gibt es zwei Arten. Und zwar gibt es wohl auch eine Möglichkeit, das auf dem zentralen Server irgendwie zu machen. Der hat dann alle Informationen. In einem klassischen LAN-Umfeld wird das dann eigentlich jeder machen. Aber wenn du zum Beispiel jetzt auf so einem großen Turnier wärst, dann ist das halt ein Teil, was von dem Veranstalter halt vorgeschrieben wird.",
      "start": 1025170,
      "end": 1045611,
      "confidence": 0.831704918032787,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Aber kann ich da dann die Position von anderen Leuten auslesen? Da könnt ihr ja voll cheaten.",
      "start": 1046162,
      "end": 1051203,
      "confidence": 0.741764705882353,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wenn du real-time-technisch den Webhook-Server, die Daten, die du da kriegst, während du spielst, das machst, dann wäre das möglich, ja. Darum geht's ...",
      "start": 1051243,
      "end": 1061896,
      "confidence": 0.7345416666666668,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das hast du natürlich nicht gemacht.",
      "start": 1061906,
      "end": 1062867,
      "confidence": 0.4275,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Dann würde ich ja nicht hier sitzen, oder? Dann würde ich irgendwo in der Sonne sitzen, mir einen Cocktail trinken und mich mit meinem wohlverdienten Preisgeld zurücklehnen. Aber was das Geile ...",
      "start": 1063887,
      "end": 1072921,
      "confidence": 0.7624999999999998,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Man sieht schon die kriminelle Energie, die du hast. Letztes Mal SQL-Injections. Hast du allen erklärt, wie man richtig SQL-Injections macht? Wie man richtig die Game-Industrie hackt oder cheatet und Preisgeld einsammelt? Was kommt nächste Woche?",
      "start": 1072931,
      "end": 1087417,
      "confidence": 0.8358333333333333,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Na ja, du musst halt schon sehen, dass dein Gegner dann auf jeden Fall auch die Webhook-Adresse von deinem Server eingetragen hat, ne? Es sei denn, du hostest natürlich den Server, das ist eine andere Baustelle. Wie dem auch sei.",
      "start": 1088028,
      "end": 1100037,
      "confidence": 0.7718249999999999,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Was hast du dann gemacht mit dieser Schnittstelle?",
      "start": 1100417,
      "end": 1103359,
      "confidence": 0.6765000000000001,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jaja, genau, und dann bin ich da tiefer, ich bin weiter das Rabbit Hole runter, du kennst das ja. Das ist ungefähr so wie, als wenn du dich über Landmaschinen auf YouTube informierst, dann endest du auch irgendwann ganz schlimm, irgendwo in Arkansas in Amerika und in ganz großen Landmaschinen.",
      "start": 1103379,
      "end": 1117270,
      "confidence": 0.6967,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich hab mir gedacht, ich kann mich eigentlich nicht reinversetzen, dass ich da das Rabbit Hole eines Spieles runtergehen würde. Noch weniger kann ich mir vorstellen, dass ich das Rabbit Hole von irgendwelchen Landmaschinen nach unten gehe. Aber klar, alle Hörer und Hörerinnen werden sich jetzt da reinfühlen können und mit dir mitleiden, wie man da das Landmaschinenrabbit Hole runtersteigt.",
      "start": 1117290,
      "end": 1135745,
      "confidence": 0.7171666666666671,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Zurück zur Counter-Strike Global Offensive Game State Integration. Du addest also eine Adresse, eine Webadresse zu einem Server in deine Config. Und wenn du das Spiel dann startest, dann kriegt dieser Server konstant HTTP-Post-Requests und schickt dir JSON-Daten mit der Game-Struktur. Ja, mit diesen Informationen. Es ist grad die Kaufrunde, wir sind grad in Runde drei von 15. Es ist nur noch eine Minute verfügbar und die Bombe liegt noch nicht und jemand hat eine Granate geschmissen und was weiß ich nicht noch alles.",
      "start": 1137068,
      "end": 1170177,
      "confidence": 0.7802619047619048,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und das sind normale HTTP-Requests einfach.",
      "start": 1170217,
      "end": 1172238,
      "confidence": 0.5233333333333333,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ganz genau.",
      "start": 1172398,
      "end": 1172778,
      "confidence": 0.1655,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Wie wirklich bei einem Webhook.",
      "start": 1172798,
      "end": 1174239,
      "confidence": 0.434,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "HTTP-Post-Request, ganz normal wie bei einer ganz klassischen REST-API. Der PostBody ist in JSON. Ja, ganz normal wie bei GitHub oder bei IFTTT oder bei was auch immer, welche API, mit der du gerade sprechen möchtest. Die Art und Weise, ich hab ja gesagt, du musst die Webhook-Adresse in deine Config eintragen. Die config ist aber jetzt nicht im ini-format oder im json-format oder im xml-format, sondern die config ist in einem vdf-format, vdf wealth data format, weil du bist ja nur als firma cool, wenn du dein eigenes datenformat hast. Natürlich.",
      "start": 1174259,
      "end": 1208509,
      "confidence": 0.7863152173913046,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ist das ein Binärformat oder was ist das für ein Format?",
      "start": 1208549,
      "end": 1211631,
      "confidence": 0.5152727272727272,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Es ist ein Klartextformat. Und dieses Format ist relativ einfach. Du musst jetzt wissen, dass dieses Format, dieses VDF, Valve Data Format, in der Source Game Engine verwendet wird. Das bedeutet, dass es nichts Counter-Strike-spezifisches, sondern das gleiche Format wird auch in Half-Life 2, in Portal 1 und 2, in Team Fortress 2 oder in Left 4 Dead 1 und 2 verwendet. Also eigentlich in allen Spielen, die auf der Source-Spiele-Engine basieren. Was schon mal ganz geil ist, weil es besteht nämlich die Hoffnung, dass diese Art von Spielen dann eine ähnliche Game-State-Integration haben. Naja, machen wir weiter. Dieses Format ist halt meines Erachtens nach sehr, sehr simpel und es gibt eigentlich nur drei Control-Character. Eine geschweifte Klammer, also eine offene geschweifte Klammer, eine geschlossene geschweifte Klammer und ein Anführungszeichen. Mehr nicht.",
      "start": 1211651,
      "end": 1261373,
      "confidence": 0.8024015151515151,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also eben wie Jason.",
      "start": 1261413,
      "end": 1262535,
      "confidence": 0.51025,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, Jason hat noch einen Doppelpunkt und einen Komma haben wir hier nicht. Das bedeutet, Zwei Settings werden einfach nur über eine Newline getrennt. Und zwischen Key und Value besteht einfach nur ein Whitespace. Ja? Und der Key ist dann in Anführungszeichen ... Also, das ist relativ einfach. Und du kannst dann Sub-Ebenen machen mit geschweiften Klammern. Ja? So ähnlich wie JSON. Okay, und jetzt hab ich gedacht, hm, wenn ich jetzt also mit meinen Freunden Counter-Strike spielen möchte, und ich möchte Daten von deren Spielverhalten haben, weil ich hab festgestellt, ich bin gar nicht so gut in Counter-Strike, und ich krieg immer relativ oft auf die Mütze, und ich hab mir gedacht, wenn ich doch viele spiele, dann hab ich doch auch viele Daten, und somit kann ich doch über mein Spielverhalten lernen. Also, ich schau mir einfach an, ne klassische Datenanalyse, ne? der Observability und Monitoring-Folge darüber gesprochen haben, dass wir so was wie Sentry einbinden, um Exceptions zu kriegen, hab ich mir gedacht, warum sammle ich nicht mal detaillierte Daten über mein Spielverhalten bei Counter-Strike? Und dann habe ich gedacht, okay, wäre das nicht toll, wenn nicht nur ich lernen könnte, sondern alle. Und dann war die nächste Frage, wie bekomme ich meine Freunde dazu, dass die jetzt meinen Webhook-Server in ihre Config eintragen. Ich könnte jetzt jedem über WhatsApp schreiben, hey, pass mal auf, ich habe hier diese dodgy URL, kannst du die mal bitte bei dir eintragen. Dann fragen die fünf mal nach, Moment, wo ist denn jetzt noch die Datei und was muss ich denn noch mal eintragen und das sind ja alles keine Programmierer. Das sind alles in Anführungszeichen professionelle Counter-Strike-Spieler. Also habe ich mir gedacht, wir lösen das Problem so wie jeder normale Mensch.",
      "start": 1262595,
      "end": 1364841,
      "confidence": 0.7998116438356161,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Durch Over-Engineering.",
      "start": 1364861,
      "end": 1366401,
      "confidence": 0.7155,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wir schreiben einen Installer. Also habe ich mich hingesetzt und habe einen Installer geschrieben, den startest du und der sucht dir automatisch das Installationsverzeichnis auf deinem Betriebssystem für Counter-Strike und sucht dir dann die entsprechende Config-Datei, wo das hin muss und legt dann da eine automatische Config-Datei hin von den Settings, die ich haben möchte für den Webhook-Server.",
      "start": 1366421,
      "end": 1391852,
      "confidence": 0.7935862068965519,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, was für Sprache hast du dazu verwendet? Und du musst wahrscheinlich die Datei auslesen, die schon dort ist, und dann irgendwie abändern, oder? Du kannst ja nicht einfach eine dazulegen.",
      "start": 1392592,
      "end": 1402460,
      "confidence": 0.7444838709677418,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich habe die Sprache Golang verwendet dafür.",
      "start": 1402500,
      "end": 1404582,
      "confidence": 0.8632857142857142,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Klar. Logisch.",
      "start": 1404622,
      "end": 1406183,
      "confidence": 0.8015,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ist halt, lässt sich super einfach überall kompilieren und kann ich vorkompilieren, vorkrosskompilieren, ohne dass ich ein Linux-System habe und so weiter und so fort. Und es gibt zwei Möglichkeiten, wie du diese Config dahinlegst. Entweder du legst eine neue dahin mit einem speziellen Namen. Das bedeutet, du kannst mehrere Webhook-Server haben, was ziemlich cool ist eigentlich. Ich kenn aber nicht das Limit. Wie viel Webhook-Server brauchst du, bis das Senden der Daten von Counter-Strike während des Spiels das Spiel selbst beeinflusst?",
      "start": 1406244,
      "end": 1437621,
      "confidence": 0.7688658536585364,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das heißt, du hast pro Datei einen Webhook-Server, wenn ich den mal so nenne.",
      "start": 1438421,
      "end": 1442963,
      "confidence": 0.49978571428571433,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nee, du kannst ja auch in jeder Datei schon dieselbe Adresse eingeben, ja? Oder mit einem anderen Pfad oder was.",
      "start": 1443613,
      "end": 1450518,
      "confidence": 0.7842,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, aber kannst du mehrere Server in einer so einer VDF eingeben?",
      "start": 1450678,
      "end": 1455521,
      "confidence": 0.674,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nein.",
      "start": 1455562,
      "end": 1455722,
      "confidence": 0.731,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Es ist immer pro VDF-Datei ein Server.",
      "start": 1455762,
      "end": 1458203,
      "confidence": 0.6324285714285713,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Genau. Was ich dann gemacht hab, ich hab gesagt, wenn du diese Go-Applikation, diesen Go-Installer gestartet hast, dann hat dein HTTP-Request gemacht an meinen zentralen Server, um sich die aktuellste Config zu holen. Ja?",
      "start": 1458223,
      "end": 1470072,
      "confidence": 0.7975588235294119,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Aber steht da drinnen in dieser Config.",
      "start": 1470112,
      "end": 1471633,
      "confidence": 0.7788571428571427,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Dann, Da steht zum Beispiel die Adresse des Webhook-Servers drin und welche Informationen der senden soll. Wie zum Beispiel, welche Präzision hat zum Beispiel die Zeitangabe, ja? Mit wieviel Mikrosekunden hinten dran.",
      "start": 1471673,
      "end": 1485222,
      "confidence": 0.8012499999999999,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, du holst dir dann diese Datei, da stehen ein paar Infos drinnen, und dann suchst du dir den Installationsfolder raus und legst sie dorthin.",
      "start": 1485779,
      "end": 1494701,
      "confidence": 0.6557599999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Auf dem Web-Server habe ich einen Endpunkt, der nennt sich slash-config, da habe ich immer die Config hinterlegt, damit ich später sagen kann, hey Jungs, führt den Installer bitte nochmal aus, und der überschreibt dann die Config. Damit ich auch ganz einfach Configs updaten kann.",
      "start": 1494741,
      "end": 1510264,
      "confidence": 0.7961777777777779,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, also du hast jetzt ziemlich viele verrückte Leute gefunden, die da irgendein Executable von dir ausführen, das irgendwas bei ihnen macht. Okay, und jetzt nehmen wir mal an, du hast jetzt weniger kriminelle Energie als sonst und hast nur brav diesen Hook da eingetragen bzw. die Config. Und was passiert dann?",
      "start": 1510515,
      "end": 1526788,
      "confidence": 0.7976923076923076,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also erstmal hab ich die Config vom Webserver untergeladen und hab die dann auf Festplatte geschrieben. Der Punkt ist aber, irgendwie muss ich ja gucken, ich hab nicht ganz einfach, ganz doof die Datei immer überschrieben oder dahingesetzt, sondern ich hab jedem, du kannst in dieser Konfiguration auch noch eine eindeutige ID mitgeben. Also hab ich immer eine neue ID generiert. Und beim Updaten wollte ich die ID aber beibehalten. Das bedeutet, ich muss das Valve Data Format, die Config, irgendwie verstehen. Das bedeutet, ich kann natürlich die Datei öffnen und dann per Regex da rüber gehen. Kann ich schon. Das wäre aber zu einfach, habe ich mir gedacht. Und ich hatte noch nie eine Ahnung, wie ich eigentlich ein Parser oder ein Lexer oder so schreibe. Und dann habe ich mir gedacht, warum schreibe ich nicht ein Parser und ein Lexer für das Valve-Data-Format, baue das in den Installer ein, damit ich diese Config-Datei automatisch modifiziere.",
      "start": 1527468,
      "end": 1574791,
      "confidence": 0.8117388535031846,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, wenn ich jetzt dich zahlen würde als Angestellten zum Beispiel, würde ich sagen, Moment, Andi, hast du mal auf GitHub gesucht? Gibt's da nicht schon vielleicht einen Parser? Das ist ja ein Standardformat.",
      "start": 1575635,
      "end": 1586059,
      "confidence": 0.7193529411764706,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich hab auf GitHub gesucht, und da gab's auch die ein oder andere Library. Da gab's eine in PHP, da gab's eine in Python. Und dann hab ich einfach mal eine komplette Config, die ich schreiben wollte, da reingehauen. Und soll ich dir was sagen? Alle sind auf die Nase gefallen.",
      "start": 1586099,
      "end": 1601965,
      "confidence": 0.7846470588235294,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also wie jeder gute Entwickler hast du probiert ein Edgecase zu finden, als guten Grund, warum du eine Library nicht verwenden willst, um die selber programmieren zu können. Ich verstehe schon, ja?",
      "start": 1602700,
      "end": 1613586,
      "confidence": 0.78290625,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Sie haben auf jeden Fall nicht genau das gemacht, was ich wollte.",
      "start": 1613646,
      "end": 1616667,
      "confidence": 0.8849999999999999,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Genau, das ist die zweite Ausrede nochmal, wenn man eine Library nicht verwenden will. Entweder sie hat irgendwo ein Edgecase, da fliegt ein Arrow, den ich nicht verstehe und irgendwas funktioniert nicht auf Anhieb, was ich gerne hätte, was auch niemand braucht. Aber okay. Gehen wir mal davon aus, dass es war wirklich so und du hast deine eigene Library programmiert. Wie hast du das gemacht?",
      "start": 1616707,
      "end": 1637239,
      "confidence": 0.6909090909090907,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Fangen wir mal an. Hast du schon mal ein Parser und ein Lexer geschrieben?",
      "start": 1637279,
      "end": 1640642,
      "confidence": 0.6036428571428571,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Natürlich.",
      "start": 1640682,
      "end": 1641603,
      "confidence": 0.883,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Was hast du geparst und gelext?",
      "start": 1641643,
      "end": 1643444,
      "confidence": 0.7378333333333332,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich weiß es ehrlich gesagt nicht mehr, aber es war an der Universität, um funktionale Programmiersprachen zu testen oder zu lernen.",
      "start": 1643484,
      "end": 1650009,
      "confidence": 0.7108571428571429,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich hab das auf jeden Fall noch nie gemacht und ich hab da immer ein bisschen Respekt vor, Ich denke mir, okay, jede Programmiersprache hat einen Compiler und Pasa und Lexa sind oft irgendwie Teile eines Compilers. Und ich hab immer allerhöchsten Respekt vor Leuten, die Compiler-Bau betreiben, weil ich halte die für unglaublich intelligent, weil ich davon einfach nichts verstehe.",
      "start": 1650029,
      "end": 1671662,
      "confidence": 0.8503770491803275,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Darum hast du dir im nächsten Schritt das Drachenbuch gekauft.",
      "start": 1671702,
      "end": 1674763,
      "confidence": 0.7481,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Was für ein Drachenbuch?",
      "start": 1674803,
      "end": 1675524,
      "confidence": 0.5365,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Siehst du, normal als guter Entwickler würde man normal das ordentlich machen und sich dann das Drachenbuch kaufen. Es gibt das berühmte Drachenbuch über Compiler Bau. Das ist ein Standardwerk, ziemlich alt, gibt es glaube ich eine zweite Auflage auch, hat irgendwie 900 Seiten und am Cover ist ein Drache und darum heißt es das Drachenbuch. Verlinken wir natürlich in den Shownotes. Eigentlich hättest du es kaufen sollen zuerst 900 Seiten durchlesen, damit du das richtig verstehst und dann als die Library Ist das wirklich gut?",
      "start": 1676224,
      "end": 1702588,
      "confidence": 0.7605581395348837,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Hast du was gelesen?",
      "start": 1702628,
      "end": 1703629,
      "confidence": 0.512,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Natürlich habe ich es nicht gelesen. Aber ich kenne Leute, die es gelesen haben und es ist wirklich ein absolutes Standardwerk. Aber 900 Seiten nur zu Compiler ist mir dann auch zu viel, ehrlich gesagt.",
      "start": 1703649,
      "end": 1712913,
      "confidence": 0.7126285714285713,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Naja, auf jeden Fall hab ich dann angefangen, hm, wie schreib ich denn Parser und Lexer für das Valve-Data-Format? In Go, logisch. Gab's ja noch nicht alles. Und dann hab ich ein bisschen gegoogelt, und dann hab ich einen sehr, sehr guten Artikel gefunden, der heißt Handwritten Parsers and Lexers in Go. Und was er in diesem Artikel macht, ist, der baut einen Lexer und einen Parser für SQL-Queries. Ja, select Sternchen from table where where condition.",
      "start": 1713676,
      "end": 1740636,
      "confidence": 0.7689480519480519,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ist auch gut, weil da gibt's garantiert auch noch keine.",
      "start": 1740736,
      "end": 1744379,
      "confidence": 0.6806,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Na ja, gut, aber der Artikel war halt eher so dafür bei, ich bring das mal bei. Und dann hab ich mir gedacht, ey, cool, das ist ja eigentlich genau das, was ich möchte, nur dass das Format ein bisschen anders ist. Fun fact, der parser und lexer aus dem Blogartikel, den verlinken wir natürlich auch in den Shownotes, basiert auf dem parser und lexer von InfluxDB für die Influx Query Language.",
      "start": 1744419,
      "end": 1766457,
      "confidence": 0.729027777777778,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Erklär mal, was InfluxDB ist.",
      "start": 1766917,
      "end": 1769098,
      "confidence": 0.75,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "InfluxDB ist eine Datenbank mit dem Spezialfokus auf Timeseries-Daten. Also das bedeutet, wenn ihr zum Beispiel irgendwie einen Temperatursensor habt, dann könnt ihr da zum Beispiel kontinuierlich die Temperaturen in Relation zu einer Zeit reinsetzen und darauf schon eine Grafen machen. Ja, also eigentlich alles mit zeitbasierten Daten, da ist diese Datenbank wundervoll für.",
      "start": 1769138,
      "end": 1792149,
      "confidence": 0.827685185185185,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und die hat ein SQL-Interface oder so eine Subsprache von SQL.",
      "start": 1792189,
      "end": 1796611,
      "confidence": 0.7593636363636364,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Die hat ein ähnliches SQL-Interface, nennt sich... SQL-Dialekt. Influx Query Language, genau. Naja, jetzt stand ich erstmal vor dem Problem, ich hab keine Ahnung, wie ich ein Lexer und Parser baue.",
      "start": 1796631,
      "end": 1807836,
      "confidence": 0.7038387096774195,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "So Moment, bevor du da jetzt mal bauen anfängst, erklär mal, was ein Lexer und Parser ist, wenn du es dann schon so sinnvoll gelesen hast. Und zwar in dem, ich hab das jetzt neulich eingeführt in einem anderen Podcast mit einem Kollegen, in dem Twitter-Format. Erklär mal in dem Twitter-Format 240 Zeichen, was ein Lexer und Parser ist.",
      "start": 1807856,
      "end": 1825750,
      "confidence": 0.7341525423728812,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und genau vor diesem Problem stand ich. Ich wusste gar nicht, was ein Lexer und was ein Parser ist. Ich hab die Wörter schon mal gehört, aber ich wusste ja gar nicht, wofür die da sind und wer kommt überhaupt wann.",
      "start": 1826138,
      "end": 1834861,
      "confidence": 0.8167804878048782,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "240 Zeichen, los.",
      "start": 1834871,
      "end": 1836242,
      "confidence": 0.5826666666666668,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, das schaff ich jetzt nicht. Also, ein Lexer selbst wird auch unter anderem ein Tokenizer oder einen lexikalischen Scanner genannt. Also immer, wenn ihr so was hört, ja, Tokenizer, lexikalischer Scanner oder Lexer, das ist alles dasselbe. Und zwar beschreibt man als lexikanische Analyse die Zerlegung einer Zeichenkette in eine Folge von logisch zusammengehörigen Einheiten, sogenannten Tokens. Jetzt denkt man, hä? Was ist das denn? Ja, was das jetzt ist, kommen wir jetzt gleich zu. Ein Lexer oder ein Tokenizer ist meist ein Teil eines Compilers und wird als erster Schritt in der Analysephase ausgeführt. Okay, klasse. Das bedeutet, ich fange erstmal mit einem Lexer an. Ohne Lexer geht erstmal nix. Das Ergebnis eines Lexers wird dann im nächsten Schritt von einem Parser weiterverarbeitet. Ah, okay.",
      "start": 1836262,
      "end": 1884677,
      "confidence": 0.7859212598425195,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Klopp.",
      "start": 1884717,
      "end": 1885297,
      "confidence": 0.833,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Verstehe ich. das bedeutet also eigentlich ich habe einen block von text und zwar ist das eigentlich meine vdf datei das bedeutet ich mache die datei auf lese die komplette datei und schmeiß das in den lexer und der lexer bricht mir dieses format in sogenannte einzelne bruchteile auf sogenannten tokens und jeder token hat dann in so einer art ein Eine Bedeutung. Ein Token ist also eigentlich nur eine Zeichenkette, der von einer formalen Grammatik ein Typ zugewiesen wird. Wenn ich jetzt sage, das Format ist sehr einfach, wie ich gerade beschrieben habe, und da gibt es eine geöffnete geschweifte Klammer und eine schließende geschweifte Klammer und diese geschweiften Klammern bilden den Start zu einer weiteren Unterebene ab. Dann kann ich sagen, okay, die geschweifte Klammer ist ein Token. Und was vor der geschweiften Klammer steht, ist ein Key. Und alles, was in der geschweiften Klammer ist, ist wieder ein assoziatives Array von Key und Values. Ja?",
      "start": 1885337,
      "end": 1941479,
      "confidence": 0.8544367088607595,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Aber ein Tokenizer, der bricht die Sachen ja nur auf. Der beschreibt ja nicht, was drinnen ist. Der versteht das ja noch nicht. Das, was du jetzt machst, ist Start und Ende und so weiter. Das ist ja schon eine Zuordnung von den Tokens.",
      "start": 1941519,
      "end": 1953822,
      "confidence": 0.7896590909090911,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, nee, der Token ... Der Tokenizer muss schon wissen, was ist denn ein vollständiges Token? Der Token gibt dir jetzt nicht jeden einzelnen Buchstaben oder jedes einzelne Zeichen zurück, sondern der gibt dir schon die logische Sequenz von den einzelnen Zeichen. Wieder Beispiel. Wenn ich eine Key-Value-Relation habe, dann gibt der Tokenizer mir den Key alleine zurück und das Value. Ja, aber Key und Value sind dann in der Regel eine Kombination von Zeichen. Sagen wir mal, der Key ist Foo und das Value Bar.",
      "start": 1953842,
      "end": 1983611,
      "confidence": 0.7718139534883721,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Aber versteht der Lexer schon, was ein Key und was ein Value ist? Also gibt er zurück, das ist ein Key und das ist ein Value, oder gibt er dir zurück, da ist Token 1 und da ist Token 2?",
      "start": 1983671,
      "end": 1992463,
      "confidence": 0.6863499999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Der Lexer gibt mir schon zurück, das ist ein Token vom Typ geöffnete geschweifte Klammer.",
      "start": 1992473,
      "end": 1998675,
      "confidence": 0.8753999999999998,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay.",
      "start": 1998735,
      "end": 1999235,
      "confidence": 0.524,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und der Lexer gibt mir bei diesem Key-Value-Pair, da gibt er mir die Zeichenketten zurück. Der Lexer weiß aber nicht, dass das eine ein Key oder eine andere ein Value ist. Das bedeutet, die Interpretation der Semantik, ob das ein Key oder ein Value ist und wie man das dann hierarchisch zusammenstöpselt, das wiederum macht dann der Parser. Aber erstmal wird der Content von deiner VDF-Datei, von meiner Config, vom Tokenizer zerlegt.",
      "start": 1999675,
      "end": 2026666,
      "confidence": 0.8310138888888889,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und wie hast du das gemacht? Hast du das selber programmiert? Hast du da irgendwelche Libraries verwendet?",
      "start": 2027250,
      "end": 2031133,
      "confidence": 0.4083529411764706,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nö, das hab ich selber programmiert. Bin ich auch ein bisschen stolz drauf, muss ich zugeben. Wie das eigentlich funktioniert, vielleicht haben das manche Leute im Programmierumfeld schon mal gehört, aber wenden das gar nicht so täglich an. Und zwar, bei Lexern ist man oft im sogenannten State Machine unterwegs. Auf Deutsch heißt das Endlicher Automat. Und zwar juckelst du eigentlich über das komplette File, über die komplette Zeichenkette und versuchst, daraus irgendwie Sinn zu ergeben. Du musst natürlich schon das Format verstehen, wie das aufgebaut ist. Aber was ich eigentlich mache ist, ich lese mir jedes einzelne Zeichen von dieser Datei nacheinander durch und sage, oh, das hier ist ein Leerzeichen. Ja, dann scanne ich bis zum nächsten Nicht-Lehrzeichen, also bis zum nächsten Zeichen, was ich kenne. Und dann, ich schaue mir einfach jedes Zeichen an und anhand des Zeichens entscheide ich, okay, lese ich einfach weiter oder packe ich das gelesene Zeichen in einen Buffer und lese bis ein neues Zeichen kommt, damit ich weiß, okay, ist das der Start eines Tokens, ist das das Ende eines Tokens? Und mit dieser semantischen Analyse anhand des Wissens, wie ein Token aussieht, was ein Anführungszeichen ist, was eine geöffnete Klammer ist, was eine schließende Klammer ist, zerlege ich die ganzen Sachen dann einfach.",
      "start": 2031153,
      "end": 2107587,
      "confidence": 0.8195492957746476,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, jetzt bekommst du da am Ende diese Tokens raus. Das sind jetzt bei dir da diese zwischen den geschwungenen Klammern, diese Werte oder mit den geschwungenen Klammern, keine Ahnung, wie dieses VDF-Ding halt aufgebaut ist. Was machst du danach damit?",
      "start": 2107627,
      "end": 2119555,
      "confidence": 0.7407317073170729,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Die ganzen Tokens schmeiß ich dann in einen sogenannten Parser. Und den Parser hab ich auch geschrieben. Was der Parser eigentlich macht, der macht eigentlich aus diesem Haufen von Tokens, macht der eigentlich einen Sinn. Das bedeutet, der kümmert sich darum, um die geordnete Weiterverarbeitung in ein geeignetes Format.",
      "start": 2120535,
      "end": 2138288,
      "confidence": 0.8409795918367345,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Bevor du weiterredest, noch eine Frage vorweg, weil du hast das wirklich alles selber programmiert, du hast auch keine Libraries für irgendwelche State Machines, endliche Automaten, irgendwas diesbezüglich verwendet, auch beim Parser, alles wirklich hardcore, ohne irgendwas Externes geschrieben.",
      "start": 2139668,
      "end": 2155493,
      "confidence": 0.7729230769230769,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, also die Frage hört sich jetzt total voll intelligent an von dir, aber bei mir ist die State Machine und der endliche Automaten eine scheiß Vorschleife.",
      "start": 2155873,
      "end": 2163455,
      "confidence": 0.763037037037037,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, ja, ist es ja am Ende auch. Du hast keine Rekursion verwendet in dem Fall? Es sind auch so klassische Anwendungen normalerweise für Rekursion.",
      "start": 2164022,
      "end": 2172105,
      "confidence": 0.71224,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, doch, natürlich hab ich Rekursion verwendet, weil du musst ... Ich muss ja ... Ich weiß ja nicht, wie viel Level die Konfig runtergeht.",
      "start": 2172145,
      "end": 2179428,
      "confidence": 0.81024,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, ja. Okay, aber du hast die Tokens. Und jetzt, wie ist dein Parser aufgebaut? Wie bist du überhaupt da an das Problem drangegangen? Woher weißt du, wie du einen Parser schreiben musst? Oder hast du das zusammengedacht?",
      "start": 2180008,
      "end": 2192473,
      "confidence": 0.6889736842105263,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nö, ich hab mir diesen Blogartikel genommen, und der Blogartikel hat darüber beschrieben, wie der das für einen SQL-Query macht, und ich hab das dann, das SQL-Query-Problem auf mein VDF-Problem übertragen, weil eine SQL-Query ist halt auch so eine Basis-SQL-Query, ja? Also jetzt ohne Subselects, ohne Having, ohne GroupBy, sondern einfach select from where. Hat ja eigentlich auch nur drei Elemente. Und da gibt's dann ein paar Charakter, da gibt's dann wie zum Beispiel Feldnamen, da gibt's ein Komma, da gibt's ein Asterix, also ein Sternchen für alle Felder und so weiter und so fort. Also, die Anzahl der Tokens, die in diesem Blogartikel beschrieben wurden, waren auch sehr minimal gehalten. Und da bin ich einfach an diesem Blogartikel weitergehangelt und hab dadurch dann ein paar Nächte gebraucht, bis ich das mal für das VDF-Format gemacht hab.",
      "start": 2192791,
      "end": 2238333,
      "confidence": 0.7983284671532846,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Okay, und was macht dein Parser dann?",
      "start": 2239537,
      "end": 2241818,
      "confidence": 0.7092857142857143,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Naja, mein Parser versucht, dem ganzen Token dann irgendeine Semantik zu geben. Allgemein werden Parser dazu verwendet, den Text in eine neue Struktur zu übersetzen. Und zum Beispiel in einen Syntaxbaum. Und genau das habe ich gemacht. Da ich ja gerade gesagt habe, dass das While-the-Data-Format mehrere Ebenen haben kann. Die können Config-Settings auf der Top-Level-Ebene haben und jeder einzelne Key kann nochmal Unter-Settings haben. Was der Parser dann macht, der baut daraus ein assoziatives Array. Der baut also eigentlich eine klassische Hash-Map auf, die ich dann in Golang ganz klassisch und strukturiert verwenden kann. Das bedeutet, dieses klassische Key-Value-Format mit Unterebenen und so weiter transformiere ich eigentlich in einen nativen Goaling-Datentyp. Du kannst dir vorstellen, eigentlich wie HTML-Code. Und da kommen Parser eigentlich auch super oft zum Einsatz. Und zwar jeder Webbrowser hat einen Parser, der aus der Webseite, aus dem klassischen HTML, irgendeine semantische Struktur baut. Das ist der sogenannte DOM, ja? Und wo dann die ganzen JavaScript-Leute drauf rumhantieren und dann Elemente verschieben und so weiter und so fort. Und dieser Syntaxbaum von HTML muss ja auch irgendwie vom Webbrowser verstanden werden. Also er muss ja wissen, wann du ein kursives HTML-Element hast, damit er den Text kursiv macht. Und der Parser im Webbrowser macht eigentlich genau das. Der baut sich einen Syntax-Tree auf und schaut dann, wie muss ich diesen Syntax-Tree darstellen. Das gleiche wie beim XML-Parser oder beim SLS-Parser oder ähnliches. Oder auch beim URL-Parser, beim URI-Parser. Eine URL hat ja eine gewisse Semantik. Und jetzt kannst du ein Tokenizer darüber laufen lassen. Und der Tokenizer schmeißt dir die einzelnen Elemente einer URL raus. Username, Passwort, Port, Fahrt, Fragment und so weiter und so fort. Und der Parser bringt dir das dann in die Semantik. Was ist denn der Username? Was ist denn das Passwort? Was ist denn der Port? Ja, und wie werden die unter anderem zusammengesetzt? Und genau das macht mein Parser dann eigentlich auch.",
      "start": 2241858,
      "end": 2361186,
      "confidence": 0.7904782608695651,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und das hast du alles nur gemacht, damit du diese ID auslesen kannst?",
      "start": 2361466,
      "end": 2364607,
      "confidence": 0.5978461538461539,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das klingt jetzt alles so, als wäre das alles nicht notwendig gewesen.",
      "start": 2364647,
      "end": 2367907,
      "confidence": 0.8443333333333333,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das würde ich auch so sagen. Ja, hast du vollkommen recht.",
      "start": 2367927,
      "end": 2370528,
      "confidence": 0.5161818181818183,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Vielleicht hast du recht, aber es war enorm spaßig, weil der Clou ist, ich konnte, dann habe ich das halt so halbwegs ans Fliegen gekriegt und dann kam ja diese, dann kam ja mein Production Diplomate, ja, mein Production Diplomate war ja, ich habe meine Kollegen angerufen, Mama, Jungs, ich gebe euch jetzt eine Adresse, ladet mal die Dodgy Exe Datei da runter und führt die mal bitte aus, ja. Und dann war das so eine Art Remote-Debugging. Und das Tolle ist, in meiner eigenen Testphase, also das Testing war schon ziemlich cool, weil ich hab das immer gebaut, gebaut, programmiert, hab das kompiliert, hab das bei mir ausgeführt, hab Counter-Strike gestartet, ob wirklich Dateien und Elemente und Webhooks auf meinem Web-Server ankommen. Scheiße, hat nicht funktioniert, Counter-Strike wieder aus. Wieder gemacht. Also, ich muss schon sagen, das war wieder so ein paar Abende, wo ich ... voll im Flow war. Ja, also wirklich, ich hab vergessen zu essen, zu trinken, weil das war so spaßig. Also, es hatte eigentlich nichts mehr mit Counter-Strikes zu tun. Ich hab eigentlich nur versucht, daraus zu erfinden, wie ich ein parserlexer fürs VDF-Data-Format.",
      "start": 2371088,
      "end": 2433934,
      "confidence": 0.7321631578947365,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "... Hast du eigentlich in deinem Studium nie irgendwas in die Richtung gemacht?",
      "start": 2433944,
      "end": 2437776,
      "confidence": 0.6491538461538462,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also, ich meine, etwas in den Studienunterlagen gelesen zu haben. Und gegebenenfalls hätte mir diese Vorlesung dann auch sehr viel Zeit erspart.",
      "start": 2437816,
      "end": 2445059,
      "confidence": 0.8970909090909089,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "So ein Klassiker ist übrigens, dass man da Antel-R verwendet, da definiert man dann die Grammatik und der spuckt dir dann am Ende den Parser aus dafür. Das ist so, der Klassiker definiert man in der EBNF, das ist die, wie hat die geheißen, Extended Bacchus-Nauer-Form, genau, und da definiert man die Sprache und am Ende wird da ein Compiler ausgespuckt. Ist aber auch nicht so einfach zu verwenden, also muss schon sagen, ist auch gewisser Overheight, aber wenn man in dem Bereich mehr machen will, ist es definitiv wert, da mal reinzuschauen.",
      "start": 2445410,
      "end": 2475025,
      "confidence": 0.7730967741935484,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jetzt, wo du's sagst, diese Bacchus-Nauer-Form, doch, die sagt mir was. Und die hab ich auch schon gelesen und die hatte ich auch im Studium. Doch, du weißt ja, wie das ist. Im Studium lernt man ein bisschen Theorie, doch wann wendet man die in der Praxis an? Nur wenn man wirklich hands-on ist. Ich bin so ein Lerntyp, ich kann nicht über Udemy-Kurse lernen, ich muss Prototypen bauen. So hab ich Lexar und Parser für Valves Data-Format für Counter-Strike geschrieben.",
      "start": 2475447,
      "end": 2497958,
      "confidence": 0.7554197530864196,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also ich bin ja auch der Meinung, wenn man was lernen will und verstehen will, sollte man das auch mal selber programmiert haben. Definitiv. Ganz allgemein, wenn es um Lexer und Barser geht, ist es so ähnlich wie mit Security. Das sollte man einfach produktiv nicht selber machen. Oder man kann ja eben auch dann auch zurückgreifen auf andere Libraries, so wie jetzt Andis Library. Ich habe übrigens gerade nachgeschaut, hat auf GitHub schon 23 Stars bekommen. Verwendet die? Sorry, 24 Stars. Verwendet die schon jemand?",
      "start": 2498098,
      "end": 2521640,
      "confidence": 0.7655930232558139,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, pass auf, das ist ja jetzt das Geile. Die ganze Sache hab ich im Februar 2016 programmiert, als ich nämlich auf der FOSDEM war. Die FOSDEM ist die Free and Open Source Developer Europe Meeting-Konferenz in Brüssel. Findet jedes Jahr statt. war bisher immer on-site, und jetzt wegen Corona war's zwei Jahre nur virtuell. Aber jetzt in 2023, erstes Wochenende Februar, findet die wieder statt. Sehr zu empfehlen. Auf jeden Fall habe ich da im Hotelzimmer, und da gibt es so einen Hacking-Room, irgendwo habe ich einen Talk über irgendwas gelesen, weiß ich jetzt nicht mehr. Auf jeden Fall habe ich dann angefangen, hey geil, was fängst du jetzt an? So, Februar 2016. Dezember 2020 kriege ich auf einmal eine E-Mail. Eine E-Mail von der Firma FaceIt. Du musst wissen, FaceIt ist die größte Firma im Counter-Strike-Sektor, die professionelle Counter-Strike-Server hostet. Jetzt sagst du, hä? Ja, also folgendermaßen. Ein bisschen Historie. Valve selbst, also die Firma hinter Counter-Strike und Steam und so weiter und so fort, hostet auch Counter-Strike-Server. Und eigentlich kann jeder einen Counter-Strike-Server hosten. Der Punkt ist aber, die Standard-Counter-Strike-Server, die laufen auf einer 64-Tick-Rate. Das bedeutet, der Server refresht 64-mal pro Sekunde sein Stati. Ja? Die Server von FaceIt laufen aber auf einer 128er-Tickrate. Das bedeutet eigentlich doppelt so schnell. Ja? Also, die refreshen doppelt so schnell. Und im professionellen Gaming, keine Angst, da sind wir beide mit unserer Reaktionszeit schon längst raus, im professionellen Gaming ist das ein enormer Unterschied. Das kann dann wirklich das Spiel ein bisschen verändern, wenn der Server mehrmals, also doppelt so schnell, den Game State refreshed. So. Und Faceit ist unter anderem die Firma, die ganz viele solcher Servers betreibt, aber auch professionelle Turniere macht. Unter anderem halt auch diese Streaming-Overlays, von denen ich am Anfang erzählt hab, wer hat wie viel Leben noch und wer hat welche Waffe und so weiter und so fort. Und dann schreibt mir ein Developer von denen und sagt, hör mal Anni, hast du Lust auf ein Jobangebot? Hast du Lust bei uns zu arbeiten? Ich denk so, wie, hä? Wie kommt ihr da? Ja, pass auf, wir haben deine, wir benutzen Go und wir schreiben alles in Go und wir haben deine Library gesehen und wir setzen die auch ein und wir sind ziemlich begeistert davon. Ich denk so, ach ihr wollt mich doch jetzt veräppeln, ja. Also die nutzen jetzt wirklich in deren kompletten Live-Streaming-Events, also immer wenn ihr jetzt hier so ein großes ESL-Tournament seht, in der Lenxes-Arena findet das zum Beispiel sehr oft statt, da läuft Teil meines Quellcodes auf diesem Scheiß-Screen, ja, damit diese Daten da angezeigt werden. Naja, auf jeden Fall hab ich dann gesagt, komm, das hör ich mir mal an, was sie damit machen und so weiter und so fort. Im Endeffekt war es dann alles ein bisschen komplizierter, weil die ja nicht wirklich, also die wollten, dass ich dann nach London umziehe und mit Remote Work waren sie jetzt noch nicht ganz weit vorne, damals im Dezember 2020. Aber was ich damit eigentlich sagen möchte ist, aus dieser wirklich vollkommenen Schnapsidee, und ja ich hätte diese ganze UID Replacement sehr wahrscheinlich auch mit einer ganz klassischen Rack Axe machen können, kommt dann irgendwann so um Weihnachten rum eine E-Mail von einem der größten Turnierbetreiber in dem ganzen Sektor, weil der dann der library nutzt und das muss ich zugeben war ein neben dem job angebot war es natürlich was auch sehr toll war fand ich eine ungemein schöne bestätigung weil man bekommt ja immer um source umfeld sehr sehr wenig feedback für was dein kram eigentlich genutzt wird Ich hab dann natürlich auch versucht, dass FaceIt irgendwie das Ding ein bisschen sponsort und mich ein bisschen unterstützt und die Entwicklung ein bisschen nach vorne treibt und sowas halt. Ist dann irgendwie nicht ganz erfolgreich gelaufen.",
      "start": 2522260,
      "end": 2753147,
      "confidence": 0.7867296875000003,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das heißt zusammengefasst, du hast gelernt, was ein Lexer ist, was ein Barser ist und hast noch ein Jobangebot bekommen.",
      "start": 2753187,
      "end": 2760515,
      "confidence": 0.8259000000000001,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, eigentlich ja.",
      "start": 2761015,
      "end": 2762516,
      "confidence": 0.8056666666666666,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und wie viele von deinen Freunden haben sich beschwert, dass du bei ihnen da irgendwas ausführst?",
      "start": 2762556,
      "end": 2766878,
      "confidence": 0.7678749999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Nichts, die haben's installiert. Ich hab ihnen dann versucht zu erklären im ersten Spiel, was das ist. Die haben alles nicht verstanden. Vielleicht hab ich's zu kompliziert erklärt. Irgendwann haben sie's vergessen. Ich hatte diesen Webhook-Server locker noch ein Jahr laufen. Irgendwann ist die Festplatte vollgelaufen, weil ich so viel Daten geschrieben hab.",
      "start": 2766898,
      "end": 2785666,
      "confidence": 0.7277547169811319,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Hast du mit den Daten was gemacht am Ende? Oder hast du die nur abgespeichert?",
      "start": 2785746,
      "end": 2789088,
      "confidence": 0.5692666666666667,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich hab die in der MySQL gepumpt und irgendwann hab ich diesen Server ausgemacht und hab die MySQL vorher noch gebackupt, also ich hab die noch irgendwo. Aber inzwischen gibt es Online-Services, die dir dann im Web Spieleanalysen davon machen. Und die basieren genau auf diesem Konzept. Das bedeutet, du siehst, du hast unten so einen Timeslider und siehst, wie das ganze Team sich über die Karte bewegt hat und wo ihr zu welchem Zeitpunkt standet. Ja, weil da geht's halt wirklich fünf gegen fünf, ist halt wirklich Strategie. Also da gibt es jetzt Services, die machen genau das, was ich vorhatte, nur halt ein Jahr oder ein paar Jahre später.",
      "start": 2790128,
      "end": 2822978,
      "confidence": 0.747126126126126,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das heißt, du hättest ein Produkt draus bauen können eigentlich.",
      "start": 2822998,
      "end": 2825460,
      "confidence": 0.7809000000000001,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Tun die. Und ich hab da mal reingeguckt und das ist wirklich superior, also das ist wirklich gut gemacht.",
      "start": 2825861,
      "end": 2832091,
      "confidence": 0.7465789473684211,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also du hast ja jetzt wirklich geschafft, Andi. Wir hatten mal im Zuge von ganz am Anfang von unserer Episode 3, wo wir über Overengineering gesprochen haben, haben wir eine Rückmeldung bekommen von einem Hörer, dem Christian, der da sehr viel geschrieben hat und der auch vorgeschlagen hat, er würde gern mal so Geschichten vom Krieg, der Opa erzählt vom Krieg hören. Ich glaube, du hast damit jetzt geschafft, Over-Engineering kombiniert mit den Geschichten aus dem Krieg eine ideale Episode daraus gebaut zu haben. Christian würde es dir erdanken.",
      "start": 2832131,
      "end": 2861847,
      "confidence": 0.8019775280898876,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wir verlinken euch auch nochmal in den Shownotes ein paar Videos, was Leute auf YouTube denn mit dieser Game State Integration machen. Wie zum Beispiel, was ich gerade erzählt habe, die verändern das Licht in ihrem Zimmer mit Home Assistant. Dafür haben wir auch schon eine Episode gemacht.",
      "start": 2862283,
      "end": 2880349,
      "confidence": 0.8081666666666666,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Verlinken wir natürlich auch in den Shownotes.",
      "start": 2880369,
      "end": 2882190,
      "confidence": 0.693,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Machen dann die Lampe rot, wenn sie die Bombe nicht mehr entschärfen können. Oder falls ihr irgendwie Twitch-Streamer seid oder ähnliches, auf jeden Fall in diesem Streaming-Business seid, wie man so ein Game-State-Overlay, von dem ich grad gesprochen hab, was ihr immer von diesen großen E-Sport-Turnieren kennt, wie ihr so was selbst bauen könnt. Weil, Achtung, diese Twitch-Overlays ... Das ist alles nur HTML. Das ist so funny. Das ist so geil. Du kannst damit eigentlich alles bauen. Ein bisschen HTML, ein bisschen JavaScript, vielleicht ein bisschen Web-Server-Kram und Webhooks da hinten dran und Abfahrt. Das kannst du da mit OBS oben drauflegen und top. Ich hab immer gedacht, das ist komplette Rocket Science und mit on the fly Videobearbeitung, aber nein, das sind einfach HTML-Elemente. Und diese großen professionellen E-Sport-Overlays in den Turnieren, das ist alles HTML. Mir platzt gleich der Kopf, weil das einfach so geil ist. Was man da einfach bauen kann, wenn du ein bisschen Programmierverständnis hast. Und dann hab ich halt ein Lexar und ein Parser für ein VDL-Format gebaut, ja.",
      "start": 2882230,
      "end": 2943415,
      "confidence": 0.7852443181818181,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich wäre ja neugierig, ob die heutigen Anfänger und Anfängerinnen im Computerbereich, ob die bei Spiele dann genau über diesen Weg einsteigen. Also das, was bei uns früher Autoexec editieren war und irgendwie ein bisschen rumtweaken, dass man überhaupt was spielen kann. Ob das heutzutage einfach in die Richtung geht. Ich finde dann raus, da gibt es APIs. Ich will meine Lampe rot stellen, weil ich gesehen habe auf YouTube oder Twitch, wie cool das ist, dass die Lampenfarben sich automatisch einstellen, je nach Spielstatus. Und man steigt dann so vielleicht in das ganze Programmieren. Also wäre ich neugierig, falls wer da Geschichten kennt oder auch das bestätigen kann, ob das da die neue Einstiegsdroge in die IT und ins Programmieren ist bei Jugendlichen. Würde mich sehr interessieren.",
      "start": 2943874,
      "end": 2986033,
      "confidence": 0.753171875,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Allgemein kann ich sagen, dass ich finde das eine relativ schöne Open Source Story. Natürlich macht Faceit damit jetzt auch Geld und allem drum und dran. Dieser, dieser klassische, dieses klassische Problem, dass eine Firma, die profitorientiert ist, meine Arbeit nutzt, um irgendwie ein Feature zu verkaufen und das leider nicht sponsern wollte. Das finde ich auch sehr schade. Retrospektiv muss ich sagen, ich hatte sehr, sehr viel Spaß die paar Abende. Ich hatte sehr, sehr viel Spaß das zu testen. Und es wird hier und da auch noch genutzt ja es wird auch noch irgendwo in china oder in japan genutzt da haben das auch ein paar leute integriert für was genau weiß ich jetzt auch noch nicht wollte ich noch mal ein bisschen recherchieren und die kontaktieren.",
      "start": 2986073,
      "end": 3022220,
      "confidence": 0.7791860465116281,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Wie lange hast du nicht dafür gebraucht zu grob geschätzt.",
      "start": 3022700,
      "end": 3025703,
      "confidence": 0.6493,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also anhand der comet history habe ich so circa sechs sieben stunden dafür gebraucht bis die erste version lief.",
      "start": 3025743,
      "end": 3031627,
      "confidence": 0.7393684210526316,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "So ein Take-Home-Test bei einer Bewerbung braucht ungefähr gleich lang. Also für das, dass du eine Job-Offer dann quasi bekommen hast oder zumindest den Kontakt.",
      "start": 3032243,
      "end": 3042207,
      "confidence": 0.7595600000000001,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Danach kam natürlich noch ein bisschen Bug-Fixing, ja. Also ich habe das dann im Februar, März gemacht und im August 2016 habe ich dann nochmal was gemacht und dann habe ich Da kam noch mal ein Bug im Oktober 2019. Und dann kam noch irgendwann mal ein Bug im Oktober 2021, weil ich C++-Comments nicht ordentlich supportet hab. Du musst wissen, die Valve-SDKs, die das Format eigentlich parsen, sind alle in C++ geschrieben. Und das Lustige in der Wiki-Seite vom Valve steht auch, nur weil das die Formatspezifikation ist, heißt nicht, dass das Valve-C++-SDK diese Spezifikation eins zu eins implementiert. Also die schreiben halt Spezifikationen, aber implementieren sie halt auch nicht komplett oder sagen, die geben da keine Garantie drauf. Aber ja, genau 5, 6, 7 Stunden habe ich für den initialen Code gebraucht, bis ich das dann das Fliegen hatte. Klar, der Installer hat dann ein bisschen länger gebraucht und so weiter und so fort.",
      "start": 3042227,
      "end": 3094047,
      "confidence": 0.745942307692308,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Falls jemand weiß, warum das kein JSON oder irgendein allgemeingültiges Format ist, gerne auch die Info senden. Aber wahrscheinlich war damals JSON einfach noch kein Standard in dem Bereich. Ist wahrscheinlich einfach ein historischer Grund.",
      "start": 3094953,
      "end": 3107466,
      "confidence": 0.8260571428571428,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das war meine kleine Story über Lexer, Tokens und Parser. Falls ihr eine ähnlich motivierende Story habt, Wo ihr ergebenenfalls was neues gelernt habt in der Softwareentwicklung, Softwareengineering und das mit irgendwas mit einem Hobby kombiniert habt. Zum Beispiel wolltet ihr mal ein Hochbeet automatisch bewässern oder ihr habt zum Beispiel die Game State Integration von Left 4 Dead 1 und 2 auf eine ähnliche Art und Weise getweakt. Lasst uns doch mal wissen, was ihr da im Detail gemacht habt. Wir würden uns auf jeden Fall über eure Story freuen.",
      "start": 3107506,
      "end": 3141672,
      "confidence": 0.767549450549451,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Gerne auch bei Twitter, EngKiosk wie immer oder wenn es persönlicher sein soll, an die E-Mail-Adresse steht dies. Andi ist immer teilbar.",
      "start": 3142255,
      "end": 3152062,
      "confidence": 0.7842727272727275,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Schickt uns auch mal eine Sprechnachricht, eine Sprachnachricht. Wir sind über WhatsApp for Business angebunden. Deswegen einfach mal in die Show Notes gehen, da habt ihr unsere WhatsApp-Nummer. Speichert die kurz ein, schreibt uns eine Nachricht. Ich glaube, da antworten wir auch schneller drauf als E-Mails oder auf Twitter. Von daher, wir würden uns auf jeden Fall freuen, da mal eine Text- oder Sprachnachricht zu bekommen. Hoffentlich haben wir euch ein bisschen motiviert, auch ein bisschen Open Source zu machen, auch ein bisschen reale Anwendungsfälle damit abzudecken. Wenn nicht, würden wir uns freuen, dass ihr uns weiterempfehlt. Ansonsten sehen wir uns nächste Woche. Bis bald.",
      "start": 3152082,
      "end": 3182964,
      "confidence": 0.6595904761904763,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Und falls jemand eine Lösung hat für Return of Monkey Island für Linux, bitte an mich senden. Ciao, bis nächste Woche.",
      "start": 3183004,
      "end": 3188989,
      "confidence": 0.7297619047619047,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Copyright WDR 2021.",
      "start": 3215495,
      "end": 3216458,
      "confidence": 0.34,
      "channel": null,
      "speaker": "B"
    }
  ],
  "confidence": 0.7691514923770632,
  "audio_duration": 3218.0,
  "webhook_status_code": null,
  "webhook_auth": false,
  "summary": null,
  "auto_highlights_result": null,
  "content_safety_labels": null,
  "chapters": null,
  "sentiment_analysis_results": null,
  "entities": null
}
