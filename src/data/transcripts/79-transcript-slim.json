{
  "language_code": "de",
  "audio_url": "https://audio1.redcircle.com/episodes/10bee4a4-c6fe-4cad-90c9-2b33633ad09f/stream.mp3",
  "punctuate": true,
  "format_text": true,
  "dual_channel": false,
  "webhook_url": null,
  "webhook_auth_header_name": null,
  "webhook_auth_header_value": null,
  "audio_start_from": null,
  "audio_end_at": null,
  "word_boost": [],
  "boost_param": null,
  "filter_profanity": false,
  "redact_pii": false,
  "redact_pii_audio": false,
  "redact_pii_policies": null,
  "redact_pii_sub": null,
  "speaker_labels": true,
  "speakers_expected": 3,
  "content_safety": false,
  "content_safety_confidence": null,
  "iab_categories": false,
  "custom_spelling": null,
  "disfluencies": false,
  "sentiment_analysis": false,
  "auto_chapters": false,
  "entity_detection": false,
  "summarization": false,
  "summary_model": null,
  "summary_type": null,
  "auto_highlights": false,
  "language_detection": false,
  "speech_threshold": null,
  "id": "62z5i4k0ba-1832-44b9-a244-10c07ee88896",
  "status": "completed",
  "error": null,
  "utterances": [
    {
      "text": "Das heißt, als Faustregel ist es so, wenn du im Web irgendwas machst, nimm eine WoW2-Schrift und wenn du am Computer irgendwas machst, ist er eigentlich mit TTF meistens gut bedient. Eigentlich müssen wir nicht mehr Monospace-Schriften haben zum Programmieren. Eigentlich ist es schade, weil, und da kommen wir so ein bisschen zurück an das Schriftdesign, dass wir dadurch eingeschränkt sind, wie wir Zeichen gestalten und dass eigentlich das Schriftbild vielleicht sogar harmonischer ist, wenn wir nicht Monospace nehmen.",
      "start": 2432,
      "end": 27538,
      "confidence": 0.7939367088607598,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wie wichtig ist die Wahl der Schriftart für die Programmierung? Welche Möglichkeiten und Vorteile bietet die richtige Schriftart in deinem Editor? Worauf kommt es eigentlich an, wenn wir uns über Schriftarten für die Programmierung unterhalten? Und was ist Font Engineering und was bedeuten die Begriffe Ligaturen, Hinting und Kerning? Das sind Fragen, die wir selbst nicht beantworten können. Deswegen unterhalten wir uns in dieser Episode mit Philipp Axani. Als Font-Engineer und Python-Programmierer hat er an vielen Schriftarten für große Firmen mitgearbeitet. In dieser Episode gibt er uns einen Einblick in die Welt der Schriftarten mit einem speziellen Fokus auf das Programmieren. Wir springen direkt rein. Viel Spaß! Heute geht es um ein Thema, wovon ich gar nicht wusste, dass dieses Thema überhaupt existiert, bevor ich es in einem Go-Newsletter wirklich via reinem Zufall gefunden habe. Und zwar sprechen wir heute über Fonts. Und dabei sprechen wir nicht über Aktienfonts, sondern über Schriftarten. Denn es ist immer eine Schriftart, die bei der Anzeige des Textes auf dem Bildschirm während der Programmierung beteiligt ist. Und irgendwie sind halt überall Schriften oder beziehungsweise Schriftarten. Und ich habe so das Gefühl, bis auf Comic Sense sind alle Schriftarten irgendwie so ein übersehenes Element in deinem Programmiertoolkit. Natürlich gibt es dann immer wieder Softwareentwickler, die stundenlang ihre IDE tweaken, um den richtigen Font zu kriegen. Aber wenn man dabei nachfragt, warum sie diesen Font denn jetzt genommen haben, weiß es auch keiner. Und da Font-Engineering natürlich auch sehr stark mit Design zu tun hat und Wolfgang und ich von Design einfach überhaupt keine Ahnung haben, wir haben glaube ich unser Engineering-Kiosk-Logo auch nach Fiber ausgelagert, haben wir uns gedacht, wir laden dazu mal einen Experten ein. Und deswegen begrüße ich Philipp Axani. Hallo.",
      "start": 31688,
      "end": 140102,
      "confidence": 0.824743055555555,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Hallo, hallo. Freut mich hier zu sein.",
      "start": 140142,
      "end": 142684,
      "confidence": 0.4428571428571429,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Du bist ein Süddeutscher, der nun in der deutschen Hauptstadt wohnt.",
      "start": 142724,
      "end": 146186,
      "confidence": 0.8539090909090908,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Richtig, ganz klassisch, ja.",
      "start": 147344,
      "end": 149185,
      "confidence": 0.5925,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ganz klassisch, gehen alle Süddeutschen nach Berlin oder warum ist das ganz klassisch?",
      "start": 149225,
      "end": 153968,
      "confidence": 0.7430769230769231,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das ist so ein Klischee, dass es auch so bestimmte Stadtteile in Berlin gibt, wo sehr viele Schwaben leben. Ich versuche das so ein bisschen zu verheimlichen, dass ich aus Süddeutschland komme, aber in der Tat, mich hat es auch irgendwann nach Berlin gezogen, ganz klassisch für ein Praktikum und seitdem bin ich hier.",
      "start": 154008,
      "end": 169215,
      "confidence": 0.7972592592592592,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jetzt war ich endlich mal froh, jemanden zu haben, der eine ähnliche Sprache spricht oder näher zumindest an meinem Dialekt ist. Und jetzt bist du schon abgewandert und hast so ein schönes Hochdeutsch. Wo ist das Schwäbisch?",
      "start": 169475,
      "end": 180720,
      "confidence": 0.7812432432432433,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Das ist irgendwo in meiner Kindheit geblieben. Das tut mir leid, dass ich da heute nicht mithelfen kann. Aber ich hoffe, ich kann ein bisschen was über Schriften erzählen stattdessen.",
      "start": 180780,
      "end": 189384,
      "confidence": 0.7374333333333333,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich würde sagen, solange du noch Nägel in der Tasche hast und noch geizig bist wie jeder andere Schwabe, sollte das alles passen.",
      "start": 189424,
      "end": 194046,
      "confidence": 0.7591304347826089,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Oh, da kommen alle Vorurteile raus jetzt.",
      "start": 194326,
      "end": 196167,
      "confidence": 0.6027142857142858,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Aber weiterhin bist du Softwareentwickler mit einem Hintergrund in Grafikdesign und Schriftdesign. Du beschreibst dich selbst als Fullstack-Webentwickler, bist Freelancer und Content-Creator auf realpython.com und machst da Videokurse und Tutorials. Und du möchtest gerne auf chess.com im Schach gechallenged werden.",
      "start": 197218,
      "end": 214602,
      "confidence": 0.74,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das hast du schön zusammengefasst. Das stand irgendwo auf einem Profil, ne? Ja, also in der Tat. Mein Hintergrund ist Grafikdesign. Ich wollte irgendwann mal Illustrator werden. Eher so zeichnen und malen und so weiter. Und bin dann aber an der Kunsthochschule eher ins Grafikdesign reingeraten und von dort in die Schriftgestaltung. Das heißt also so, wie man Buchstaben zeichnet und so weiter.",
      "start": 214949,
      "end": 239770,
      "confidence": 0.8185396825396825,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ist das wirklich ein Fokusfeld, ein ganz offizieller Bereich, den man auch irgendwie in so einer Schule oder studieren kann oder sowas?",
      "start": 240030,
      "end": 249094,
      "confidence": 0.7759090909090909,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Ja, also Type Design, so nennt sich das dann meistens, ist oft in einem Grafikdesignstudiengang oder Kommunikationsdesignstudiengang Teil dessen. Aber es gibt auch Schulen, wo es tatsächlich als eigene Fachklasse oder Studiengang angeboten wird. So zum Beispiel in Leipzig an der Hochschule für Grafik und Buchkunst, wo ich studiert habe, da gibt es tatsächlich so eine Fachklasse für Schriftgestaltung und dort bin ich dann reingeraten. Und am Anfang war es eben so, also dass es mir wahnsinnig gefallen hat, mit Farben erstmal gar nichts mehr zu tun zu haben, weil Schrift einfach nur schwarz und weiß ist und es gibt Formen und Man muss sich jetzt nicht um irgendwelche Farbharmonien kümmern, das fand ich erst mal toll. Und umso weiter ich mich dann damit beschäftigt habe, umso mehr habe ich gemerkt, dass da eigentlich auch noch ein Riesenfeld dahinter steckt. Und so bin ich dann in, du hattest das Wort vorhin schon genannt, ins Font-Engineering reingeraten, weil, um diese Schriften zu machen, also das heißt also den die ihr bei euch auf dem Computer habt beispielsweise. Damit die so funktionieren, wie sie jetzt funktionieren, ist auch relativ viel Programmierung mit dabei im Hintergrund. Und so bin ich dann von der Gestaltung über Schriftgestaltung eben in die Programmierung und spezifisch eben Python-Programmierung gekommen. Und dann kam eins zum anderen. Und mittlerweile bin ich eben Freelance-Programmierer und verdiene mein Geld damit verschiedenen Dingen, die damit zu tun haben. Habe aber mehrere Jahre im Front Engineering gearbeitet. Mittlerweile mache ich das nicht mehr aktiv, aber trotzdem habe ich die ein oder andere Sache dazu zu erzählen.",
      "start": 249134,
      "end": 341805,
      "confidence": 0.8212851711026616,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber wenn man jetzt mal an den Studien gegangen denkt, ich habe eine Stereotypenfrage. Hat dann jeder wirklich so einen Tintenfüller und macht dann so ganz geschweifte Buchstaben und solche Geschichten, so wie das im Film immer ist?",
      "start": 341845,
      "end": 352348,
      "confidence": 0.835763157894737,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Die kurze Antwort ist ja. In der Tat. Hängt natürlich davon ab, wie du es lehrst. Also bei uns an der Schule war das so. Also wir haben wirklich mit Tintenfass und Breitbandfeder erstmal Buchstaben zeichnen gelernt. Also das ist jetzt weniger so Kalligrafie, wo man mit irgendwie so geschwungenen Formen und so macht, sondern eher wirklich so wie unsere Schrift, die wir heute im Lateinischen verwenden, früher von Mönchen und wem auch immer gezeichnet wurde, dass man den Aufbau von einem Buchstaben lernt. Weil das, was eben oft passiert, also vor allem, wenn man eher aus der kreativen Ecke kommt, ist halt, dass man sich versucht, irgendwie an so einem kleinen A auszuleben. Aber eigentlich gibt es dahinter eine ganz klare Regel, wie so ein kleines A auszusehen hat, damit es noch als kleines A erkennbar ist. Und da hilft dann vielleicht so ein bisschen so eine altherkömmliche Leere mal jeden Buchstaben so aufzuschreiben.",
      "start": 352508,
      "end": 408252,
      "confidence": 0.8173483870967746,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jetzt sind wir ja alles irgendwie Programmierer oder kommen zumindest aus der Tech-Ecke. Also wenn wir mal in die digitale Welt gehen, ist es ja so im ersten Moment, wenn ich mir das ansehe, eigentlich ganz simpel. Man hat da seine Default-Schrift, die funktionieren. Klar, im Design hast du da irgendwelche Schnörkel und da kann man viel Zeit investieren. Aber am Computer habe ich zwei, drei Standardschriften. That's it. Also warum Warum kann ich mir da.",
      "start": 408272,
      "end": 433027,
      "confidence": 0.8110131578947367,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Eine ganze Episode drüber machen? Also erstmal ist es natürlich vollkommen okay, dass du da deine Standardschriften hast und die du verwendest, aber es ist so ein bisschen wie, keine Ahnung, mit Musik oder wie mit Kleidung. Du kommst irgendwie mit deiner Favoritenplaylist gut zurecht, aber manchmal ist es auch schön, dann ein bisschen Abwechslung zu haben. Und wie es bei, wenn wir bei dem Musikbeispiel sind, So ist das so vielleicht für bestimmte Sachen, die du machst, unterschiedliche Musik hören willst, also sei es irgendwie beim Putzen wirst du irgendwie diese Musik hören, beim Arbeiten wirst du irgendwie was anderes hören. So ist es im Prinzip auch mit Schriften, also dass es durchaus Sinn ergibt, dass du beim Programmieren eine bestimmte Schriftart benutzt und wenn du irgendwie Texte schreibst, eine andere Schriftart benutzt. Und in der Regel sind auch die Default Fonts so ein bisschen anders, auch historisch gewachsen natürlich, dass wir in unserem Programmiereditor eher Monospace-Schriften haben, das heißt also, dass die einzelnen Zeichen die gleiche Breite haben. Da kommen wir dann gleich vielleicht noch ein bisschen näher dazu. Und dass du in deinem Word-Editor oder wo auch immer du bist eher so Serifenschriften, die dann so kleine Füßchen haben, oder eben so Sans-Schriften, die dann so ganz glatt aussehen hast.",
      "start": 433047,
      "end": 500792,
      "confidence": 0.7785164319248825,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Vielleicht bleiben wir ja gleich mal bei dem Thema Monospace, weil das ist so der Standard, den man so kennt aus den ganzen IDEs oder irgendwo so im Programmierumfeld oder wenn man einen Code-Editor hat für einen Blog-Eintrag oder sowas. Was bedeutet das am Ende eigentlich genau und wo ist der Unterschied jetzt zu einer Serifenschrift zum Beispiel?",
      "start": 500972,
      "end": 519244,
      "confidence": 0.8130689655172414,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Also so wie der Name Monospace schon so ein bisschen vermuten lässt, es gibt den Wortteil Mono und Space, was die einheitliche Breite beschreibt und das heißt bei Monospace-Fonts ist jedes Zeichen gleich. Und im Kontrast dazu ist es so bei sogenannten proportionalen Schriften, was eben Serifenschriften sein können, was aber auch Schriften ohne Serifen sein können, ist es so, dass je nachdem, wie das Zeichen aussieht, mal mehr und mal weniger Breite verwendet wird. So als ein Beispiel, ein kleines i braucht in der proportionalen Schrift relativ wenig Platz. In der Monospace-Schrift ist es so, dass alle Zeichen die gleiche Breite haben. Deswegen ist oft das Design bei einem kleinen i in der Monospace-Schrift immer so ein bisschen mit einem Füßchen vielleicht unten und so einem Ärmchen oben, damit dieser Platz, den das i zur Verfügung hat, ausgenutzt wird. Wohingegen ein großes W bei einer proportionalen Schrift so viel Breite im Prinzip haben kann, wie es eben braucht. dass es bei einer Monospace-Schrift dazu führt, dass es so ein bisschen in diesen Kasten, in diese Box reingequetscht werden muss. Und das ist ganz spannend, wenn man sich dann eben mal Programmierfonds anschaut, also wie verschiedene Schriftdesigner so dieses Problem der Breite dann gelöst haben. Aber klassischerweise im Programmier-Editor ist eine Monospace-Schrift, das kennt man auch von Schreibmaschinen oder kannte man früher von Schreibmaschinen, da war das eben genauso.",
      "start": 519284,
      "end": 602530,
      "confidence": 0.8195764192139738,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und eine Serifenschrift, kann die dann theoretisch auch Monospace sein oder schließt sich das dann aus?",
      "start": 602980,
      "end": 607444,
      "confidence": 0.815,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Serifenschrift sagt eigentlich erstmal nur, dass so kleine Füßchen an den Buchstaben dran sind. Theoretisch kannst du auch eine Monospace-Serifenschrift machen. Andi, weil du ja vorhin den Go-Newsletter genannt hast, Go hat ja auch eine eigene Schrift und das ist tatsächlich eine Serifenschrift, die Monospace ist.",
      "start": 607484,
      "end": 621895,
      "confidence": 0.7461521739130433,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Für mich war immer so der Klassiker oder das, was ich mir so gemerkt habe von meinem wirklich dezenten Wissen über Design und Schriften, dass man irgendwie so, wenn man was ausdruckt und lesen will, dann nimmt man irgendwie so proportionale Schriften, am besten Serifen und eben am Bildschirm irgendwie Monospace. Aber hat sich das irgendwie einfach entwickelt oder gibt es da einen Hintergrund dazu? Weil wenn ich was in dem Buch gut lesen kann, warum kann ich dann den Code auch gut lesen in derselben Schrift?",
      "start": 622195,
      "end": 651495,
      "confidence": 0.8425057471264368,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Also es gibt da im Prinzip zwei Antworten darauf. Also die eine ist vielleicht eher so aus einer emotionalen Ecke. Also Schriften lösen immer irgendein Gefühl aus. Ob du willst oder nicht, wenn du eine Schrift liest, dann hast du dazu irgendeine Reaktion. Vielleicht unterbewusst, aber irgendwas passiert da.",
      "start": 651635,
      "end": 667383,
      "confidence": 0.7651836734693879,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "So bei Comic Sans habe ich immer das Gefühl, derjenige, der das geschrieben hat, hat keine Ahnung von Design oder irgendwie ein Gefühl dafür.",
      "start": 667803,
      "end": 674886,
      "confidence": 0.7603750000000002,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Das ist so ein bisschen der Klassiker in der Tat, aber ich meine, wenn du jetzt irgendwie eine Einladung zum Kindergeburtstag machst, dann spricht nichts dagegen, Comic Sans zu benutzen. Wenn du jetzt hingegen irgendwie eine Traueranzeige machst, dann ist das vielleicht nicht die richtige Schriftart. Und das ist ganz spannend bei sich selber zu beobachten. Also manchmal schaut man irgendwie in einen ein Logo von einer Firma an oder irgendeine Anzeige und denkt sich, irgendwas stimmt da nicht so richtig. Und oft ist es einfach, weil die Schrift nicht richtig gewählt wurde, dass es vielleicht irgendwie nicht seriös genug ist oder vielleicht zu seriös ist. Und so ist es dann eben oft so, dass man jetzt, keine Ahnung, bei Belletristik oft eher Schriften mit Serifen hat, also proportionale Schriften mit Serifen, wohingegen bei Sachbüchern oft dann vielleicht auch Schriften ohne Serifen genutzt werden, damit so ein bisschen so das Modernere vielleicht kommuniziert wird. Und so ist es dann eben auch am Computer, dass es auch einfach so Gewöhnung ist, dass wenn du irgendwas mit Computern machst und das Programmierung ist, dass es dann auch Monospace ist. Das hat alles einen historischen Hintergrund. Also einerseits so, dass beim Bildschirm die Auflösung jetzt mittlerweile seit keine Ahnung wie viele Jahren in der Regel sehr gut ist. Das heißt also, du kannst auch Schriften mit Serifen in kleiner Größe sehr gut lesen. Allerdings war das nicht immer so. Das heißt also, wenn wir uns irgendwie die Pixel anschauen und man sagt, keine Ahnung, wir haben jetzt irgendwie sieben Pixel für einen Uppercase, also einen Großbuchstaben zur Verfügung, dann kann man eben nur so viel an Design da irgendwie transportieren. Und dann ist eigentlich alles, was irgendwie zu viel ist, stört eher. Das heißt also, dass man da dann vielleicht eher eine Schrift genommen hat, die an der Stelle keine Serifen hat. Und bei gedruckten Materialien hat immer eine gute Auflösung. Das heißt also, da kann man dann eine Serifenschrift nehmen, die proportional ist und die eben historisch besser lesbar ist, weil das Schriftbild oft harmonischer wirkt, als es eben bei Monospace-Schriften ist. Weil du kannst quasi jedem Buchstaben, wie gesagt, eine eigene Breite geben. Die Serifen können die können die einzelnen Zeichen dann schön verbinden. Und das ist bei einer Monospace-Schrift eben nicht der Fall. Und dann ist natürlich die Natur des Textes so ein bisschen anders. Also, dass beim Programmieren ja selten wirklich quasi lange Sätze stehen, sondern es geht eher um einzelne Wörter, die für sich genommen unterscheidbar sein müssen. Wohingegen bei einem Buch kenne ich mich nicht gut genug aus, aber es gibt ja Studien, dass du nicht jedes Wort liest, sondern irgendwie diesen Satz als solchen und jedes dritte Wort nur liest und den Rest irgendwie zusammenreimst. Das ist beim Programmieren ja oft dann eher weniger der Fall, sondern da zählt wirklich irgendwie jedes kleine Zeichen eigentlich. Und da ist es dann auch sinnvoll, entsprechende Schrift zu haben, die jedem Zeichen dann auch diesen Raum gibt.",
      "start": 675386,
      "end": 829731,
      "confidence": 0.8086024096385535,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Es hat sich jetzt nicht vor 50 Jahren irgendwie so eine Grace Hopper überlegt, okay, das i ist so schmal üblicherweise, das heißt im Monospace ist es besser lesbar, sondern es hat sich schon historisch entwickelt. Die ersten Computer waren ja auch mit klassischer Schreibmaschine, dass der Duo, die man bedient hat. Also vielleicht kommt es auch ganz klassisch aus der Schreibmaschinenwelt natürlich.",
      "start": 829771,
      "end": 852205,
      "confidence": 0.8089523809523808,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Genau, also vielleicht ist da ja jemand unter euren Hörerinnen und Hörern, der sich damit gut auskennt und was dazu beitragen kann. Bei dem Teil kenne ich mich tatsächlich nicht so gut aus. Vielleicht nur so noch als ein Zusatzpunkt, also wenn wir jetzt irgendwie, warum sind Monospace, warum sind Programmierschriften Monospace? Also wenn wir irgendwie an das Terminal denken und irgendwelche Command-Line-Interfaces uns vorstellen, dann wird ja oft mit Linien und Ecken tatsächlich auch ein kleines User-Interface im Terminal gebaut. Und dazu muss man ja auch sicherstellen, dass das alles gut untereinander steht. Und wenn ihr euren Code selber anschaut, dann ist es oft auch sinnvoll, nicht immer, aber dass ihr auch da eine bestimmte vertikale Ordnung habt. Das heißt also irgendwie, ihr habt vier Spaces und dann ist da ein Wort und dann habt ihr ein Gleichzeichen und so weiter und so fort. Das gibt dann auch eine bestimmte optische Harmonie, wohingegen, wenn die Schrift proportional wäre, was durchaus erlaubt ist, zumindest heutzutage, Das heißt, es gibt keine technischen Einschränkungen mehr in der Hinsicht bei den meisten Editoren. Kann es trotzdem das Schriftbild generell so ein bisschen unordentlicher aussehen, weil halt nicht mehr alles genau untereinander steht?",
      "start": 852245,
      "end": 918683,
      "confidence": 0.8068844221105528,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also ich habe ja in der Vorbereitung zu dieser Episode erst gelernt, dass es mehrere Schriften gibt und sogar Programmiersprachen eigene Schriften haben. Für mich gab es ja nur diese Monospace, meistens hat die auch Monospace geheißen. That's it? Aber du hast ja den Überblick jetzt über sehr viele Schriften in deinem Programmierumfeld. Gibt es irgendeine Programmiersprache oder irgendwelche Nerds oder Gruppierungen, die wirklich proportionale Schriften verwenden oder hat sich das eigentlich ziemlich durchgesetzt bei der Programmierung?",
      "start": 918723,
      "end": 944266,
      "confidence": 0.7994285714285713,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Also es hat sich ziemlich durchgesetzt. Es gibt tatsächlich eine Schrift, die nennt sich Input Mono, und da hat der Schriftgestalter tatsächlich so einen Blogbeitrag verfasst und gesagt, eigentlich müssen wir nicht mehr Monospace-Schriften haben zum Programmieren. Es gibt Anwendungen, wo es tatsächlich Sinn ergibt, also beispielsweise irgendwie diese User Interfaces, wenn wir die irgendwie im Terminal machen oder wenn wir jetzt im Markdown an Tabellen denken und das alles irgendwie ganz klar untereinander strukturiert haben wollen. Aber oft ist es so, dass es nicht zwangsweise Monospace sein muss und er hat in seinem Blogbeitrag eben gesagt, eigentlich ist es schade, weil, und da kommen wir so ein bisschen zurück an das Schriftdesign, dass wir dadurch eingeschränkt sind, wie wir Zeichen gestalten und dass eigentlich das Schriftbild vielleicht sogar harmonischer ist, wenn wir nicht Monospace nehmen, auch wenn generell die Optik nach wie vor noch in so einem technischen Programmierschriftdesign sein kann. Aber dazu ist es dann eben manchmal so, dass eigentlich der Editor so ein bisschen noch mehr einem Hilfestellung geben müsste, eben zu sagen, okay, wenn ich Tab drücke, dann sind es nicht einfach nur zwei oder vier Spaces, sondern dass es dann immer irgendwie bis zu einem bestimmten Punkt geht und so weiter und so fort. Aber grundsätzlich spricht da eigentlich nichts dagegen. Und also wenn du sagst, dass es jetzt irgendwie eine Bewegung zum Monospace gibt, ist es vielleicht tatsächlich eher so, dass es so eine Bewegung eher in das nicht mehr strikte Monospace ist, weil diese technischen Einschränkungen nicht mehr da sind. Und da kommen wir dann vielleicht auch so in ein Feld von Ligaturen, wo wir auch noch ein bisschen näher darüber sprechen können, dass mittlerweile viele Schriften auch bestimmte Eigenschaften mitbringen, die über dieses Standard, jedes Zeichen hat eine Breite und that's it, hinausgehen.",
      "start": 944618,
      "end": 1044025,
      "confidence": 0.7985847176079737,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Okay, du hast mir jetzt also durch die Blume erklärt, dass ich langweilig bin und eigentlich nicht mehr top-notch und ich sollte irgendwelche coolen Schriften verwenden. Dann gehen wir gleich mal in die Ecke der coolen Schriften. Was entwickelt sich denn da? Also für mich war ja auch immer, Schrift ist ein altes Thema und da gibt es keine Entwicklung oder irgendwelche Neuerungen, vor allem in der Programmierung. Wenn du mir jetzt verkaufen müsstest, was es denn Cooles gibt und für mich als Programmierer, warum ich das unbedingt mal ausprobieren sollte.",
      "start": 1044224,
      "end": 1070976,
      "confidence": 0.8335714285714287,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Vielleicht vorneweg, also ich stelle mich da auch erstmal in die gleiche Ecke wie du. Also all diese Entwicklungen, die es gibt in der Schriftwelt, also das betrifft nicht nur Programmierschriften, hat auch immer mit einem bestimmten Innovationszwang zu tun. Das natürlich, um was Neues rauszubringen, muss man irgendwie ein neues Alleinstellungsmerkmal haben und das ist dann oft irgendwie, lässt sich schön im Marketing und schön auf der Produktwebseite darstellen, aber Für den End-User ist es nicht unbedingt so nützlich. Für manche aber schon. Und das ist dann auch was, was ganz, ganz wichtig ist, was ich auch wirklich ganz klar sagen will. Am Ende ist die Schriftwahl und die Schrift, die man benutzt, wahnsinnig subjektiv. Und es darf einfach niemanden geben, der sagt, die Schrift, die du da verwendest, die ist kacke. Verwende diese andere Schrift. Sondern wenn dir die Schrift gefällt, dann ist das okay so. Und dann gibt's da auch niemanden, der irgendwie Schriftgestaltung oder Font-Engineering studiert hat, der dann sagt, schlechte Idee. Aber es gibt eben bestimmte Randbedingungen, warum vielleicht eine andere Schrift vielleicht besser ist und dass es vielleicht auch mal sinnvoll ist, so ein bisschen zu schauen, was ansonsten da ist. Es hat vor allem so im JavaScript-Bereich in den letzten Jahren so ein bisschen eine Tendenz gegeben, dass so Schriftfeatures wie Legaturen ziemlich angesagt wurden. Legaturen kennt man auch eher so aus Serifenschriften. Wenn ihr beispielsweise in Word oder in einem anderen Texteditor ein F und ein I tippt, dass die dann oft zusammengezogen werden zu so einem F-I-Konglomerat. Das heißt also Ligatur, mehrere Zeichen werden quasi zu einem Zeichen zusammengezogen.",
      "start": 1070996,
      "end": 1161024,
      "confidence": 0.8163171641791046,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Das war früher immer der große Vorteil von LaTeX, kann ich mich erinnern. LaTeX hat es schon immer cool gemacht und irgendwie andere Word und so war da irgendwie schlechter drin, zumindest nicht automatisiert, damals in meiner Studentenzeit.",
      "start": 1161264,
      "end": 1173071,
      "confidence": 0.7865263157894736,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Genau, und dadurch entsteht oft auch ein harmonischeres Schriftbild. Und diese Technik, die gibt es eigentlich in jedem Font. So kannst du die eben auch in einem Monospace-Font geben. Das sind sogenannte Font-Features. Das heißt also, das ist quasi eine Eigenschaft, die eine Schrift mitbringen kann. Nicht muss, aber kann. Und bei Programmierschriften hat sich so was entwickelt, dass beispielsweise, wenn man zwei Gleichzeichen nebeneinander hat, dass es dann zu einem langen Gleichzeichen zusammengezogen wurde. Oder wenn man Dash unten Größerzeichen, also so als nach rechts Schaupfeil, das tippt, dass es wirklich zu einem Pfeilsymbol zusammengezogen wird. Oder Ausrufezeichen, Gleichzeichen, was dann eben, ist nicht gleich oft in den Programmiersprachen, dann bedeutet, dass es wirklich zu so einem Gleichzeichen, das durchgestrichen ist, umgewandelt wird. Diese Mechanik muss, also kann eine Schrift mitbringen und das hat es in den letzten Jahren, also bei FPGA Fast allen neuen Monospace-Schriften, die so rauskommen in dem Programmierumfeld, wird es oft so als, schaut, wie cool unsere Legaturen sind, angeworben. Ob das tatsächlich in der Programmierung nachher so nützlich ist, muss dann jeder für sich selber entscheiden.",
      "start": 1173111,
      "end": 1243061,
      "confidence": 0.8073296703296703,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich kann mir schon vorstellen, dass du dann ab und zu damit auch auf die Nase fällst. Also ich nehme mir mal so die Sprache PHP. Die Sprache PHP, die kann zwei Variablen miteinander vergleichen mit zwei Gleichheitszeichen oder mit drei Gleichheitszeichen. Und programmiertechnisch ist das was anderes. Einmal einen strikten Vergleich, einmal einen losen Vergleich. Und wenn du mir jetzt sagst, dass Ligaturen zwei Zeichen zu einem zusammenfassen und man dann zwei versus drei Gleichheitszeichen sieht, da kann ich mir schon vorstellen, dass das schon eine Quelle für Bugs sein kann, oder?",
      "start": 1243221,
      "end": 1270673,
      "confidence": 0.7797419354838708,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Definitiv. Also da bin ich deiner Meinung und das ist dann so ein bisschen die Frage, was ist dir wichtig? Und wenn es dir wichtig ist, dass du da auf den ersten Blick, wenn du den Code anschaust, schnell sehen willst und verstehen willst, was da passiert, glaube ich auch, dass so zusammengezogene Zeichen, das ist jetzt meine persönliche Meinung, dass zusammengezogene Zeichen nicht unbedingt der Leserlichkeit an der Stelle helfen. Es sieht oft auf Screenshots, gerade wenn man jetzt irgendwie so Codesnippets teilt, oft einfach irgendwie fresher aus oder man mag das als fresher beurteilen. Aber wenn's tatsächlich ums Arbeiten geht, bin ich persönlich auch kein Freund davon. Aber würde mich auch an der Stelle interessieren, also wenn's Menschen gibt, die sagen so, für mich muss, ist das ein Must-Feature, und ich hab das immer eingeschaltet, wenn ich programmier, und wenn das eine Schrift nicht kann, dann kommt die für mich nicht infrage, würden mich da tatsächlich auch irgendwie Argumente interessieren. Also ob das irgendwie so das Code-Bild irgendwie besser lesbar macht, ob's irgendwie besser aussieht, ob's einfach nur was ist, was man irgendwie schick findet, was ja auch legitim ist. Ich persönlich glaube, dass das ein bisschen zu Problemen führen kann und vielleicht sogar noch ein bisschen weitergeführt, wieder ein bisschen weg von Ligaturen. Es ist eine Sache, die mich als Python-Programmierer bei Monospace-Schriften immer so ein bisschen gestört hat, war, wenn das Underscore, also der Unterstrich, über die gesamte Breite geht und ich zwei Underscores nebeneinander habe und es dann nicht eine Lücke zwischen beiden gibt. Und bei dem Python, also für bestimmte So Magic Methods braucht man eben __ und dann init beispielsweise. Und da mag ich es persönlich einfach gerne, dass ich sehe, das sind zwei Underscores. Und wenn das auch ohne Legaturen quasi ein langer Strich ist, dann ist es für mich auf den ersten Blick nicht unbedingt erkennbar. Ist das jetzt nur eins oder sind das zwei oder sind das drei Zeichen? Und das sind alles Dinge, die, wenn du, Wolfgang, um zurückzukommen zu deiner Monospace-Schrift, die du in deinem Editor verwendest, tatsächlich mal irgendwie so deinen Code anschauen kannst und vielleicht mal siehst, vielleicht gibt's doch irgendwie das ein oder andere Zeichen, wo du drüber stolperst und sagst, naja, stimmt eigentlich irgendwie. Die Null ist vielleicht gar nicht so erkennbar als Null, wenn dann, oh, daneben steht oder das große I und das kleine L sind gar nicht so unterschiedlich. Die 1 ist vielleicht, sieht aus wie ein kleines L. Es gibt so ganz viele Details, wenn wir da mal näher ranzoomen, wo es dann vielleicht doch mal sinnvoll ist zu überlegen. Vielleicht gibt es ja doch eine andere Schrift, die für mich an der Stelle in Frage kommt.",
      "start": 1270713,
      "end": 1406872,
      "confidence": 0.7884901531728669,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ja, ein Kollege von mir, mit dem ich sehr viel Programming mache, hat da natürlich genau solche Schriften, die da sehr viel zusammenziehen und das Dreifache ist dann mit den drei Strichen anzeigt. Und für mich ist es natürlich immer eine Umstellung, aber man muss schon sagen, es geht extrem schnell und der programmiert wirklich nur damit. Also Andi, weil du auch gesagt hast, Das ist vielleicht fehleranfälliger. Habe jetzt auch persönlich, obwohl ich gar nicht immer damit programmiere, eigentlich nie so empfunden. War eigentlich völlig okay. Was jetzt für mich auch interessant ist, das zu hören, dass das eigentlich die Fonts im Hintergrund sind. Ich habe mir immer gedacht, das macht die IDE in irgendeiner Form, aber die IDE macht gar nichts damit. Habe ich das jetzt richtig verstanden? Wenn die Font das unterstützt, dann hat die IDE da gar keinen Einfluss darauf.",
      "start": 1407232,
      "end": 1450443,
      "confidence": 0.7968472222222223,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Nicht ganz. Also erstmal muss der Font diese Möglichkeiten mitbringen. Das heißt also, dass quasi die technischen Möglichkeiten dafür in dieser Fontdatei da sind. Und dann muss der Editor diese Funktionalität auch unterstützen können. Das ist so ein bisschen wie im Webdesign, wenn ihr eine Webseite baut und bestimmte Browser, bestimmte Dinge einfach nicht mehr und noch nicht unterstützen, dann könnt ihr das in eurem Webdesign zwar so eingetragen haben, oder in eurem CSS eingetragen haben, aber der Browser kennt das einfach noch nicht. So kann es auch bei solchen Font-Features sein, dass der Font das mitbringt, aber der Editor das einfach nicht kennt. Und umgekehrt kann sein, dass der Editor Ligaturen wunderbar unterstützt, aber die Schrift das einfach nicht mit anbietet.",
      "start": 1451344,
      "end": 1493551,
      "confidence": 0.7838688524590163,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber das ist dann schon ein Feature, was ich dann per Checkbox aktiviere und deaktiviere.",
      "start": 1493931,
      "end": 1497133,
      "confidence": 0.6684,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "In der Regel ja, es ist bei Programmiereditoren so ein bisschen oft anders, als es bei Texteditoren ist. Also bei Texteditoren ist es in der Regel so, also an der Stelle geht es auch nicht darum, ist es eine Programmierschrift oder keine Programmierschrift, sondern moderne Schriften bringen sogenannte Open-Type-Features mit. Das sind Ligaturen, das können irgendwelche Stylistic-Sets, sein und so weiter. Da gibt's zig verschiedene Features, die eine Schrift mitbringen kann. Und in Texteditoren ist es dann oft so, dass du dann eine Checkbox hast, wo du sagst, Legaturen ein, Legaturen aus, oder ich will irgendwie Stylistic Set 12 haben, was dann vielleicht ein anderes G mir zeigt. Und bei Programmiereditoren ist meistens diese Möglichkeit, Features auszuwählen, nicht immer im User-Interface zumindest da. Es kann sein, dass man vielleicht irgendwie in die Settings-Dateien sowas reinschreiben kann, aber oft ist es dann so, und das bringen Programmierschriften auch oft mit, dass du deine Schrift vorkonfigurieren kannst, damit es quasi standardmäßig mit drin ist oder eben nicht mit drin ist. Als ein Beispiel die JetBrains-Mono, also von JetBrains-Editoren. Wenn man sich die herunterlädt, dann kannst du explizit auswählen, du willst eine mit Ligaturen oder ohne Ligaturen haben und dann musst du dich im Editor auch nicht darum kümmern, irgendwie Ligaturen auszuschalten. Aber das ist dann auch wieder je nach Editor unterschiedlich und das macht es natürlich dann so ein bisschen auch komplizierter, wenn man jetzt bestimmte Features haben will, aber der Editor das vielleicht gar nicht richtig ansteuern kann.",
      "start": 1497613,
      "end": 1582908,
      "confidence": 0.794093117408907,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Du hattest gerade das Thema ranzoomen erwähnt und in der Vorbereitung habe ich gesehen, dass die Dateiformate von Schriftarten unterschiedlich sind. Also es gibt ja sowas wie ttf und dann gibt es sowas wie, ich glaube, wov und dann habe ich mich gefragt, okay, wo ist denn der Unterschied? Ist das jetzt völlig egal, in welchem Dateiformat ich meine Schriftart veröffentlichte? Aber nein, das ist es nicht. Da gibt es nämlich ein Stichwort, das nennt sich hinting, glaube ich. Ist das richtig?",
      "start": 1583468,
      "end": 1612673,
      "confidence": 0.7915487804878049,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Richtig, genau. Hinting heißt letztlich Bildschirmoptimierung. Und tatsächlich also so von dem Wort her, also man versucht dem Rasterizer des Computers den Hint zu geben, wie die Schrift darzustellen ist. Und das ist ein Teil, also der Font-Ingenieure oder Font-Engineers, als Teil ihrer Arbeit machen, ist eben Schriften für Bildschirme zu optimieren. Das heißt, dass auch bei geringeren Auflösungen die Schrift knackig aussieht. Das ist vor allem relevant für Windows-Systeme gewesen. Auf dem Mac war das standardmäßig so, dass der Mac Rasterizer einfach gemacht hat, was er immer gemacht hat, und das sah dann meistens auch ganz okay aus. Aber vielleicht also für die Hörerinnen und Hörer, die, keine Ahnung, so in Bevor jetzt die ganzen Retina- und Hi-Res-Displays da waren, wenn man zwischen Windows und Mac hin und her gewechselt hat, dann war es so, dass die Schriften auf dem Mac so ein bisschen verwaschener aussahen, so ein bisschen mehr blurry sind und auf Windows ziemlich hart sind. Und das hat eben damit zu tun, dass dieser Mac Rasterizer eher so ein bisschen diesen Blur gemacht hat. Damit war es für den gewöhnlichen Mac-User super angenehm, weil man sich daran gewöhnt hat. Das ist auch nochmal ein wichtiges Stichwort. An das, was man selber gewöhnt ist, das geht dann auch und das gefällt einem oft dann auch besser. Und wenn man dann als Mac-User zu Windows gewechselt hat, neben natürlich dem klischeehaften Meckern über das User-Interface, dann auch die Schrift dazu noch irgendwie so scharf dann war. Und das war ihm unter anderem deswegen, weil auf Windows die Schrift tatsächlich immer bildschirmoptimiert sein musste, damit sie nicht total verrückt aussieht.",
      "start": 1613514,
      "end": 1707115,
      "confidence": 0.8189483394833948,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und wie funktioniert so ein Rasterizer? Also bekommt der irgendwie die Vektordaten oder wie ist denn so eine Schrift aufgebaut? Also mach ich das irgendwie pixelgenau oder wie kann man denn so eine Schrift überhaupt designen?",
      "start": 1707395,
      "end": 1722330,
      "confidence": 0.7468888888888889,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Da muss ich dir auch gestehen, das war so ein Bereich im Font-Engineering, wo ich mich immer schön rausgehalten hab, weil das tatsächlich auch so eine Wissenschaft für sich ist. Aber du kannst dir das tatsächlich so vorstellen wie, vereinfacht gesagt, dass du jedem Pixel, also dass du quasi sagst, auf sechs Pixel, wenn mein Buchstabe nur sechs Pixel zur Verfügung hat, dann sollen die Pixel hier, hier und hier sitzen. Und das machst du im Prinzip für jedes Zeichen, die Schrift hat, das kannst du bis zu einem bestimmten Punkt automatisieren, aber bei bestimmten Zeichen passiert eigentlich so viel auf so wenig Platz, dass du eigentlich immer händisch so ein bisschen zurechtzurren musst, dass der Pixel soll jetzt ein bisschen hoch springen, der Pixel soll ein bisschen runterspringen und so weiter, dass es nachher im Ganzen ein harmonisches Schriftbild gibt.",
      "start": 1722770,
      "end": 1767539,
      "confidence": 0.8056879432624118,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also so Schriften definieren dann auch unterschiedliche Darstellungen, je nach Größe, je nach Pixel, die ich zur Verfügung habe. Also es ist nicht, dass ich das einmal definiere und alles funktioniert dann komplett automatisch, sondern man sagt auch wirklich, wenn die Schrift ganz, ganz groß ist, dann mach irgendwas Spezielles.",
      "start": 1768379,
      "end": 1783528,
      "confidence": 0.7662399999999999,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Genau, es ist oft dann so, dass es bis zu einer bestimmten Größe gibt es dann diese Anweisungen, also gibt es dann diesen Hint in Code und das ist, bin mir nicht ganz sicher, ich glaube irgendwas Assembly, irgendein Assembler ist irgendwie im Hintergrund, also wie gesagt, da bewege ich mich jetzt auf ganz dünnem Eis, was da technisch tatsächlich passiert, aber es gibt im Prinzip dann Die Anweisungen für die Schriftgröße, da soll das so und so und so funktionieren. Und ab einer bestimmten Schriftgröße ist es nicht mehr nötig, weil dann so viele Pixel zur Verfügung stehen, dass dann der Rasterizer da auch nicht mehr irgendwie rumhantieren muss. Das ist auch was, so in der Schriftwelt, um es mal irgendwie so grob zu sagen, wo immer seit vielen, vielen Jahren gesagt wird, das wird eigentlich immer weniger wichtig. weil unsere Displays immer besser werden. Und das stimmt auch. Also tatsächlich, um auch ein bisschen zurückzukommen auf die Dateiformate, in der Regel ist es jetzt nicht mehr so wichtig, wie es vielleicht vor einigen Jahren war. Aber wenn wir uns mal irgendwie so in unserem Alltag umschauen, unser Telefon hat vielleicht ein hochauflösendes Display, euer Computer hat wahrscheinlich ein hochauflösendes Display, aber eure Waschmaschine vielleicht nicht, wenn sie schon ein Display hat. Oder im Auto gibt es oft irgendwelche Displays, die eben auch nicht ganz hochauflösend sind. Und da ist tatsächlich diese Bildschirmoptimierung nach wie vor noch sinnvoll, das zu machen. Und um auf die Dateiformate zurückzukommen, war es eben so, dass .ttf, also .ttf, True Type Format, oft dann eben dieses Hinting hatte. .otf war dann quasi klassisch eher für ungehintet. Und .wof-Schriften konnten eigentlich beides enthalten. Mittlerweile ist es nicht mehr so relevant und mittlerweile ist es auf dem Betriebssystem auch nicht mehr unbedingt wichtig. Das heißt, als Faustregel ist es so, wenn du im Web irgendwas machst, nimm eine WoV-2-Schrift und vielleicht eine WoV-Schrift als Fallback. Und wenn du am Computer irgendwas machst, bist du eigentlich mit TTF meistens gut bedient, weil wenn es da eine Bildschirmoptimierung gibt, dann ist die bei TTF meistens mit drin, klassischerweise, bei OTF nicht unbedingt. Aber wenn beides okay aussieht, dann ja, ist OTR von TTF beides fein.",
      "start": 1783828,
      "end": 1903266,
      "confidence": 0.7955434782608688,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und ich hab gedacht, meine Bildschirme werden immer scheiße. Deswegen hab ich mir das eine oder andere Mal eine neue Grafikkarte und ein Bildschirm gekauft, glaub ich. Eieieiei, naja, hätte ich mal ein bisschen Research betrieben.",
      "start": 1903326,
      "end": 1913251,
      "confidence": 0.5279444444444444,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Es ist sowieso ein Problem, dass Apple ja sehr viel Einfluss hat auf die User. Mir hat irgendwann mal ein Designer erzählt oder ein Fotograf, glaube ich, dass die Leute mittlerweile so auf Rotstich stehen, weil das iPhone rot so stark hervorhebt und sich in der Gesellschaft mittlerweile diese ganzen Fotos, die so einen Rotstich haben, so durchgesetzt haben, nur wegen dem iPhone. So ähnlich ist es wahrscheinlich bei den Schriften auch mit dem verwascheneren Stil da.",
      "start": 1913631,
      "end": 1937617,
      "confidence": 0.7911428571428573,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Wahrscheinlich, ja. Und um das auch nochmal aufzugreifen, es hat halt am Ende, deswegen gibt es ja auch Schriftgestalter und Gestalterinnen, die wirklich Schrift machen, es hat auch immer was mit einem bestimmten Zeitgeist zu tun. Und es gibt Zeiten, wo Keine Ahnung, wo Firmen ihr Rebranding machen und auf einmal benutzen alle ganz klassisch so eine Helvetica, was so eine ziemlich cleane Schrift ist. Und das wirkt dann vielleicht irgendwie so super slick und aufgeräumt und seriös, aber fünf Jahre später schaut man sich das an und denkt so irgendwie, ja, wo ist denn der Charakter? der Firma geblieben und geht dann vielleicht wieder zu eher so einer Schrift, die ein bisschen noch was anderes mitkommuniziert. Und so gibt es natürlich immer irgendwie Phasen, wo mal das eine oder mal das andere angesagt ist. Das heißt, um zurück zu Programmierschriften zu kommen, vielleicht ist es mit den Legaturen in zehn Jahren auch weg. Man weiß es nicht.",
      "start": 1938209,
      "end": 1989671,
      "confidence": 0.8156835443037974,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Hast du selber mal Schriften kreiert?",
      "start": 1989771,
      "end": 1992053,
      "confidence": 0.5895,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Während meinem Studium, ja. Allerdings nie quasi so ernsthaft, weil ich dann tatsächlich eher so in das Engineering rein bin. Also das heißt, Ich habe dann viele Jahre als Font-Engineer gearbeitet. Das ist im Prinzip, man kann sich so ein bisschen vorstellen wie bei der Musik. Also ich habe nie irgendwie selber Songs geschrieben oder gesungen, aber ich habe die Musik gemixt, dass es am Ende sich gut anhört und dass es funktioniert. Und so ist es beim Font-Engineering so. Wir haben Schriften von Designern und Designerinnen bekommen. Das war dann quasi so wie so eine Art Rohschnitt. Und ich habe dann meinen Teil dazu beigetragen, dass die Schrift auf verschiedenen Systemen funktioniert. einigermaßen gut aussieht, also da kommt irgendwie Hinting mit ins Spiel, da kommt noch ein anderes schönes Wort, Kerning, das ist dann der Abstand zwischen einzelnen Zeichen, in Klammern bei Monospace-Schriften nicht relevant, bei geschriebenen, also bei proportionalen Schriften eben schon, sodass das irgendwie harmonisch aussieht. Und ja, und dann was irgendwie ansonsten noch für Wünsche dann da waren, das habe ich dann alles eine Zeit lang gemacht, aber meine eigene Schrift, Nicht nie.",
      "start": 1992073,
      "end": 2053161,
      "confidence": 0.814192513368984,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jetzt sieht man ja immer sehr oft, dass man dann für Schriften irgendwie zahlen muss oder so, wenn man die dann irgendwo verwendet hat oder in einem Logo oder sowas. Hast du da irgendwie einen Einblick? Gibt es da Leute, die wirklich damit Geld verdienen können, mit sowas, mit Schriften erstellen? Du warst ja damals wahrscheinlich als Ingenieur auch nicht kostenlos und hast Geld bekommen dafür, dass du das dann praxistauglich sozusagen gemacht hast.",
      "start": 2053202,
      "end": 2078187,
      "confidence": 0.8052162162162162,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Das ist richtig. Also ist wahrscheinlich wie bei so vielem, also es gibt Leute, die damit sehr gut verdienen und es gibt genug Leute, für die ist es irgendwie eine Nebeneinkunft, die sie nicht über Wasser hält. Aber es ist in der Tat so, dass es oft so ist, dass Also von dem Schriftmarkt ist es so, es gibt eben die Designer und Designerinnen, die Schriften entwerfen. Dann gibt es sogenannte Foundries, die diese Schriften dann meistens vermarkten. Das ist so ein bisschen wie so ein Label oder ein Verlag bei Büchern. Und dann gibt es eine Anzahl an Leuten im Hintergrund, die auch noch ihren Teil dazu beigetragen haben, so eben unter anderem Font Engineers. Und wenn du eine Schrift machst, die vielleicht gerade irgendwie so einen Zeitgeist trifft, dann kannst du damit auch ausgesorgt haben. Gehört natürlich viel Glück dazu und gehört dann auch wieder viel Marktdynamik dazu. Also ein Beispiel, als Facebook vor vielen, vielen Jahren mal ihr Logo geändert hat zu einer bestimmten Schrift, ich glaube Clavica war das, von eben so einer Foundry, ist dieser Fond danach durch die Dicke gegangen, weil alle irgendwie ein Logo haben wollten, was irgendwie so aussieht. Und haben damit einen ziemlichen kommerziellen Erfolg gehabt. Aber es gibt halt genug Schriften, die einfach im Schrank liegen, die nicht so breit genutzt werden.",
      "start": 2078206,
      "end": 2153560,
      "confidence": 0.8097882882882876,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich habe gerade mal den Reality-Check gemacht. Und zwar habe ich einfach bei LinkedIn Font-Engineer eingegeben. Und da gibt es sogar Senior Font-Engineer und so weiter und so fort. Und das sind alles Leute, die anscheinend in Berlin in der brücken und ko arbeiten also das scheint wirklich ein ding zu sein also geil senior von engineer gibt es da noch stefan engineer das würde mich jetzt auch mal interessiert.",
      "start": 2153580,
      "end": 2176615,
      "confidence": 0.7326571428571428,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Es ist wahrscheinlich überall so also das senior junior je nachdem wie deine firma aussieht ist das dann vielleicht eine aufstiegschance die du dann haben kannst. Letztlich ist es so ein bisschen so ein Job-Titel, der quasi einfach nur heißt, du machst irgendwas mit Schriften, bist aber nicht Type-Designer, sondern eher so der Techniker dahinter.",
      "start": 2176675,
      "end": 2196787,
      "confidence": 0.7720181818181818,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Kommen wir mal wieder zurück zur Programmierung. Und zwar ist es ja, wenn ich Software entwickle, da sind ja auch ab und zu mal, ich sag mal, Special-Character am Start, also geschwungene Klammern und so weiter und so fort. Und da gibt es ja immer den ganz alten Trick, wenn du irgendwie deinen Arbeitskollegen ärgern möchtest, dann gehst du mal kurz in seine IDI und addest da so einen richtigen Unicode Charakter, der dann, weiß ich nicht, irgendwas Griechisches, die sehen dann immer so ganz komisch aus. Und dann schlägt der Compile-Vorgang fehl. Also es gibt da zum Beispiel jetzt irgendwie so Slashes oder Zeichen, die Unicode-Zeichen, die sehen aus wie Slashes, sind aber keine Slashes. Und dann schlägt auf jeden Fall der ganze Compile-Vorgang fehl. Der Compiler hat mit hoher Wahrscheinlichkeit nicht die richtige Zeile, sondern es fehlt irgendwie fünf Zeilen später und das findet man nie im Leben.",
      "start": 2196807,
      "end": 2243274,
      "confidence": 0.7768866666666666,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ist schön, dass du so positive Energie immer hast mit deinen Kollegen.",
      "start": 2243294,
      "end": 2246517,
      "confidence": 0.7914166666666667,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Naja, sowas nennt man Kultur, Wolfgang, ich weiß. Aber kann die Schrift da irgendwie unterstützen, um sowas vorzubeugen, dass man irgendwie, weiß ich nicht, keine Unicode-Character für die Programmierung hat und dann, also ich sag mal, griechische Slashes oder ähnliches haben jetzt da eigentlich ja nix zu suchen, glaub ich.",
      "start": 2247144,
      "end": 2265816,
      "confidence": 0.7678200000000001,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, die haben noch nichts zu suchen. Höchstens, du willst irgendwas mit griechischen Slashes an der Stelle schreiben. Da gibt es mehrere Ebenen. Also die kurze Antwort ist, die Schrift kann da meistens recht wenig dafür, weil du kannst Zeichen in deinem Editor schreiben, auch wenn die Schrift dieses Zeichen nicht unterstützt. Also, um da auch noch mal einen Schritt zurückzugehen, wenn ich eine Schrift baue, dann kann ich eine bestimmte Anzahl an Zeichen gestalten. Und das heißt, da kommt dann irgendwie so was wie Unicode mit ins Spiel. Das heißt, dass ich quasi sag, auf diesem Code liegt dann irgendwie das kleine A, auf diesem Code liegt das kleine B und so weiter und so fort. Aber der Unicode ist so riesig, also da sind ja dann auch die Emoji mit drin und verschiedene Sprachen und alte Skriptsysteme und so weiter und so fort, dass es keine Schrift gibt, die alles enthält. Sondern irgendwann ist es einfach für dich als Schriftentwickler und Entwicklerin einfach so, dass du eine Grenze ziehen musst. Und alle Zeichen, die eben außerhalb deines sogenannten Character-Sets sind, können aber trotzdem in einem Editor geschrieben werden. So als vereinfachtes Beispiel, wenn wir im deutschsprachigen Raum ein Ä schreiben, also ein A-Umlaut, dann kann es durchaus sein, dass man sich irgendwo eine Schrift mal heruntergeladen hat, die eben diesen A-Umlaut nicht enthält, weil da irgendwie nur A bis Z in groß und klein drin sind. Und damit hat die Schrift im Prinzip erstmal dann ihren Job gemacht, zu sagen, ich kann das darstellen, was ich habe, alles andere ist nicht mehr meine Aufgabe. Und dann kommt der Editor mit ins Spiel. Und da gibt's jetzt verschiedene Varianten, wie sowas gehandelt werden kann. Es kann sein, und das kennt man vielleicht auch, dass manchmal so ein Fragezeichen in einem Blog steht, was dann einfach so ein Hinweis ist, hier wird jetzt gerade ein Zeichen verwendet, was irgendwie nicht gerendert werden kann, was nicht dargestellt werden kann. weil ich das mit dieser Schrift nicht rendern kann. Andererseits ist es oft auch so, dass dann einfach ein Fallback genommen wird. Das kennt man aus dem Webdesign vielleicht mehr, dass wenn man irgendwie in seinem CSS-Fontstack irgendwie drei Schriften definiert und dann sagt, okay, wenn das Zeichen in der Schrift nicht existiert, dann soll einfach irgendwie eine andere Schrift verwendet werden, die dann dieses Zeichen rendert. Und das ist dann oft so, dass es irgendwie, wenn man genau hinschaut, auffällt, oft gut genug ist. Und das kann in so einem Fall natürlich passieren, dass du, wenn du irgendein Zeichen da einfügst, was die Schrift nicht hat, dass dann einfach eine andere Schrift genommen wird und bei vielen Zeichen bemerkst du es einfach nicht. Das heißt also, die Schrift kann da nichts dafür. Und du kannst an der Stelle auch nicht eine Schrift auswählen, die sowas vermeiden kann. An der Stelle ist eher so die Verantwortung, tatsächlich zum Editor zu schieben, zu sagen, und da gibt es verschiedene Plugins beispielsweise, für Weißraumdarstellungen. Was im Prinzip nichts anderes heißt, als wenn ich ein Space mach, dass dann eben vielleicht irgendwie so ein grauer Punkt dann da ist, oder wenn ich ein Tab benutze, dass dann irgendwie so ein grauer Pfeil gezeigt wird, dass ich im Editor sehe, was für ein Space ist da, wie wurde der kreiert. Und du hast irgendwie dieses Slash genannt. Es ist tatsächlich auch so, es gibt Zeichen, die keine Breite haben und die quasi unsichtbar sind, also die auch keine Outlines beinhalten. Das klassische Beispiel ist das Leerzeichen. Da ist nichts drin, da ist einfach quasi nur ein Space. Und es gibt Spaces, die keine Breite haben, das sogenannte Zero-Width-Space. Und wenn du irgendwie deine Unternehmenskultur vorantreiben willst, wenn das irgendwie eine gängige Praxis bei dir ist, dann kannst du tatsächlich diese Zero-Width-Space in den Code reinpacken. Und wenn der Editor nicht irgendwie darstellt, hey, hier ist ein Zeichen, das ist irgendwie in deinem Code drin, aber es ist klassischerweise nicht dargestellt, dann ist es tatsächlich schwer, das zu finden, in der Tat.",
      "start": 2266116,
      "end": 2487951,
      "confidence": 0.8094414814814812,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wie kommt man denn auf so eine Idee, dass man diesen Charakter überhaupt kreiert? Kannst du da zufällig den Hintergrund dazu?",
      "start": 2488222,
      "end": 2495886,
      "confidence": 0.7017142857142858,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Leider nicht. Nee, also es hat alles einen Grund, dass es da ist. Beispielsweise im HTML benutzt man ja manchmal so dieses non-breaking space, also Semikolon, NBSP, glaube ich, oder und NBSP, Semikolon, so rum. was ich damit verwende, dass ich sage, okay, hier soll jetzt ein Space drin sein, aber wenn ein Zeilenumbruch stattfindet, soll hier irgendwie mein Vor- und Nachname nicht umgebrochen werden. Und so gibt's wahrscheinlich für zig andere Zeichen auch irgendwie einen Grund, warum das da ist, warum das im Unicode drin ist. Das ist quasi dieses Regelwerk, was alle Zeichen definiert oder alle Codes für Zeichen definiert. Aber was jetzt tatsächlich so der geschichtliche Hintergrund ist, keine Ahnung. Es gibt wahrscheinlich zu jedem Zeichen, und das macht diese ganze Materie auch so spannend, gibt es eine Geschichte, die fängt zum Teil bei hunderten von Jahren an, wie Leute früher irgendwie Schrift geschrieben haben, bis hin tatsächlich zu technischen Dingen und der Art und Weise, wie wir kommunizieren, also Stichwort irgendwie Emoji, dass das alles auch Zeichen sind, die mittlerweile eben ein Teil unserer Kultur sind und auch irgendwie gestaltet werden. Und da hat jedes Zeichen seine eigene Geschichte.",
      "start": 2495946,
      "end": 2562363,
      "confidence": 0.8029222797927458,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Dieses Beispiel mit dem Slash, das geht gerade irgendwie im Internet rum, weil es gibt eine neue Top-Level-Domain .zip und .zip ist natürlich auch ein bekanntes Dateienformat und da gibt es gerade so eine, kann man das schon sicherheitslückend nennen, weiß ich nicht, aber ein Attack-Vector, wo jemand halt ein bisschen schabernack mit einer URL darstellt und dir dann ein .zip-File zum Download anbieten möchte, obwohl das dann aber die Top-Level-Domain ist und da werden nun halt Zeichen in die URL eingefügt, die so ähnlich aussehen wie ein Slash, was da natürlich dann ein URL-Pfad ist, ist aber dann keiner ist und so weiter, deswegen kam ich darauf zu.",
      "start": 2562617,
      "end": 2599806,
      "confidence": 0.809412844036697,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Da sind wir wieder bei der Kultur, Andi, oder? Das, was du Schabernack nennst, nennt sich Phishing.",
      "start": 2599826,
      "end": 2604148,
      "confidence": 0.7565882352941177,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Na, es ist ein bisschen was anderes, als wenn ich das in der URL mache und irgendwie was zum Download unterjubel oder ob ich das in einem Quellcode mache, da wo du noch ein Git-Diff machen kannst und so weiter und so fort.",
      "start": 2604968,
      "end": 2614894,
      "confidence": 0.7525116279069767,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, du kannst das für Phishing sehr gut verwenden, weil du dann zu irgendeiner Domain umleitest, die gar nicht GitHub zum Beispiel ist und dort reichst du deine User- und Passwortdaten oder so wieder ein. Also das ist sehr wohl möglich. Und interessanterweise, ich habe das selber gerade mit einer Kollegin auf Slack diskutiert und hatte genau dieses Problem. Ich habe Monospace aktiviert, also diesen klassischen Code Editor in Slack, und da war der Unterschied fast nicht sichtbar. Und wenn du dann aber die normale Schrift verwendest, die normale Message-Schrift, da war ganz klar ersichtlich der Unterschied. Also da gibt es ja wohl Unterschiede, ja.",
      "start": 2615135,
      "end": 2649532,
      "confidence": 0.7881047619047616,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Zur Vorbereitung dieser Episode hab ich dann auch mal ein bisschen gegoogelt, okay, was sind denn coole Programmierfonds? Und dabei bin ich über eine Sache gestolpert, die hab ich damals, als die Release wurde, zwar mitbekommen, aber irgendwie zur Seite geschoben, weil das Thema Schriftarten für mich gar nicht relevant war.",
      "start": 2650295,
      "end": 2664363,
      "confidence": 0.8049411764705883,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Lass mich raten, es hat mit Go zu tun.",
      "start": 2664943,
      "end": 2666344,
      "confidence": 0.595,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Es hat was mit Go zu tun. Und zwar hat Go ja seine eigene Schriftart. Also, Google hat eine eigene Schriftart zum Programmieren von Go rausgebracht.",
      "start": 2666404,
      "end": 2676149,
      "confidence": 0.8575,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Diese Zip-Domain ist übrigens auch von Google.",
      "start": 2676169,
      "end": 2678170,
      "confidence": 0.5611428571428572,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Ja, jetzt von Squarespace, also Domains wurde verkauft, also Beiflach halten.",
      "start": 2678920,
      "end": 2683901,
      "confidence": 0.6953636363636364,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ja, aber es gehört trotzdem Google, glaube ich. Aber egal, komm zurück zu deiner Go-Language, bitte.",
      "start": 2683921,
      "end": 2688442,
      "confidence": 0.5918125,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Dann habe ich mir noch mal den Blogartikel durchgelesen von der Go-Font, nicht Fong-Font. Und dabei habe ich gelernt, dass eine Schriftart auch eine deutsche Industrienorm erfüllen kann. Und ich konnte nicht mehr.",
      "start": 2688462,
      "end": 2706567,
      "confidence": 0.8122121212121212,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also diese Schriftart, Ja, ich glaube, ich.",
      "start": 2706607,
      "end": 2708444,
      "confidence": 0.4605714285714286,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Bin jetzt raus als Österreicher, ich lasse die zwei Deutschen über die Norm diskutieren.",
      "start": 2708464,
      "end": 2712006,
      "confidence": 0.7477857142857143,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Und zwar habe ich dann gesehen, es gibt eine deutsche Industrienorm 1450, diese Norm beschreibt, wie Schriften leserlich dargestellt werden. Philipp, bitteschön.",
      "start": 2712026,
      "end": 2721954,
      "confidence": 0.7981818181818181,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Was hat es damit auf sich? Ich versuche es so spannend wie möglich zu machen, weil es in der Tat eine schnöde DIN-Norm ist und die will man auch nicht lesen, da ist alles sehr, sehr viel verklausuliert. Die Idee dahinter war, und das ist grundsätzlich erstmal ein redlicher Ansatz, dass es um die Leserlichkeit von Schriften geht, die wir in unserem öffentlichen Raum beispielsweise haben, und sichergestellt werden soll, dass diese Schrift für möglichst viele Menschen lesbar ist. Beispielsweise, wenn man jetzt irgendwie in ein Krankenhaus reinkommt und da irgendwie die Tafel hat, wo geht es zur Notaufnahme, ist es sinnvoll, dass diese Tafel so gestaltet ist, dass jeder die möglichst gut lesen kann. Und da kommen bestimmte Dinge mit ins Spiel, wie eine Schriftart, in welcher ist das gesetzt, das andere ist eine Schriftgröße, Zeilenabstand und solche Dinge. Oft ist Schrift auch hinterleuchtet, das heißt also, dass quasi irgendwie ein Licht dahinter ist. Versucht wurde mit dieser DIN ein Regelwerk aufzustellen, was dann als Schablone angesetzt werden kann, dass gesagt wird, okay, wenn du hier dieses Design für das Krankenhaus machst, das Orientierungsdesign, dann darfst du nur Schriften verwenden, die auch DIN-konform sind und dann muss es auch alles so gestaltet sein, dass dein Design DIN-konform ist, weil wir sicherstellen wollen, dass jeder sich dann da zurechtfindet. Das ist erstmal ein guter Ansatz. Die Realität ist dann eben, wie so oft, es lässt sich nur sehr, sehr schwer wirklich in so eine Schablone drücken, weil eben so viele Komponenten dazukommen bei Design, bei Schriften, womit es fast unmöglich ist. Und Fun Fact, in dieser DIN werden Schriften genannt, die diese Normen erfüllen anscheinend. Die tun es aber gar nicht. Also wenn man da wirklich mal reingeht, also es ist sowas wie Strichstärke, also wie breit darf beispielsweise ein i sein. Wenn man das mal tatsächlich durchrechnet, dann gibt es da, also werden Schriften präsentiert, die dieser, die nicht, nicht entsprechen. Und deswegen ist auch damals, das war glaube ich 2013, als es veröffentlicht wurde, sehr, sehr kontrovers diskutiert. Und vor allem, weil das natürlich für dich als Schriftgestalter und Gestalterin wenn du mit dem kunden zu tun hattest dann halt oft als anforderungen dann auch irgendwann formuliert wurde ja ist deine schrift in den konform das heißt du musst dir dann irgendwie für keine ahnung 20 euro erstmal dieses dokument runterladen und dann versuchen daraus sinn zu machen und letzten endes ist es einfach nicht möglich eine schrift zu gestalten die dieser denen spricht, Meines Wissens gibt es auch keine Schrift, die tatsächlich irgendwie alle Anforderungen, die da genannt sind, erfüllt. Es gibt quasi genug Schriften, die dem nahe kommen, aber keine erfüllt das ganz. Wenn die Go-Schrift sagt, dass sie das tut, glaube ich, dass sie versucht. so konform wie möglich zu sein. Aber wenn da irgendjemand gesagt hat, wir müssen in unseren Blogbeitrag oder was auch immer das war, als sie diese Schrift verwendet haben, irgendwie diese DIN mit reinbringen, war wahrscheinlich irgendjemand im Hintergrund, der gesagt hat, das ist irgendwie wichtig, dass wir das kommunizieren. Aber letzten Endes, Ja, vor allem, weil es ja ein internationaler Beitrag war. Also vielleicht musst du jetzt, Wolfgang, sagen, wie das irgendwie auf unsere internationale Community wirkt. Ist das irgendwie ein Qualitätsmerkmal, wenn irgendeine DIN erfüllt wird? Oder ist das eher so Augenrollen? Ja, bei Schriften ist es meiner Meinung nach eher so ein bisschen naja.",
      "start": 2721974,
      "end": 2914411,
      "confidence": 0.8076613756613746,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich sitze nur da mit nem Schmunzeln, dass Deutschland wieder was kreiert hat, was nicht erfüllbar ist.",
      "start": 2914471,
      "end": 2919675,
      "confidence": 0.7269411764705883,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Also, ich musste auf jeden Fall stark lachen, als ich gesehen hab, dass es dafür eine deutsche Industrienorm gibt. Ich bin ehrlich, gewundert hat's mich auch nicht. Aber wenn ich jetzt schon sehe, dass eine Programmiersprache sogar eine eigene Schriftart hat, stelle ich mir die Frage, macht es Sinn, dass, wenn ich Go programmiere, mir die Go-Schriftart nehme, und wenn ich Python programmiere, mir eine andere Schriftart nehme, meine whitespaces mit irgendwas füllt, weil ich meine bei Python ist ja die Einrückung und die whitespaces ist ja relevant, bei vielen Sprachen nicht, weil man hat ja Klammern und Blöcke und Co. Also macht es Sinn für verschiedene Programmiersprachen verschiedene Schriftarten zu verwenden?",
      "start": 2919895,
      "end": 2962243,
      "confidence": 0.8110625000000002,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Ich würde sagen, es kann durchaus Sinn ergeben, wenn man Freude daran hat, sich ein bisschen mit Schriften zu beschäftigen. Du hast es gerade schon Python genannt. Es ist in der Tat so, dass bestimmte Programmiersprachen manche Zeichen mehr verwenden als andere Zeichen und als andere Programmiersprachen. Das heißt, wenn ich in JavaScript programmiere, wo ich sehr viel mit geschweiften Klammern zu tun habe, dann wäre es nicht verkehrt, eine Schrift da zu haben, wo die geschweiften Klammern ein Design haben, das mir gefällt. In Python, ich hatte vorhin schon mal angesprochen, die Underscores, die in Python eben eine eine wichtige Rolle spielen, weil in der Variablenbenennung nahegelegt wird, dass man eben in Underscores den Variablen schreibt, wenn es mehrere Wörter sind. Kann es durchaus sein, da mal einen Blick drauf zu werfen, wie dick oder dünn oder breit oder kurz ist irgendwie diese Underscore. Und dann kann man tatsächlich so weit gehen. Und ich muss zugeben, das habe ich beispielsweise bei mir, einfach weil ich es mag, dass ich sage, wenn ich in Markdown schreibe, dann benutze ich diese Schrift und wenn ich Python schreibe, dann benutze ich jene Schrift. Das ist so was, was man tatsächlich machen kann und was so ein bisschen auch so für mich ein ganz angenehmer Wechsel ist, so von, wie nennt man sowas? Es bringt mich in einen anderen Modus durch diese unterschwellige Veränderung der Schrift, obwohl das Theme an der Stelle für mich gleich bleibt. Ich könnte natürlich auch mein Editor-Theme an der Stelle noch wechseln, das Markdown vielleicht irgendwie ein Light-Theme hat und Python ein Dark-Theme hat. Aber so könnte man tatsächlich rangehen und sagen, okay, wenn ich in der Sprache was schreibe, nehme ich diese Schrift, weil die hat für mich diese ganz klare Unterscheidung von diesem Zeichen zu einem anderen Zeichen oder das Add-Symbol sieht hier super schön aus und ich muss jedes Mal lächeln, wenn ich das sehe, bin ich voll dafür. Also würde mich freuen, wenn es da draußen noch Leute gibt, die tatsächlich für jede Programmiersprache, die sie schreiben, eine andere Schrift verwenden.",
      "start": 2962603,
      "end": 3072728,
      "confidence": 0.7915994236311245,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Verwendest du für Python als Python-Programmierer und Schriftexperte irgendeine spezielle Schrift?",
      "start": 3072988,
      "end": 3078553,
      "confidence": 0.8105454545454545,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Ja, also um irgendwie konkret zu sein, also eine Schrift, die ich sehr, sehr gerne mag, ist JetBrains Mono, die von JetBrains rausgebracht wurde vor ein paar Jahren. Die verwende ich allerdings in VS Code, wo standardmäßig, glaube ich, Cascadia Code da ist, die auch nicht so schlecht ist, aber ich mag JetBrains so ein bisschen lieber. Dann Input Mono. Das ist eine Schrift, die ich vorhin erwähnt hatte, als es um diese proportionale Programmierschriften ging. Da benutze ich tatsächlich die, was ist das? Input, ich weiß gar nicht, ich bin mir gerade ganz unsicher. Ich glaube, die heißt einfach nur Input Sans, die ich für Markdown verwende, weil ich wenig mit Tabellen in Markdown arbeite, wo ich irgendwie so dieses Geschriebene so ein bisschen harmonischer mag. Aber ich probiere gerne rum.",
      "start": 3078613,
      "end": 3119755,
      "confidence": 0.7408030303030307,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also backen wir alles in den Shownotes.",
      "start": 3120055,
      "end": 3121876,
      "confidence": 0.796,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Genau, ich habe mir tatsächlich so ein paar Schriften genauer angeschaut und kann euch da eine Liste zur Verfügung stellen von Programmierschriften, die jetzt nicht auf eine Programmiersprache spezifisch zugeschnitten sind, aber die durchaus irgendwie ein angenehmes Schriftbild haben. Können wir dann alles in die Shownotes.",
      "start": 3121916,
      "end": 3137184,
      "confidence": 0.8216521739130435,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Du hast ja auch einige Artikel zu dem ganzen Thema geschrieben mit ganz vielen Details, die verlinken wir natürlich auch in den Show Notes nochmal extra. Meine Frage zu JetBrains, ist diese Schrift kostenlos oder wollen die Geld dafür haben? Oder ist das einfach nur Werbung dafür, dass sie dann in der Schrift ihren Firmennamen haben?",
      "start": 3137644,
      "end": 3154882,
      "confidence": 0.8590357142857143,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Also das ist eine von, weil wir vorhin von Entwicklungen gesprochen haben, das ist eine schöne Entwicklung. Es gibt eigentlich die meisten Programming-Fonds mittlerweile kostenlos und JetBrains Mono ist kostenlos. Und ja, da gibt es wirklich eine Handvoll Schriften, die man sich runterladen kann, die kosten nichts. Und weil wir irgendwie Google genannt haben mit dem Go-Fund, also es gibt Google-Fonds und da kann man die meisten Schriften auch finden. Man kann die Schriften dann oft auch bei den Leuten finden, die die Schrift gemacht haben. Und in der Regel kosten die nichts. Es gibt aber auch Schriften, die kosten was. Und in den Schriften steckt tatsächlich auch viel Arbeit. Und das ergibt durchaus Sinn, wenn einem eine Schrift da gefällt, dass man die dann auch entsprechend kauft. Aber für die meisten Monospace-Fonds, die es so gibt, die mit einem Editor mitgeliefert wurden, ist es tatsächlich so, dass die kostenlos sind, weil Unternehmen dahinter stecken, die eben dann die Produktion mitfinanziert haben.",
      "start": 3155267,
      "end": 3202393,
      "confidence": 0.8083703703703703,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich habe mal gerade nachgesehen, die JetBrains Mono ist unter der OpenFontLicense lizenziert und die OpenFontLicense ist wirklich eine anerkannte freie OpenSource Lizenz. Also es ist jetzt keine proprietäre JetBrains oder ElasticLizenz, sondern es ist wirklich eine anerkannte Lizenz, halt nur mit dem speziellen Fokus für Schriftarten. Wieder was gelernt, super geil. Und wenn ich jetzt hier dir die ganze Zeit so zuhöre und auf die Webseite von JetBrains Mono gehe, dann merke ich erst mal, wie viel Arbeit eigentlich in dieser Schriftart steckt. Weil du hattest ja gerade schon von dem Support von Schriftarten und Zeichen gesprochen. Wir hatten gerade irgendwas Griechisches genannt, aber da kannst du, glaube ich, auch irgendwas Kurillisches nehmen oder ähnliches. Da hat man ja bei sehr vielen Schriftarten schon mal ein bisschen was erlebt. Aber ich meine, diese Schriftart hat Support für über 150 Sprachen, für über 140 Ligaturen. Die haben eine größere Buchstabenhöhe für ein besseres Leseerlebnis. Und ich so, das ist mir noch nie aufgefallen, und da haben die halt so Slider, so Bildslider, wo die zwei Schriftarten miteinander vergleichen. Und ich denk so, wow, das ist ja wirklich lesbar. Also ich lass mich schon grad von der Marketingwebseite schon stark beeinflussen, muss ich zugeben.",
      "start": 3202793,
      "end": 3280283,
      "confidence": 0.7944975369458127,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Es steht tatsächlich auch in der DIN-Norm drin, was die Lesbarkeit betrifft. Das ist genau das, was du vorhin genannt hast, also sowas wie, wie groß sind die Kleinbuchstaben, das wurde versucht, in dieser DIN-Norm irgendwie festzulegen. Ich weiß jetzt nicht, ob JetBrains tatsächlich auch sich auf dieser DIN-Norm wieder referenziert, aber Es ist durchaus ein Argument, zu sagen, meine Schrift ist besser lesbar und das dann auch entsprechend zu argumentieren, indem man sagt, meine x-Höhe, also so wird das quasi genannt, die Kleinbuchstabenhöhe, ist größer, als es bei herkömmlichen Schriften der Fall ist.",
      "start": 3280523,
      "end": 3312788,
      "confidence": 0.7920638297872338,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Spielt eigentlich Farbe auch irgendwie eine Rolle oder ich denke da gerade auch ans Dark Theme, was ja unter EntwicklerInnen sehr beliebt ist, dass dann die Schrift irgendwie, keine Ahnung, leicht dicker ist, damit sie sich mehr vom schwarzen Hintergrund abhebt oder eben nicht, keine Ahnung, ob es in die Richtung auch was gibt, dass Schriften sowas beachten?",
      "start": 3313105,
      "end": 3331905,
      "confidence": 0.8077758620689655,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Spielt eine Rolle und da sprichst du auch was Gutes an. Also wenn wir, wir haben jetzt die ganze Zeit über eine Schriftart gesprochen und letztlich spielen da ja auch noch andere Dinge mit rein. Also in welcher Größe habe ich meine Schrift und welches Color-Theme habe ich in meinem Editor, in welcher Farbe wird dann entsprechend auch die Schrift dargestellt. Und all das spielt eine Rolle. Dazu kommt dann noch Zeilenabstand vielleicht. Und es ist tatsächlich so, dass wenn du weiße Schrift auf schwarzem Hintergrund hast, dass die oft durch das Rendering verfettet wird. Das war meines Wissens vor Jahren in Safari auch irgendwie so ein Bug, dass wenn du irgendwie die eine Schrift hattest, hat es, dass in Safari dein Text einfach so ein bisschen blurriger und dicker aussah als in anderen Browsern, obwohl du im gleichen System warst. Und da kann sich tatsächlich so das Schriftbild so ein bisschen wandeln. Aber grundsätzlich würde ich sagen, es ist so ein bisschen vernachlässigbar, zumal, wenn du für dich deinen Computer einrichtest und dann ein Color-Theme benutzt, was dir gefällt und eine Schriftgröße, in der du die Schrift gut lesen kannst und dann du eine Schrift hast, die dir supergut gefällt und dann wird die vielleicht so ein bisschen zu dick dargestellt, dann ist es mittlerweile oft auch so, dass die Schriften in sogenannten Familien unterwegs sind, sodass du dir einen anderen Schnitt auswählen kannst, der dann ein bisschen feiner ist vielleicht. Das heißt, da kannst du durchaus so ein bisschen dann die Schriftdatei letztendlich herauspicken und ansteuern, die dann genauso dargestellt wird, wie du es gerne haben magst.",
      "start": 3332385,
      "end": 3421658,
      "confidence": 0.7722676579925651,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Du hattest gerade Schriftfamilien angesprochen, was ich in der Vorbereitung mitgenommen habe ist, nicht jede Schriftart gibt es in Fett oder in Kursiv, ist das richtig?",
      "start": 3421898,
      "end": 3431362,
      "confidence": 0.7596153846153848,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Das ist richtig, ja.",
      "start": 3431382,
      "end": 3432543,
      "confidence": 0.7184999999999999,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Und ich glaube man nennt das dann eine Schriftfamilie, das bedeutet ich habe eine normale Font und dieselbe Font gibt es nochmal in Bold und in Italic. Und das sind dann drei einzelne Schriftarten, aber zusammen ist das dann eine Schriftfamilie, oder?",
      "start": 3432603,
      "end": 3446829,
      "confidence": 0.8382142857142858,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Genau, das sind einzelne Fonts, also man, da gehen wir so ein bisschen in die Kleingedruckte rein, also man kann eigentlich sagen, dass es eine Schriftart ist, was so ein bisschen so das Übergeordnete ist, also wenn wir jetzt irgendwie über Areal sprechen, dann ist das die Schriftart. Arial und die kann Bold, Italic und so weiter und so fort haben. Aber unten drunter sind es dann einzelne Font-Dateien, die dann das Design für diese Schriftschnitte beinhalten. Und da ist es eben so, wenn ich jetzt anfange, irgendwie eine Schrift zu gestalten, dann fange ich eben mit einer Dicke in der Regel an. Das kann dann eben so der normale Schnitt sein und so weiter, alles aufrecht. Aber dann ist es mittlerweile eigentlich selten so, wenn ich eine Schrift, vor allem wenn ich die kommerziell rausbringen will, dass man noch Italic braucht, dass man noch Bold braucht und dann auch Bold Italic zumindest. Und das sind eigentlich auch bei den meisten Schriften, die man so findet, sind das zumindest diese, die vier Styles, die eine Schriftfamilie enthält. Aber es geht noch viel, viel weiter. Also eine Schriftfamilie kann auch noch irgendwie extra bold und super thin enthalten und kann auch irgendwie 30 und noch mehr Familienmitglieder in Anführungszeichen haben. Aber da gibt es tatsächlich irgendwie sehr, sehr viel. Wenn du bei dir auf bold umstellst, ist es in der Regel so, dass dann eine andere Fontdatei im Hintergrund verwendet wird.",
      "start": 3446869,
      "end": 3525372,
      "confidence": 0.7975499999999995,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wenn man die im Browser einbindet, muss man das ja dann zum Beispiel bei Google Fonts oder so auch immer auswählen, welche Dicken man wirklich braucht dann auf der Webseite und die restlichen werden dann gar nicht eingebunden.",
      "start": 3526022,
      "end": 3535673,
      "confidence": 0.7900263157894737,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Richtig, genau. Also weil das was passieren kann, weiß ich nicht, ob das jetzt immer noch der Fall ist, wenn die Schrift nicht gefunden wird. Also wenn ich beispielsweise sage, meine font-family, also so ist ja auch die CSS-Deklaration an der Stelle, ist meinetwegen irgendwie source-code-pro, was eine Schrift ist, die Adobe rausgebracht hat, die frei verwendbar ist. Und ich habe jetzt nur die normale Breite runtergeladen und die normale Dicke und ich mache irgendein Element auf bold, kann es sein, dass der Browser auch versucht, das von sich aus fett zu stellen. Und das ist dann in dem Fall eben nicht der tatsächlich gestaltete Bold von, sondern irgendwas Berechnetes. Und da ist es tatsächlich so, dass man da so ein bisschen drauf achten sollte, je nachdem, was man im Web dann für sein Design verwendet, dass entsprechend auch im Hintergrund alle Schriften dafür vorhanden sind. Und das betrifft eben beispielsweise, hatten wir vorhin, eben auch die Zeichen. Also wenn ihr eine Webseite macht, wo ihr wüsst, ihr habt polnische Namen beispielsweise als Autoren- und Autorinnennamen, dann solltet ihr auch schauen, ob die Schrift tatsächlich polnische Zeichen unterstützt an der Stelle.",
      "start": 3536499,
      "end": 3596614,
      "confidence": 0.7909057591623037,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Wir haben uns gerade über JetBrains unterhalten und die bringen ja auch eine ganze Menge an IDEs raus, also PyCharm und PHPStorm und wie sie nicht alle heißen. Ich habe mir jetzt aber gerade mal ganz kurz rausgesucht, welche Default-Schriftarten Visual Studio Code hat. Und da finde ich drei Konstanten im Source Code von Visual Studio Code, die abhängig vom Betriebssystem sind. Also ich kriege andere Default-Schriftarten auf Windows als auf Mac und auf Linux. Ist das überall so? Also ich habe so das Gefühl, dass die Schriftart zumindest bei Visual Studio Code sehr stark ans Betriebssystem angebunden ist. Aber warum ist das denn überhaupt so? Weil ich meine, eine Kurier New gibt es ja überall.",
      "start": 3596634,
      "end": 3640326,
      "confidence": 0.8081637931034483,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Genau, es ist allerdings daran so, dass wahrscheinlich irgendwie auf die Nummer sicher gegangen wird, dass es eben für das Betriebssystem optimiert. Und da ist es dann tatsächlich so, also nehme ich jetzt mal an, ohne es komplett zu wissen, dass Linux da andere Anforderungen hat an der Stelle und damit das so funktioniert und vielleicht auch die Art und Weise, wie eine Schrift auf dem System installiert wird, dass da dann mit einem anderen Font-Format vielleicht ein bisschen besser umgegangen werden kann, als es auf einem Windows-System ist an der Stelle.",
      "start": 3640366,
      "end": 3668205,
      "confidence": 0.7955434782608694,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jetzt haben wir natürlich über eine ganze Menge von Eigenschaften und Attributen von Schriftarten gesprochen. Welche Top-2-Tipps gibst du jemandem an die Hand, der nach diesem Podcast sagt, okay, jetzt stelle ich mal meine ganzen Schriftarten von den IDEs auf den Kopf. Wo sollte der sich informieren? Und nach welchen Top-2-Kriterien sollte er oder sie die Schriftart auswählen? Um jetzt mal weg von dieser reinen Subjektivität, auch die sieht ja schön aus, weil sonst könnte man ja auch in Comic Sans programmieren.",
      "start": 3668385,
      "end": 3696407,
      "confidence": 0.7324634146341458,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Na, kannst du ja machen, wenn's dir gefällt. Ich denke, also wenn wir jetzt tatsächlich die Schriften dann unten in den Shownotes haben, ist es ein guter Ansatzpunkt, da mal den Links zu folgen. Und dann würde ich tatsächlich erst mal sagen, geh komplett subjektiv an die Sache ran. Ich meinte ja vorhin schon mal, man hat irgendwie so eine bestimmte Reaktion auf Schriften und da mal so ein bisschen so auf sich selber zu achten, wenn ich jetzt mir die Schrift anschaue, was ist so meine direkte Reaktion? Denke ich mir irgendwie, ach, das sieht ja toll aus oder huch, was ist denn da passiert? Das ist dann vielleicht auch schon ein ganz gutes Ausschlusskriterium, um so ein bisschen sich heranzutasten. Dann gibt es natürlich, was wir auch schon hatten, quasi die Verkaufsargumente für diese Schriften. Also wenn ich jetzt irgendwie auf die JetBrains Mono-Schrift Seite G, über die wir ja gesprochen hatten, dann gibt's da auch bestimmt irgendwelche Sachen, die man vielleicht selber interessant findet, eben seien es Ligaturen oder seien es irgendwie andere Features, wie eben, dass die X-Höhe höher ist und sich da erstmal so ein bisschen einfach inspirieren zu lassen und dann dadurch, dass die Schriften ja alle kostenlos sind, Einfach mal runterladen, installieren, im Editor umstellen und den Code, mit dem ihr vertraut seid, das ist vielleicht eine wichtige Sache, weil wir sprechen ja wieder so ein bisschen um Übergewöhnung, das heißt so, keine Ahnung, nehmt euch das Projekt vor, an dem ihr gerade arbeitet und stellt mal die Schrift um und schaut mal, wie es euch da dann geht. Da dann auch nochmal ein kleiner Tipp, oft kann man in dem Editor dann eben auch Fallback-Fonts einstellen und wenn ihr dann beispielsweise eure Schrift, die ihr nehmen wollt, eben vorne an erster Stelle habt, dann schreibt dahinter mal irgendwie Sans oder Sans Serif oder Times New Roman oder irgendwas, damit ihr seht, ob die Schrift tatsächlich geladen wurde. Weil, wenn ich da irgendwie fünf Monospace-Schriften hab, dann ist es schwer zu sehen, ob da jetzt tatsächlich die Schrift genommen wird, die ich an erster Stelle stehen hab. Das heißt, da ist es dann gut, wirklich einen Fallback von zu haben, der komplett anders aussieht, dass ihr seht, ob die Schrift geladen wurde oder nicht. Und dann, ja, der Schrift so ein bisschen Zeit geben, euch Zeit geben, die Schrift zu verwenden und vielleicht mal so ein bisschen in ein paar Zeichen rein zu zoomen, euch anzuschauen, wie bestimmte Zeichen aussehen. Dann vielleicht eine andere Schriftart mal nehmt oder, was wir vorhin ja auch besprochen haben, vielleicht mal irgendwie für CSS eine andere Schriftart zu nehmen als für HTML. Und so weiter und so fort. Und ja, da mit so einer Neugier ranzugehen, mit einer gewissen Freude auch ranzugehen, das ist tatsächlich, also jede Schrift, und das betrifft natürlich nicht nur Programmierschriften, wurde von irgendjemandem gestaltet. Also irgendjemand hat sich darüber Gedanken gemacht, warum dieser eine Buchstabe so aussieht, wie er jetzt gerade aussieht. Und das, finde ich, ist eine total schöne Sache, dass wirklich Entscheidungen zu begutachten sind, dass jetzt irgendwie dieses W so ein bisschen zusammengequetscht ist und dann irgendwie die Ärmchen an der Seite so ein bisschen nach innen gezogen sind, weil der Designer oder die Designerin das so wollte. Und da gibt es ganz, ganz viel zu entdecken. Und ja, letztendlich ist es subjektiv. Also es gibt objektive Faktoren, die ihr mit einbeziehen könnt, worüber wir gesprochen haben für die Programmiersprache, in der ihr schreibt, ob der Code gut lesbar ist oder ob da irgendwas da ist, wo ihr sagt, ja, das hilft mir nicht oder es macht meinen Code tatsächlich weniger lesbar. Aber letztendlich, wenn euch eine Schrift gefällt, dann go for it.",
      "start": 3696825,
      "end": 3899497,
      "confidence": 0.7966746794871801,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Aber der Fallback geht nur auf die ganze Schriftart, der Fallback geht jetzt nicht auf einzelne Zeichen, oder?",
      "start": 3899537,
      "end": 3905041,
      "confidence": 0.8117222222222222,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "In Editoren, soweit ich weiß, nicht. Man könnte ... Das ist eher ein Webdesign-Thema. Im Webdesign kannst du bestimmte Forebacks nur auf bestimmte Zeichen beziehen. Aber ich glaub, im Editor ist es nur komplett oder gar nicht. Aber dadurch ist es auch schnell auffällig, wenn die Schrift nicht geladen wurde. Aber es geht jetzt nicht, dass ihr ... Zumindest meines Wissens nicht, dass ihr sagt, die geschwungenen Klammern sollen in der Schrift dargestellt werden.",
      "start": 3905461,
      "end": 3928192,
      "confidence": 0.757945945945946,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Jetzt hast du ja schon den Unterschied herauskristallisiert zwischen, ich sag mal, Font-Design und Font-Engineering. Wenn du jetzt, wenn sich jetzt jemand meldet und sagt, ich möchte mal ein bisschen tiefer ins Frontengineering einsteigen und ich könnte mir sogar vorstellen, in diese Richtung dann irgendwie meine Profession aufzubauen. Welche ein zwei Tipps hättest du für diese Person?",
      "start": 3928552,
      "end": 3946923,
      "confidence": 0.7501754385964912,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Also ich glaube, wenn man sich für das Frontengineering interessiert, dann ist tatsächlich Google als Unternehmen eine eine erste Adresse, weil Google mittlerweile kann man davon halten, was man will, aber sehr sehr viel über, was die Schriftentwicklung betrifft, mit vorantreibt. Also mit Google Fonts, mit der Plattform, so ein bisschen so, dass das Monopol von Open Source Schriften tatsächlich irgendwie so an sich gerissen hat. Und da gibt's auf der Google Fonts Seite so ein paar Artikel dazu, um so ein bisschen tiefer einzusteigen dazu. Und wenn es jetzt tatsächlich mehr so um die Programmierung geht, kommt man tatsächlich an Python nicht ganz vorbei. Es gibt eine Library für Python, die nennt sich Font-Tools, also die im Prinzip so im Zentrum des Font-Engineering sehr viel verwendet wird. Das heißt also, wenn man irgendwie in die Richtung gehen will, ist es nicht verkehrt, Python ein bisschen reinzuschnuppern, natürlich sich generell so ein bisschen mit Schriftgestaltung auseinanderzusetzen und dann so langsam in diese Bubble reinzukommen und zu schauen, was es da einerseits für technische Anforderungen gibt, was irgendwie wie die Entwicklung aussieht, welche Tools da mit in Verwendung sind in diesen Production Pipelines und so langsam reinzuschnuppern. Ja, also falls jetzt jemand hier zuhört und da richtig Bock drauf hat, stehen wahrscheinlich auch meine Kontaktdaten irgendwo und dann kann ich auch persönlich weiterhelfen, weil es jetzt nicht diese eine Adresse gibt, wo man irgendwie einen Bootcamp oder so dafür bekommt.",
      "start": 3947104,
      "end": 4035481,
      "confidence": 0.8105313807531378,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Also bei Stepson habe ich keine offenen Schillenausschreibungen zum Thema Font-Engineer gefunden. Ich glaube, da würde ich mehr im Bereich DevOps-Engineer oder ähnliches finden. Aber zum abschluss noch eine frage welche.",
      "start": 4035701,
      "end": 4047026,
      "confidence": 0.7808064516129032,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Programmierfront nutzt du ich benutze was ich vorhin schon meinte jetbrains mono und input sons momentan wie oft wechselst du deine schriftart so jeden sonntag keine ahnung es ist tatsächlich so dass es so ein bisschen wie keine ahnung wenn man ein thema ausprobiert oder so kann ich kann ich eine zahl drauf drauflegen ich habe jetzt tatsächlich so im vorfeld der das podcast so ein bisschen rumgeschaut und hab mir mononoki ein bisschen näher angeschaut und die werde ich vielleicht demnächst mal verwenden aber sehr sehr oft ist es auch nicht weil wie gesagt das hat auch was mit gewöhnung zu tun also das ist tatsächlich auch so, dass ich lieber tatsächlich programmier als jetzt irgendwie die programmierfonds.",
      "start": 4047046,
      "end": 4086632,
      "confidence": 0.7557226890756303,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Durch zu wechseln auf jeden fall vielen lieben dank dass du dir die zeit genommen hast mit einem aus dem pod und einer aus österreich über schriftarten zu sprechen du hast mir auf jeden fall ziemlich viel motivation beschert mir mal einfach die indien normen also deutsche industrien normen so der klassiker Nee, aber ich hab tierisch Bock jetzt mal zum Beispiel hier dieses Jet Brains Mono auszuprobieren und mal mit diesen, bisschen mit diesen Ligaturen rumzuspielen und so. Also, Philipp, vielen lieben Dank. Und ich weiß gar nicht, was ich sagen soll. Ich glaub, nur als Dank kann ich anbieten, falls du mal ein Opfer in Schach suchst, dann steh ich gern zur Verfügung. Weil ich kann's ein bisschen, aber ich weiß nicht, was ich da tue. Ja, aber ein gewisses Level sollte der.",
      "start": 4086652,
      "end": 4130242,
      "confidence": 0.7483481481481482,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Gegner ja auch haben.",
      "start": 4130261,
      "end": 4130982,
      "confidence": 0.4,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Aber vielleicht ist es auch eine gute Überleitung zu den Schriften. Also man muss nicht unbedingt wissen, was man da tut, um so ein bisschen Spaß daran zu haben. Also einfach mal so ein bisschen eintauchen und rumprobieren. Macht Spaß beim Schachspielen oder beim Schriftwählen. Ja, vielen Dank, dass ihr mich zu Gast hattet. Ich hoffe, dass ich das Thema Schriften so ein bisschen näher bringen konnte, weil ja, es ist wirklich sowas, also keine Ahnung. Ab dem Moment, an dem man morgens aufsteht und auf sein Handy-Display schaut oder durch die Welt geht, also wenn ihr jetzt nicht gerade im Walde wandern geht, sind Schriften wirklich überall. Irgendjemand hat die gemacht, irgendjemand hat sich hoffentlich gute Gedanken dazu gemacht und man kommt an dem Thema einfach nicht vorbei. Und es gibt sehr, sehr viel zu entdecken und vielleicht habe ich so ein bisschen Lust gemacht, heute zu reden.",
      "start": 4131438,
      "end": 4171618,
      "confidence": 0.7764496644295305,
      "channel": null,
      "speaker": "A"
    },
    {
      "text": "Ich habe in diesem Moment meine Legaturen aktiviert in VS Code. Ich bin schon ziemlich gespannt. Vielen, vielen Dank dafür.",
      "start": 4172178,
      "end": 4178564,
      "confidence": 0.7582000000000001,
      "channel": null,
      "speaker": "C"
    },
    {
      "text": "Dann würde ich sagen, entlassen wir euch jetzt. Spielt mit Schriften rum. Vielen Dank. Vielen Dank, Philipp. Vielen Dank für das Zuhören. Und bis bald.",
      "start": 4178585,
      "end": 4186913,
      "confidence": 0.79468,
      "channel": null,
      "speaker": "B"
    },
    {
      "text": "Tschüss. Danke. Tschau. Tschüss.",
      "start": 4187274,
      "end": 4189015,
      "confidence": 0.3725,
      "channel": null,
      "speaker": "C"
    }
  ],
  "confidence": 0.795867480453167,
  "audio_duration": 4195.0,
  "webhook_status_code": null,
  "webhook_auth": false,
  "summary": null,
  "auto_highlights_result": null,
  "content_safety_labels": null,
  "chapters": null,
  "sentiment_analysis_results": null,
  "entities": null
}
