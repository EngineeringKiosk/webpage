{
    "language_code": "de",
    "audio_url": "https://audio1.redcircle.com/episodes/2ec995e1-8cfe-4b45-8859-10d85dd3de1b/stream.mp3",
    "punctuate": true,
    "format_text": true,
    "dual_channel": false,
    "multichannel": null,
    "audio_channels": null,
    "webhook_url": null,
    "webhook_auth_header_name": null,
    "webhook_auth_header_value": null,
    "audio_start_from": null,
    "audio_end_at": null,
    "word_boost": [],
    "boost_param": null,
    "filter_profanity": false,
    "redact_pii": false,
    "redact_pii_audio": false,
    "redact_pii_audio_quality": null,
    "redact_pii_policies": null,
    "redact_pii_sub": null,
    "speaker_labels": true,
    "speakers_expected": 3,
    "content_safety": false,
    "content_safety_confidence": null,
    "iab_categories": false,
    "custom_spelling": null,
    "disfluencies": false,
    "sentiment_analysis": false,
    "auto_chapters": false,
    "entity_detection": false,
    "summarization": false,
    "summary_model": null,
    "summary_type": null,
    "auto_highlights": false,
    "language_detection": false,
    "language_confidence_threshold": null,
    "language_confidence": null,
    "speech_threshold": null,
    "speech_model": null,
    "id": "d00a8123-29b9-4cdd-baac-75d92c40680a",
    "status": "completed",
    "error": null,
    "utterances": [
        {
            "text": "Du hast ins Engineering Kiosk Adventskalender Türchen Nr. Vier eingeschaltet. Cool, dass du wieder dabei bist. Herzlich willkommen. Der Engineering Kiosk ist Teil der deutschsprachigen Podcast Community, wenn es um Softwareentwicklung geht. Wir sind aber nicht die einzigen, die zu diesen Themen regelmäßig etwas auf der Audiospur aufnehmen. Weiterhin denken wir, dass sich eine Community supporten sollte und und auch mal Weiterempfehlungen aussprechen sollte, wenn jemand wirklich gute Arbeit leistet. Das tun wir mit dem heutigen Community Beitrag von der Programmierbar. Aber bevor es losgeht, noch etwas kurzes zum Lachen. Ich trauer mit der armen kleinen Funktion. Nun gut, los geht's mit der Programmierbar. Viel Spaß.",
            "start": 4560,
            "end": 49392,
            "confidence": 0.9175012,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Hi, ich bin der Fabi.",
            "start": 49496,
            "end": 50376,
            "confidence": 0.976212,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Und ich bin der Jan. Und zusammen mit ganz vielen anderen Gesichtern sind Widi programmierbar. Bei der Programmierbar gibt es zweimal die Woche einen Podcast über News Development, Tech Themen, Languages, Frameworks, Projekten und alles andere, was uns noch in den Sinn kommt. Und wir haben heute für euch ein ganz besonderes Adventskalender Türchen vorbereitet.",
            "start": 50448,
            "end": 68560,
            "confidence": 0.9148649,
            "speaker": "C",
            "channel": null
        },
        {
            "text": "Hinter diesem Türchen verbirgt sich eine IDE. Die ID nennt sich Cursor und das ist die IDE, die mein Entwickleralltag im letzten Jahr echt am stärksten verändert hat. Cursor ist ein Fork von der IDE vs Code und ist im Endeffekt eine AI enhanced IDE. Also wirklich wurde eigentlich vom Grunde auf gedacht, wie macht man es am besten, AI in den Softwarealltag zu integrieren? Und zu dem Zeitpunkt, als der Copilot in VS Code auf jeden Fall vielleicht noch nicht so mächtig war, wie er gerade ist, war das wirklich das nächste Level, was Cursor damit gestartet hat. Mittlerweile hat VS Code zwar ein bisschen aufgeholt, aber Cursor ist immer noch weit vorne dran. Cursor bietet verschiedene Integrationen von AI Modellen. Also man kann einerseits die OpenAI Modelle nutzen, man kann die Entropic Claude Sonnet Modelle nutzen und die sind zumindest drin, wenn man den Pro Plan kauft von Cursor $20 im Monat. Ansonsten kann man auch jegliches Modell anbinden über eine API mit API Key. Gar kein Problem. Auch lokale Modelle kann man nutzen zur Ausführung der ganzen Predictions. Und was wirklich mega gut funktioniert, ist einfach, wie sie es integriert haben. Das Feature, was ich eigentlich am meisten nutze, ist der Chat. Der Chat. Dem Chat kann ich Fragen stellen und meine komplette Code Basis als Kontext geben. Also entweder immer nur das lokale, das File, was ich gerade offen habe, oder eben über die gesamte Codebase, wobei Cursor selbst entscheidet, welche Files mit in die Query mit reingenommen werden, in die Anfrage an das Modell und hat insofern mein eigenes Alltag wirklich verändert, dass ich erstens viele Dinge nicht mehr selbst schreibe, zweitens Dinge schreibe, die ich vorher gar nicht angegangen wäre. Ich habe letztens einen Ast genutzt, um irgendwie Dokumentation aus meinem Code zu generieren. Vorher hatte ich keinen Plan davon, wie ich es gemacht hätte, hätte es wahrscheinlich gar nicht angegangen. Und mir macht Testschreiben endlich wieder Spaß, weil Cursor eigentlich fast alle Tests für mich automatisch schreibt. Und das ist wirklich die Art, wie ich es mir eigentlich vorstellen würde, Tests zu schreiben. Natürlich habe ich noch manuellen Input, aber der Großteil wird von Cursor geschrieben. Cursor hat letztens auch Supermaven gekauft. Super Maven ist eine Extension in versus Code, die unfassbar schnelle Tab Completion oder generell Auto Completion meines Codes via AI macht. Haben ein eigenes Modell dafür trainiert, was mal kein Transformer Modell ist und gibt echt mega viele Use Cases und sehr gute Integrationen von AI innerhalb von Cursor. Wie gesagt, einerseits den Chat, andererseits kann ich mit Command K an jeder Stelle einfach Fragen stellen, genau zu der Stelle, an der ich gerade bin. Sie haben auch so Dinge, die ich teilweise gar nicht so viel nutze, wie Cursor Prediction. Wo springt denn, wo soll denn als nächstes mein Cursor hinspringen? Wo möchte ich wahrscheinlich hingehen? Automatische Multi Line Edits, aber auch z.B. kann ich in dem integrierten Terminal mit der AI interagieren und jedwede Stelle, wenn ich irgendwas im Terminal ausführe, beispielsweise irgendeinen Fehler als Kontext mit reingeben in den Chat. Und es ist wirklich einfach super natürlich und überlege mir zweimal, ob ich eine Zeile Code noch selbst schreibe oder an der Stelle einfach die AI in Cursor frage, weil ich auch die Möglichkeit habe, am Ende sogar das Web zu fragen oder Dokumentation aus Libraries zu integrieren, die ich in mein Projekt gerade nutze. Deswegen unsere Empfehlung auf jeden Fall, auch wenn der Großteil hoffentlich von euch Cursor schon kennt. Vielleicht finden wir noch den einen oder anderen, der es noch nicht kennt. Falls ja, ladet euch Cursor runter, wenn es eine IDE ist, die eure Programmiersprache supportet.",
            "start": 68640,
            "end": 250760,
            "confidence": 0.907464,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Vielleicht kannst du noch ganz kurz erklären, wie das vom Workflow her funktioniert. Also wie muss ich mir das vorstellen? Ist es einfach nur eine bessere Autocompletion? Ist es ein rein angegliederter Chat? Wie kommen die Prompts da zustande? Wie kommt der Code zustande?",
            "start": 250840,
            "end": 265656,
            "confidence": 0.9188914,
            "speaker": "C",
            "channel": null
        },
        {
            "text": "Ja, also ich muss sogar sagen, Auto Completion ist der Part, den ich das gar nicht. Also natürlich nutze ich Auto Completion, aber das ist gar nicht der Part, der meinen Alltag so verändert hat. Ich glaube, der Part, der es wirklich verändert hat, ist die sehr gute Chat Integration. Das ist komplett vermint mit Shortcuts. Wenn ich Command Shift L drücke, öffne ich den Chat immer das aktuelle Pfeil, was ich gerade öffne, als Kontext mit drin. Da kann ich meinen Prompt eingeben, dann kann ich entscheiden, möchte ich diesen Prompt abschicken, nur mit diesem einen Pfeil als Kontext, kann auch manuell ein paar andere Files hinzufügen oder ich kann den anderen Button drücken, der sagt Codebase und dann macht Cursor, durchsucht einfach meine komplette Codebase anhand meines Prompts und entscheidet selbst, welche Files es an das Modell mit übergibt. Dann kommt die Antwort im Chat. Das ist dann teilweise Fließtext, teilweise sind es dann eben genau diese Code Schnipsel. Und da gibt es den Copy bzw. Sehr viel mächtiger den Apply Button, wo Cursor dann selbst diese Änderung, die es vorschlägt, in deinen Files applied, die man noch dann pro Zeile ein bisschen so wie man es aus einem Merge Tool kennt, einfach applyen kann, wenn man möchte. Und es geht sogar über Files hinweg, also nicht nur das aktuelle File, es kann andere Files finden, wo verschiedene Änderungen gemacht werden. Oder wenn es dir vorschlagen würde, neue Files zu generieren, generiert es auch diese Files und Ÿousand fügt die Changes da direkt ein. Also der Großteil von meinem Alltag ist diese Chat Integration. Ansonsten Command K wäre der andere wichtige Shortcut, den man an jeder Stelle nutzen kann, um genau an der Stelle irgendwie Code einzufügen oder zu verändern.",
            "start": 265728,
            "end": 341786,
            "confidence": 0.9086807,
            "speaker": "B",
            "channel": null
        },
        {
            "text": "Wunderbar. Dann an alle da draußen viel Spaß mit Cursor.",
            "start": 341858,
            "end": 345630,
            "confidence": 0.911665,
            "speaker": "C",
            "channel": null
        },
        {
            "text": "Vielen lieben Dank an Fabi und Jan von der programmierbar für diesen Gastbeitrag. Wenn ihr nun Lust habt, mal Cursor als neue AI IDE auszuprobieren oder bei der Programmierbar mal reinzuhören, alle Links findet ihr natürlich in den Shownotes. Wenn euch gefallen hat, was ihr gehört habt, lasst uns auch gerne mal eine Bewertung oder Feedback da. Ansonsten wünschen wir, Andi und Wolfgang vom Engineering Kiosk, euch eine ruhige und schöne Weihnachtszeit. Bis später.",
            "start": 345970,
            "end": 371040,
            "confidence": 0.9079531,
            "speaker": "A",
            "channel": null
        },
        {
            "text": "Zweitausendein.",
            "start": 377540,
            "end": 377740,
            "confidence": 0.84383,
            "speaker": "B",
            "channel": null
        }
    ],
    "confidence": 0.90970534,
    "audio_duration": 378,
    "webhook_status_code": null,
    "webhook_auth": false,
    "summary": null,
    "auto_highlights_result": null,
    "content_safety_labels": null,
    "chapters": null,
    "sentiment_analysis_results": null,
    "entities": null
}